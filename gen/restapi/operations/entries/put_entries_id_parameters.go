// Code generated by go-swagger; DO NOT EDIT.

package entries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPutEntriesIDParams creates a new PutEntriesIDParams object
// with the default values initialized.
func NewPutEntriesIDParams() PutEntriesIDParams {
	var ()
	return PutEntriesIDParams{}
}

// PutEntriesIDParams contains all the bound params for the put entries ID operation
// typically these are obtained from a http.Request
//
// swagger:parameters PutEntriesID
type PutEntriesIDParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: formData
	*/
	AnonymousComments *bool
	/*
	  In: formData
	*/
	Content *string
	/*
	  Required: true
	  Minimum: 1
	  In: path
	*/
	ID int64
	/*
	  In: formData
	*/
	IsVotable *bool
	/*
	  In: formData
	*/
	Privacy *string
	/*
	  In: formData
	*/
	Title *string
	/*
	  In: formData
	*/
	VisibleFor []int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *PutEntriesIDParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return err
		} else if err := r.ParseForm(); err != nil {
			return err
		}
	}
	fds := runtime.Values(r.Form)

	fdAnonymousComments, fdhkAnonymousComments, _ := fds.GetOK("anonymous_comments")
	if err := o.bindAnonymousComments(fdAnonymousComments, fdhkAnonymousComments, route.Formats); err != nil {
		res = append(res, err)
	}

	fdContent, fdhkContent, _ := fds.GetOK("content")
	if err := o.bindContent(fdContent, fdhkContent, route.Formats); err != nil {
		res = append(res, err)
	}

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	fdIsVotable, fdhkIsVotable, _ := fds.GetOK("isVotable")
	if err := o.bindIsVotable(fdIsVotable, fdhkIsVotable, route.Formats); err != nil {
		res = append(res, err)
	}

	fdPrivacy, fdhkPrivacy, _ := fds.GetOK("privacy")
	if err := o.bindPrivacy(fdPrivacy, fdhkPrivacy, route.Formats); err != nil {
		res = append(res, err)
	}

	fdTitle, fdhkTitle, _ := fds.GetOK("title")
	if err := o.bindTitle(fdTitle, fdhkTitle, route.Formats); err != nil {
		res = append(res, err)
	}

	fdVisibleFor, fdhkVisibleFor, _ := fds.GetOK("visibleFor")
	if err := o.bindVisibleFor(fdVisibleFor, fdhkVisibleFor, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutEntriesIDParams) bindAnonymousComments(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("anonymous_comments", "formData", "bool", raw)
	}
	o.AnonymousComments = &value

	return nil
}

func (o *PutEntriesIDParams) bindContent(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Content = &raw

	return nil
}

func (o *PutEntriesIDParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("id", "path", "int64", raw)
	}
	o.ID = value

	if err := o.validateID(formats); err != nil {
		return err
	}

	return nil
}

func (o *PutEntriesIDParams) validateID(formats strfmt.Registry) error {

	if err := validate.MinimumInt("id", "path", int64(o.ID), 1, false); err != nil {
		return err
	}

	return nil
}

func (o *PutEntriesIDParams) bindIsVotable(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("isVotable", "formData", "bool", raw)
	}
	o.IsVotable = &value

	return nil
}

func (o *PutEntriesIDParams) bindPrivacy(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Privacy = &raw

	if err := o.validatePrivacy(formats); err != nil {
		return err
	}

	return nil
}

func (o *PutEntriesIDParams) validatePrivacy(formats strfmt.Registry) error {

	if err := validate.Enum("privacy", "formData", *o.Privacy, []interface{}{"all", "followers", "some", "me", "anonymous"}); err != nil {
		return err
	}

	return nil
}

func (o *PutEntriesIDParams) bindTitle(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Title = &raw

	return nil
}

func (o *PutEntriesIDParams) bindVisibleFor(rawData []string, hasKey bool, formats strfmt.Registry) error {

	var qvVisibleFor string
	if len(rawData) > 0 {
		qvVisibleFor = rawData[len(rawData)-1]
	}

	visibleForIC := swag.SplitByFormat(qvVisibleFor, "")

	if len(visibleForIC) == 0 {
		return nil
	}

	var visibleForIR []int64
	for i, visibleForIV := range visibleForIC {
		visibleForI, err := swag.ConvertInt64(visibleForIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "visibleFor", i), "formData", "int64", visibleForI)
		}

		if err := validate.MinimumInt(fmt.Sprintf("%s.%v", "visibleFor", i), "formData", int64(visibleForI), 1, false); err != nil {
			return err
		}

		visibleForIR = append(visibleForIR, visibleForI)
	}

	o.VisibleFor = visibleForIR

	return nil
}
