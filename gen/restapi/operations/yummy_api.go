// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/sevings/yummy-server/gen/models"
	"github.com/sevings/yummy-server/gen/restapi/operations/account"
	"github.com/sevings/yummy-server/gen/restapi/operations/comments"
	"github.com/sevings/yummy-server/gen/restapi/operations/design"
	"github.com/sevings/yummy-server/gen/restapi/operations/entries"
	"github.com/sevings/yummy-server/gen/restapi/operations/favorites"
	"github.com/sevings/yummy-server/gen/restapi/operations/me"
	"github.com/sevings/yummy-server/gen/restapi/operations/relations"
	"github.com/sevings/yummy-server/gen/restapi/operations/users"
	"github.com/sevings/yummy-server/gen/restapi/operations/votes"
	"github.com/sevings/yummy-server/gen/restapi/operations/watchings"
)

// NewYummyAPI creates a new Yummy instance
func NewYummyAPI(spec *loads.Document) *YummyAPI {
	return &YummyAPI{
		handlers:              make(map[string]map[string]http.Handler),
		formats:               strfmt.Default,
		defaultConsumes:       "application/json",
		defaultProduces:       "application/json",
		ServerShutdown:        func() {},
		spec:                  spec,
		ServeError:            errors.ServeError,
		BasicAuthenticator:    security.BasicAuth,
		APIKeyAuthenticator:   security.APIKeyAuth,
		BearerAuthenticator:   security.BearerAuth,
		JSONConsumer:          runtime.JSONConsumer(),
		UrlformConsumer:       runtime.DiscardConsumer,
		MultipartformConsumer: runtime.DiscardConsumer,
		JSONProducer:          runtime.JSONProducer(),
		CommentsDeleteCommentsIDHandler: comments.DeleteCommentsIDHandlerFunc(func(params comments.DeleteCommentsIDParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation CommentsDeleteCommentsID has not yet been implemented")
		}),
		VotesDeleteCommentsIDVoteHandler: votes.DeleteCommentsIDVoteHandlerFunc(func(params votes.DeleteCommentsIDVoteParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation VotesDeleteCommentsIDVote has not yet been implemented")
		}),
		EntriesDeleteEntriesIDHandler: entries.DeleteEntriesIDHandlerFunc(func(params entries.DeleteEntriesIDParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesDeleteEntriesID has not yet been implemented")
		}),
		FavoritesDeleteEntriesIDFavoriteHandler: favorites.DeleteEntriesIDFavoriteHandlerFunc(func(params favorites.DeleteEntriesIDFavoriteParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation FavoritesDeleteEntriesIDFavorite has not yet been implemented")
		}),
		VotesDeleteEntriesIDVoteHandler: votes.DeleteEntriesIDVoteHandlerFunc(func(params votes.DeleteEntriesIDVoteParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation VotesDeleteEntriesIDVote has not yet been implemented")
		}),
		WatchingsDeleteEntriesIDWatchingHandler: watchings.DeleteEntriesIDWatchingHandlerFunc(func(params watchings.DeleteEntriesIDWatchingParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation WatchingsDeleteEntriesIDWatching has not yet been implemented")
		}),
		RelationsDeleteRelationsFromIDHandler: relations.DeleteRelationsFromIDHandlerFunc(func(params relations.DeleteRelationsFromIDParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation RelationsDeleteRelationsFromID has not yet been implemented")
		}),
		RelationsDeleteRelationsToIDHandler: relations.DeleteRelationsToIDHandlerFunc(func(params relations.DeleteRelationsToIDParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation RelationsDeleteRelationsToID has not yet been implemented")
		}),
		AccountGetAccountEmailEmailHandler: account.GetAccountEmailEmailHandlerFunc(func(params account.GetAccountEmailEmailParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountGetAccountEmailEmail has not yet been implemented")
		}),
		AccountGetAccountInvitesHandler: account.GetAccountInvitesHandlerFunc(func(params account.GetAccountInvitesParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation AccountGetAccountInvites has not yet been implemented")
		}),
		AccountGetAccountNameNameHandler: account.GetAccountNameNameHandlerFunc(func(params account.GetAccountNameNameParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountGetAccountNameName has not yet been implemented")
		}),
		AccountGetAccountVerificationEmailHandler: account.GetAccountVerificationEmailHandlerFunc(func(params account.GetAccountVerificationEmailParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation AccountGetAccountVerificationEmail has not yet been implemented")
		}),
		CommentsGetCommentsIDHandler: comments.GetCommentsIDHandlerFunc(func(params comments.GetCommentsIDParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation CommentsGetCommentsID has not yet been implemented")
		}),
		VotesGetCommentsIDVoteHandler: votes.GetCommentsIDVoteHandlerFunc(func(params votes.GetCommentsIDVoteParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation VotesGetCommentsIDVote has not yet been implemented")
		}),
		DesignGetDesignHandler: design.GetDesignHandlerFunc(func(params design.GetDesignParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation DesignGetDesign has not yet been implemented")
		}),
		DesignGetDesignFontsHandler: design.GetDesignFontsHandlerFunc(func(params design.GetDesignFontsParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation DesignGetDesignFonts has not yet been implemented")
		}),
		EntriesGetEntriesAnonymousHandler: entries.GetEntriesAnonymousHandlerFunc(func(params entries.GetEntriesAnonymousParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesGetEntriesAnonymous has not yet been implemented")
		}),
		EntriesGetEntriesBestHandler: entries.GetEntriesBestHandlerFunc(func(params entries.GetEntriesBestParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesGetEntriesBest has not yet been implemented")
		}),
		EntriesGetEntriesFriendsHandler: entries.GetEntriesFriendsHandlerFunc(func(params entries.GetEntriesFriendsParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesGetEntriesFriends has not yet been implemented")
		}),
		EntriesGetEntriesIDHandler: entries.GetEntriesIDHandlerFunc(func(params entries.GetEntriesIDParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesGetEntriesID has not yet been implemented")
		}),
		CommentsGetEntriesIDCommentsHandler: comments.GetEntriesIDCommentsHandlerFunc(func(params comments.GetEntriesIDCommentsParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation CommentsGetEntriesIDComments has not yet been implemented")
		}),
		FavoritesGetEntriesIDFavoriteHandler: favorites.GetEntriesIDFavoriteHandlerFunc(func(params favorites.GetEntriesIDFavoriteParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation FavoritesGetEntriesIDFavorite has not yet been implemented")
		}),
		VotesGetEntriesIDVoteHandler: votes.GetEntriesIDVoteHandlerFunc(func(params votes.GetEntriesIDVoteParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation VotesGetEntriesIDVote has not yet been implemented")
		}),
		WatchingsGetEntriesIDWatchingHandler: watchings.GetEntriesIDWatchingHandlerFunc(func(params watchings.GetEntriesIDWatchingParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation WatchingsGetEntriesIDWatching has not yet been implemented")
		}),
		EntriesGetEntriesLiveHandler: entries.GetEntriesLiveHandlerFunc(func(params entries.GetEntriesLiveParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesGetEntriesLive has not yet been implemented")
		}),
		EntriesGetEntriesUsersByNameNameHandler: entries.GetEntriesUsersByNameNameHandlerFunc(func(params entries.GetEntriesUsersByNameNameParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesGetEntriesUsersByNameName has not yet been implemented")
		}),
		EntriesGetEntriesUsersByNameNameFavoritesHandler: entries.GetEntriesUsersByNameNameFavoritesHandlerFunc(func(params entries.GetEntriesUsersByNameNameFavoritesParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesGetEntriesUsersByNameNameFavorites has not yet been implemented")
		}),
		EntriesGetEntriesUsersIDHandler: entries.GetEntriesUsersIDHandlerFunc(func(params entries.GetEntriesUsersIDParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesGetEntriesUsersID has not yet been implemented")
		}),
		EntriesGetEntriesUsersIDFavoritesHandler: entries.GetEntriesUsersIDFavoritesHandlerFunc(func(params entries.GetEntriesUsersIDFavoritesParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesGetEntriesUsersIDFavorites has not yet been implemented")
		}),
		EntriesGetEntriesUsersMeHandler: entries.GetEntriesUsersMeHandlerFunc(func(params entries.GetEntriesUsersMeParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesGetEntriesUsersMe has not yet been implemented")
		}),
		EntriesGetEntriesUsersMeFavoritesHandler: entries.GetEntriesUsersMeFavoritesHandlerFunc(func(params entries.GetEntriesUsersMeFavoritesParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesGetEntriesUsersMeFavorites has not yet been implemented")
		}),
		EntriesGetEntriesUsersMeWatchingHandler: entries.GetEntriesUsersMeWatchingHandlerFunc(func(params entries.GetEntriesUsersMeWatchingParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesGetEntriesUsersMeWatching has not yet been implemented")
		}),
		RelationsGetRelationsFromIDHandler: relations.GetRelationsFromIDHandlerFunc(func(params relations.GetRelationsFromIDParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation RelationsGetRelationsFromID has not yet been implemented")
		}),
		RelationsGetRelationsToIDHandler: relations.GetRelationsToIDHandlerFunc(func(params relations.GetRelationsToIDParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation RelationsGetRelationsToID has not yet been implemented")
		}),
		UsersGetUsersByNameNameHandler: users.GetUsersByNameNameHandlerFunc(func(params users.GetUsersByNameNameParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation UsersGetUsersByNameName has not yet been implemented")
		}),
		UsersGetUsersByNameNameFollowersHandler: users.GetUsersByNameNameFollowersHandlerFunc(func(params users.GetUsersByNameNameFollowersParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation UsersGetUsersByNameNameFollowers has not yet been implemented")
		}),
		UsersGetUsersByNameNameFollowingsHandler: users.GetUsersByNameNameFollowingsHandlerFunc(func(params users.GetUsersByNameNameFollowingsParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation UsersGetUsersByNameNameFollowings has not yet been implemented")
		}),
		UsersGetUsersByNameNameInvitedHandler: users.GetUsersByNameNameInvitedHandlerFunc(func(params users.GetUsersByNameNameInvitedParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation UsersGetUsersByNameNameInvited has not yet been implemented")
		}),
		UsersGetUsersIDHandler: users.GetUsersIDHandlerFunc(func(params users.GetUsersIDParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation UsersGetUsersID has not yet been implemented")
		}),
		UsersGetUsersIDFollowersHandler: users.GetUsersIDFollowersHandlerFunc(func(params users.GetUsersIDFollowersParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation UsersGetUsersIDFollowers has not yet been implemented")
		}),
		UsersGetUsersIDFollowingsHandler: users.GetUsersIDFollowingsHandlerFunc(func(params users.GetUsersIDFollowingsParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation UsersGetUsersIDFollowings has not yet been implemented")
		}),
		UsersGetUsersIDInvitedHandler: users.GetUsersIDInvitedHandlerFunc(func(params users.GetUsersIDInvitedParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation UsersGetUsersIDInvited has not yet been implemented")
		}),
		MeGetUsersMeHandler: me.GetUsersMeHandlerFunc(func(params me.GetUsersMeParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation MeGetUsersMe has not yet been implemented")
		}),
		MeGetUsersMeFollowersHandler: me.GetUsersMeFollowersHandlerFunc(func(params me.GetUsersMeFollowersParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation MeGetUsersMeFollowers has not yet been implemented")
		}),
		MeGetUsersMeFollowingsHandler: me.GetUsersMeFollowingsHandlerFunc(func(params me.GetUsersMeFollowingsParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation MeGetUsersMeFollowings has not yet been implemented")
		}),
		MeGetUsersMeIgnoredHandler: me.GetUsersMeIgnoredHandlerFunc(func(params me.GetUsersMeIgnoredParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation MeGetUsersMeIgnored has not yet been implemented")
		}),
		MeGetUsersMeInvitedHandler: me.GetUsersMeInvitedHandlerFunc(func(params me.GetUsersMeInvitedParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation MeGetUsersMeInvited has not yet been implemented")
		}),
		MeGetUsersMeRequestedHandler: me.GetUsersMeRequestedHandlerFunc(func(params me.GetUsersMeRequestedParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation MeGetUsersMeRequested has not yet been implemented")
		}),
		AccountPostAccountLoginHandler: account.PostAccountLoginHandlerFunc(func(params account.PostAccountLoginParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountPostAccountLogin has not yet been implemented")
		}),
		AccountPostAccountPasswordHandler: account.PostAccountPasswordHandlerFunc(func(params account.PostAccountPasswordParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation AccountPostAccountPassword has not yet been implemented")
		}),
		AccountPostAccountRecoverHandler: account.PostAccountRecoverHandlerFunc(func(params account.PostAccountRecoverParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountPostAccountRecover has not yet been implemented")
		}),
		AccountPostAccountRegisterHandler: account.PostAccountRegisterHandlerFunc(func(params account.PostAccountRegisterParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountPostAccountRegister has not yet been implemented")
		}),
		AccountPostAccountVerificationHandler: account.PostAccountVerificationHandlerFunc(func(params account.PostAccountVerificationParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation AccountPostAccountVerification has not yet been implemented")
		}),
		EntriesPostEntriesAnonymousHandler: entries.PostEntriesAnonymousHandlerFunc(func(params entries.PostEntriesAnonymousParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesPostEntriesAnonymous has not yet been implemented")
		}),
		CommentsPostEntriesIDCommentsHandler: comments.PostEntriesIDCommentsHandlerFunc(func(params comments.PostEntriesIDCommentsParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation CommentsPostEntriesIDComments has not yet been implemented")
		}),
		EntriesPostEntriesUsersMeHandler: entries.PostEntriesUsersMeHandlerFunc(func(params entries.PostEntriesUsersMeParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesPostEntriesUsersMe has not yet been implemented")
		}),
		CommentsPutCommentsIDHandler: comments.PutCommentsIDHandlerFunc(func(params comments.PutCommentsIDParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation CommentsPutCommentsID has not yet been implemented")
		}),
		VotesPutCommentsIDVoteHandler: votes.PutCommentsIDVoteHandlerFunc(func(params votes.PutCommentsIDVoteParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation VotesPutCommentsIDVote has not yet been implemented")
		}),
		DesignPutDesignHandler: design.PutDesignHandlerFunc(func(params design.PutDesignParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation DesignPutDesign has not yet been implemented")
		}),
		EntriesPutEntriesIDHandler: entries.PutEntriesIDHandlerFunc(func(params entries.PutEntriesIDParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesPutEntriesID has not yet been implemented")
		}),
		FavoritesPutEntriesIDFavoriteHandler: favorites.PutEntriesIDFavoriteHandlerFunc(func(params favorites.PutEntriesIDFavoriteParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation FavoritesPutEntriesIDFavorite has not yet been implemented")
		}),
		VotesPutEntriesIDVoteHandler: votes.PutEntriesIDVoteHandlerFunc(func(params votes.PutEntriesIDVoteParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation VotesPutEntriesIDVote has not yet been implemented")
		}),
		WatchingsPutEntriesIDWatchingHandler: watchings.PutEntriesIDWatchingHandlerFunc(func(params watchings.PutEntriesIDWatchingParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation WatchingsPutEntriesIDWatching has not yet been implemented")
		}),
		RelationsPutRelationsFromIDHandler: relations.PutRelationsFromIDHandlerFunc(func(params relations.PutRelationsFromIDParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation RelationsPutRelationsFromID has not yet been implemented")
		}),
		RelationsPutRelationsToIDHandler: relations.PutRelationsToIDHandlerFunc(func(params relations.PutRelationsToIDParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation RelationsPutRelationsToID has not yet been implemented")
		}),
		MePutUsersMeHandler: me.PutUsersMeHandlerFunc(func(params me.PutUsersMeParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation MePutUsersMe has not yet been implemented")
		}),

		// Applies when the "X-User-Key" header is set
		APIKeyHeaderAuth: func(token string) (*models.UserID, error) {
			return nil, errors.NotImplemented("api key auth (ApiKeyHeader) X-User-Key from header param [X-User-Key] has not yet been implemented")
		},

		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*YummyAPI the yummy API */
type YummyAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer
	// UrlformConsumer registers a consumer for a "application/x-www-form-urlencoded" mime type
	UrlformConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for a "multipart/form-data" mime type
	MultipartformConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// APIKeyHeaderAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key X-User-Key provided in the header
	APIKeyHeaderAuth func(string) (*models.UserID, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// CommentsDeleteCommentsIDHandler sets the operation handler for the delete comments ID operation
	CommentsDeleteCommentsIDHandler comments.DeleteCommentsIDHandler
	// VotesDeleteCommentsIDVoteHandler sets the operation handler for the delete comments ID vote operation
	VotesDeleteCommentsIDVoteHandler votes.DeleteCommentsIDVoteHandler
	// EntriesDeleteEntriesIDHandler sets the operation handler for the delete entries ID operation
	EntriesDeleteEntriesIDHandler entries.DeleteEntriesIDHandler
	// FavoritesDeleteEntriesIDFavoriteHandler sets the operation handler for the delete entries ID favorite operation
	FavoritesDeleteEntriesIDFavoriteHandler favorites.DeleteEntriesIDFavoriteHandler
	// VotesDeleteEntriesIDVoteHandler sets the operation handler for the delete entries ID vote operation
	VotesDeleteEntriesIDVoteHandler votes.DeleteEntriesIDVoteHandler
	// WatchingsDeleteEntriesIDWatchingHandler sets the operation handler for the delete entries ID watching operation
	WatchingsDeleteEntriesIDWatchingHandler watchings.DeleteEntriesIDWatchingHandler
	// RelationsDeleteRelationsFromIDHandler sets the operation handler for the delete relations from ID operation
	RelationsDeleteRelationsFromIDHandler relations.DeleteRelationsFromIDHandler
	// RelationsDeleteRelationsToIDHandler sets the operation handler for the delete relations to ID operation
	RelationsDeleteRelationsToIDHandler relations.DeleteRelationsToIDHandler
	// AccountGetAccountEmailEmailHandler sets the operation handler for the get account email email operation
	AccountGetAccountEmailEmailHandler account.GetAccountEmailEmailHandler
	// AccountGetAccountInvitesHandler sets the operation handler for the get account invites operation
	AccountGetAccountInvitesHandler account.GetAccountInvitesHandler
	// AccountGetAccountNameNameHandler sets the operation handler for the get account name name operation
	AccountGetAccountNameNameHandler account.GetAccountNameNameHandler
	// AccountGetAccountVerificationEmailHandler sets the operation handler for the get account verification email operation
	AccountGetAccountVerificationEmailHandler account.GetAccountVerificationEmailHandler
	// CommentsGetCommentsIDHandler sets the operation handler for the get comments ID operation
	CommentsGetCommentsIDHandler comments.GetCommentsIDHandler
	// VotesGetCommentsIDVoteHandler sets the operation handler for the get comments ID vote operation
	VotesGetCommentsIDVoteHandler votes.GetCommentsIDVoteHandler
	// DesignGetDesignHandler sets the operation handler for the get design operation
	DesignGetDesignHandler design.GetDesignHandler
	// DesignGetDesignFontsHandler sets the operation handler for the get design fonts operation
	DesignGetDesignFontsHandler design.GetDesignFontsHandler
	// EntriesGetEntriesAnonymousHandler sets the operation handler for the get entries anonymous operation
	EntriesGetEntriesAnonymousHandler entries.GetEntriesAnonymousHandler
	// EntriesGetEntriesBestHandler sets the operation handler for the get entries best operation
	EntriesGetEntriesBestHandler entries.GetEntriesBestHandler
	// EntriesGetEntriesFriendsHandler sets the operation handler for the get entries friends operation
	EntriesGetEntriesFriendsHandler entries.GetEntriesFriendsHandler
	// EntriesGetEntriesIDHandler sets the operation handler for the get entries ID operation
	EntriesGetEntriesIDHandler entries.GetEntriesIDHandler
	// CommentsGetEntriesIDCommentsHandler sets the operation handler for the get entries ID comments operation
	CommentsGetEntriesIDCommentsHandler comments.GetEntriesIDCommentsHandler
	// FavoritesGetEntriesIDFavoriteHandler sets the operation handler for the get entries ID favorite operation
	FavoritesGetEntriesIDFavoriteHandler favorites.GetEntriesIDFavoriteHandler
	// VotesGetEntriesIDVoteHandler sets the operation handler for the get entries ID vote operation
	VotesGetEntriesIDVoteHandler votes.GetEntriesIDVoteHandler
	// WatchingsGetEntriesIDWatchingHandler sets the operation handler for the get entries ID watching operation
	WatchingsGetEntriesIDWatchingHandler watchings.GetEntriesIDWatchingHandler
	// EntriesGetEntriesLiveHandler sets the operation handler for the get entries live operation
	EntriesGetEntriesLiveHandler entries.GetEntriesLiveHandler
	// EntriesGetEntriesUsersByNameNameHandler sets the operation handler for the get entries users by name name operation
	EntriesGetEntriesUsersByNameNameHandler entries.GetEntriesUsersByNameNameHandler
	// EntriesGetEntriesUsersByNameNameFavoritesHandler sets the operation handler for the get entries users by name name favorites operation
	EntriesGetEntriesUsersByNameNameFavoritesHandler entries.GetEntriesUsersByNameNameFavoritesHandler
	// EntriesGetEntriesUsersIDHandler sets the operation handler for the get entries users ID operation
	EntriesGetEntriesUsersIDHandler entries.GetEntriesUsersIDHandler
	// EntriesGetEntriesUsersIDFavoritesHandler sets the operation handler for the get entries users ID favorites operation
	EntriesGetEntriesUsersIDFavoritesHandler entries.GetEntriesUsersIDFavoritesHandler
	// EntriesGetEntriesUsersMeHandler sets the operation handler for the get entries users me operation
	EntriesGetEntriesUsersMeHandler entries.GetEntriesUsersMeHandler
	// EntriesGetEntriesUsersMeFavoritesHandler sets the operation handler for the get entries users me favorites operation
	EntriesGetEntriesUsersMeFavoritesHandler entries.GetEntriesUsersMeFavoritesHandler
	// EntriesGetEntriesUsersMeWatchingHandler sets the operation handler for the get entries users me watching operation
	EntriesGetEntriesUsersMeWatchingHandler entries.GetEntriesUsersMeWatchingHandler
	// RelationsGetRelationsFromIDHandler sets the operation handler for the get relations from ID operation
	RelationsGetRelationsFromIDHandler relations.GetRelationsFromIDHandler
	// RelationsGetRelationsToIDHandler sets the operation handler for the get relations to ID operation
	RelationsGetRelationsToIDHandler relations.GetRelationsToIDHandler
	// UsersGetUsersByNameNameHandler sets the operation handler for the get users by name name operation
	UsersGetUsersByNameNameHandler users.GetUsersByNameNameHandler
	// UsersGetUsersByNameNameFollowersHandler sets the operation handler for the get users by name name followers operation
	UsersGetUsersByNameNameFollowersHandler users.GetUsersByNameNameFollowersHandler
	// UsersGetUsersByNameNameFollowingsHandler sets the operation handler for the get users by name name followings operation
	UsersGetUsersByNameNameFollowingsHandler users.GetUsersByNameNameFollowingsHandler
	// UsersGetUsersByNameNameInvitedHandler sets the operation handler for the get users by name name invited operation
	UsersGetUsersByNameNameInvitedHandler users.GetUsersByNameNameInvitedHandler
	// UsersGetUsersIDHandler sets the operation handler for the get users ID operation
	UsersGetUsersIDHandler users.GetUsersIDHandler
	// UsersGetUsersIDFollowersHandler sets the operation handler for the get users ID followers operation
	UsersGetUsersIDFollowersHandler users.GetUsersIDFollowersHandler
	// UsersGetUsersIDFollowingsHandler sets the operation handler for the get users ID followings operation
	UsersGetUsersIDFollowingsHandler users.GetUsersIDFollowingsHandler
	// UsersGetUsersIDInvitedHandler sets the operation handler for the get users ID invited operation
	UsersGetUsersIDInvitedHandler users.GetUsersIDInvitedHandler
	// MeGetUsersMeHandler sets the operation handler for the get users me operation
	MeGetUsersMeHandler me.GetUsersMeHandler
	// MeGetUsersMeFollowersHandler sets the operation handler for the get users me followers operation
	MeGetUsersMeFollowersHandler me.GetUsersMeFollowersHandler
	// MeGetUsersMeFollowingsHandler sets the operation handler for the get users me followings operation
	MeGetUsersMeFollowingsHandler me.GetUsersMeFollowingsHandler
	// MeGetUsersMeIgnoredHandler sets the operation handler for the get users me ignored operation
	MeGetUsersMeIgnoredHandler me.GetUsersMeIgnoredHandler
	// MeGetUsersMeInvitedHandler sets the operation handler for the get users me invited operation
	MeGetUsersMeInvitedHandler me.GetUsersMeInvitedHandler
	// MeGetUsersMeRequestedHandler sets the operation handler for the get users me requested operation
	MeGetUsersMeRequestedHandler me.GetUsersMeRequestedHandler
	// AccountPostAccountLoginHandler sets the operation handler for the post account login operation
	AccountPostAccountLoginHandler account.PostAccountLoginHandler
	// AccountPostAccountPasswordHandler sets the operation handler for the post account password operation
	AccountPostAccountPasswordHandler account.PostAccountPasswordHandler
	// AccountPostAccountRecoverHandler sets the operation handler for the post account recover operation
	AccountPostAccountRecoverHandler account.PostAccountRecoverHandler
	// AccountPostAccountRegisterHandler sets the operation handler for the post account register operation
	AccountPostAccountRegisterHandler account.PostAccountRegisterHandler
	// AccountPostAccountVerificationHandler sets the operation handler for the post account verification operation
	AccountPostAccountVerificationHandler account.PostAccountVerificationHandler
	// EntriesPostEntriesAnonymousHandler sets the operation handler for the post entries anonymous operation
	EntriesPostEntriesAnonymousHandler entries.PostEntriesAnonymousHandler
	// CommentsPostEntriesIDCommentsHandler sets the operation handler for the post entries ID comments operation
	CommentsPostEntriesIDCommentsHandler comments.PostEntriesIDCommentsHandler
	// EntriesPostEntriesUsersMeHandler sets the operation handler for the post entries users me operation
	EntriesPostEntriesUsersMeHandler entries.PostEntriesUsersMeHandler
	// CommentsPutCommentsIDHandler sets the operation handler for the put comments ID operation
	CommentsPutCommentsIDHandler comments.PutCommentsIDHandler
	// VotesPutCommentsIDVoteHandler sets the operation handler for the put comments ID vote operation
	VotesPutCommentsIDVoteHandler votes.PutCommentsIDVoteHandler
	// DesignPutDesignHandler sets the operation handler for the put design operation
	DesignPutDesignHandler design.PutDesignHandler
	// EntriesPutEntriesIDHandler sets the operation handler for the put entries ID operation
	EntriesPutEntriesIDHandler entries.PutEntriesIDHandler
	// FavoritesPutEntriesIDFavoriteHandler sets the operation handler for the put entries ID favorite operation
	FavoritesPutEntriesIDFavoriteHandler favorites.PutEntriesIDFavoriteHandler
	// VotesPutEntriesIDVoteHandler sets the operation handler for the put entries ID vote operation
	VotesPutEntriesIDVoteHandler votes.PutEntriesIDVoteHandler
	// WatchingsPutEntriesIDWatchingHandler sets the operation handler for the put entries ID watching operation
	WatchingsPutEntriesIDWatchingHandler watchings.PutEntriesIDWatchingHandler
	// RelationsPutRelationsFromIDHandler sets the operation handler for the put relations from ID operation
	RelationsPutRelationsFromIDHandler relations.PutRelationsFromIDHandler
	// RelationsPutRelationsToIDHandler sets the operation handler for the put relations to ID operation
	RelationsPutRelationsToIDHandler relations.PutRelationsToIDHandler
	// MePutUsersMeHandler sets the operation handler for the put users me operation
	MePutUsersMeHandler me.PutUsersMeHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *YummyAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *YummyAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *YummyAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *YummyAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *YummyAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *YummyAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *YummyAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the YummyAPI
func (o *YummyAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.UrlformConsumer == nil {
		unregistered = append(unregistered, "UrlformConsumer")
	}

	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.APIKeyHeaderAuth == nil {
		unregistered = append(unregistered, "XUserKeyAuth")
	}

	if o.CommentsDeleteCommentsIDHandler == nil {
		unregistered = append(unregistered, "comments.DeleteCommentsIDHandler")
	}

	if o.VotesDeleteCommentsIDVoteHandler == nil {
		unregistered = append(unregistered, "votes.DeleteCommentsIDVoteHandler")
	}

	if o.EntriesDeleteEntriesIDHandler == nil {
		unregistered = append(unregistered, "entries.DeleteEntriesIDHandler")
	}

	if o.FavoritesDeleteEntriesIDFavoriteHandler == nil {
		unregistered = append(unregistered, "favorites.DeleteEntriesIDFavoriteHandler")
	}

	if o.VotesDeleteEntriesIDVoteHandler == nil {
		unregistered = append(unregistered, "votes.DeleteEntriesIDVoteHandler")
	}

	if o.WatchingsDeleteEntriesIDWatchingHandler == nil {
		unregistered = append(unregistered, "watchings.DeleteEntriesIDWatchingHandler")
	}

	if o.RelationsDeleteRelationsFromIDHandler == nil {
		unregistered = append(unregistered, "relations.DeleteRelationsFromIDHandler")
	}

	if o.RelationsDeleteRelationsToIDHandler == nil {
		unregistered = append(unregistered, "relations.DeleteRelationsToIDHandler")
	}

	if o.AccountGetAccountEmailEmailHandler == nil {
		unregistered = append(unregistered, "account.GetAccountEmailEmailHandler")
	}

	if o.AccountGetAccountInvitesHandler == nil {
		unregistered = append(unregistered, "account.GetAccountInvitesHandler")
	}

	if o.AccountGetAccountNameNameHandler == nil {
		unregistered = append(unregistered, "account.GetAccountNameNameHandler")
	}

	if o.AccountGetAccountVerificationEmailHandler == nil {
		unregistered = append(unregistered, "account.GetAccountVerificationEmailHandler")
	}

	if o.CommentsGetCommentsIDHandler == nil {
		unregistered = append(unregistered, "comments.GetCommentsIDHandler")
	}

	if o.VotesGetCommentsIDVoteHandler == nil {
		unregistered = append(unregistered, "votes.GetCommentsIDVoteHandler")
	}

	if o.DesignGetDesignHandler == nil {
		unregistered = append(unregistered, "design.GetDesignHandler")
	}

	if o.DesignGetDesignFontsHandler == nil {
		unregistered = append(unregistered, "design.GetDesignFontsHandler")
	}

	if o.EntriesGetEntriesAnonymousHandler == nil {
		unregistered = append(unregistered, "entries.GetEntriesAnonymousHandler")
	}

	if o.EntriesGetEntriesBestHandler == nil {
		unregistered = append(unregistered, "entries.GetEntriesBestHandler")
	}

	if o.EntriesGetEntriesFriendsHandler == nil {
		unregistered = append(unregistered, "entries.GetEntriesFriendsHandler")
	}

	if o.EntriesGetEntriesIDHandler == nil {
		unregistered = append(unregistered, "entries.GetEntriesIDHandler")
	}

	if o.CommentsGetEntriesIDCommentsHandler == nil {
		unregistered = append(unregistered, "comments.GetEntriesIDCommentsHandler")
	}

	if o.FavoritesGetEntriesIDFavoriteHandler == nil {
		unregistered = append(unregistered, "favorites.GetEntriesIDFavoriteHandler")
	}

	if o.VotesGetEntriesIDVoteHandler == nil {
		unregistered = append(unregistered, "votes.GetEntriesIDVoteHandler")
	}

	if o.WatchingsGetEntriesIDWatchingHandler == nil {
		unregistered = append(unregistered, "watchings.GetEntriesIDWatchingHandler")
	}

	if o.EntriesGetEntriesLiveHandler == nil {
		unregistered = append(unregistered, "entries.GetEntriesLiveHandler")
	}

	if o.EntriesGetEntriesUsersByNameNameHandler == nil {
		unregistered = append(unregistered, "entries.GetEntriesUsersByNameNameHandler")
	}

	if o.EntriesGetEntriesUsersByNameNameFavoritesHandler == nil {
		unregistered = append(unregistered, "entries.GetEntriesUsersByNameNameFavoritesHandler")
	}

	if o.EntriesGetEntriesUsersIDHandler == nil {
		unregistered = append(unregistered, "entries.GetEntriesUsersIDHandler")
	}

	if o.EntriesGetEntriesUsersIDFavoritesHandler == nil {
		unregistered = append(unregistered, "entries.GetEntriesUsersIDFavoritesHandler")
	}

	if o.EntriesGetEntriesUsersMeHandler == nil {
		unregistered = append(unregistered, "entries.GetEntriesUsersMeHandler")
	}

	if o.EntriesGetEntriesUsersMeFavoritesHandler == nil {
		unregistered = append(unregistered, "entries.GetEntriesUsersMeFavoritesHandler")
	}

	if o.EntriesGetEntriesUsersMeWatchingHandler == nil {
		unregistered = append(unregistered, "entries.GetEntriesUsersMeWatchingHandler")
	}

	if o.RelationsGetRelationsFromIDHandler == nil {
		unregistered = append(unregistered, "relations.GetRelationsFromIDHandler")
	}

	if o.RelationsGetRelationsToIDHandler == nil {
		unregistered = append(unregistered, "relations.GetRelationsToIDHandler")
	}

	if o.UsersGetUsersByNameNameHandler == nil {
		unregistered = append(unregistered, "users.GetUsersByNameNameHandler")
	}

	if o.UsersGetUsersByNameNameFollowersHandler == nil {
		unregistered = append(unregistered, "users.GetUsersByNameNameFollowersHandler")
	}

	if o.UsersGetUsersByNameNameFollowingsHandler == nil {
		unregistered = append(unregistered, "users.GetUsersByNameNameFollowingsHandler")
	}

	if o.UsersGetUsersByNameNameInvitedHandler == nil {
		unregistered = append(unregistered, "users.GetUsersByNameNameInvitedHandler")
	}

	if o.UsersGetUsersIDHandler == nil {
		unregistered = append(unregistered, "users.GetUsersIDHandler")
	}

	if o.UsersGetUsersIDFollowersHandler == nil {
		unregistered = append(unregistered, "users.GetUsersIDFollowersHandler")
	}

	if o.UsersGetUsersIDFollowingsHandler == nil {
		unregistered = append(unregistered, "users.GetUsersIDFollowingsHandler")
	}

	if o.UsersGetUsersIDInvitedHandler == nil {
		unregistered = append(unregistered, "users.GetUsersIDInvitedHandler")
	}

	if o.MeGetUsersMeHandler == nil {
		unregistered = append(unregistered, "me.GetUsersMeHandler")
	}

	if o.MeGetUsersMeFollowersHandler == nil {
		unregistered = append(unregistered, "me.GetUsersMeFollowersHandler")
	}

	if o.MeGetUsersMeFollowingsHandler == nil {
		unregistered = append(unregistered, "me.GetUsersMeFollowingsHandler")
	}

	if o.MeGetUsersMeIgnoredHandler == nil {
		unregistered = append(unregistered, "me.GetUsersMeIgnoredHandler")
	}

	if o.MeGetUsersMeInvitedHandler == nil {
		unregistered = append(unregistered, "me.GetUsersMeInvitedHandler")
	}

	if o.MeGetUsersMeRequestedHandler == nil {
		unregistered = append(unregistered, "me.GetUsersMeRequestedHandler")
	}

	if o.AccountPostAccountLoginHandler == nil {
		unregistered = append(unregistered, "account.PostAccountLoginHandler")
	}

	if o.AccountPostAccountPasswordHandler == nil {
		unregistered = append(unregistered, "account.PostAccountPasswordHandler")
	}

	if o.AccountPostAccountRecoverHandler == nil {
		unregistered = append(unregistered, "account.PostAccountRecoverHandler")
	}

	if o.AccountPostAccountRegisterHandler == nil {
		unregistered = append(unregistered, "account.PostAccountRegisterHandler")
	}

	if o.AccountPostAccountVerificationHandler == nil {
		unregistered = append(unregistered, "account.PostAccountVerificationHandler")
	}

	if o.EntriesPostEntriesAnonymousHandler == nil {
		unregistered = append(unregistered, "entries.PostEntriesAnonymousHandler")
	}

	if o.CommentsPostEntriesIDCommentsHandler == nil {
		unregistered = append(unregistered, "comments.PostEntriesIDCommentsHandler")
	}

	if o.EntriesPostEntriesUsersMeHandler == nil {
		unregistered = append(unregistered, "entries.PostEntriesUsersMeHandler")
	}

	if o.CommentsPutCommentsIDHandler == nil {
		unregistered = append(unregistered, "comments.PutCommentsIDHandler")
	}

	if o.VotesPutCommentsIDVoteHandler == nil {
		unregistered = append(unregistered, "votes.PutCommentsIDVoteHandler")
	}

	if o.DesignPutDesignHandler == nil {
		unregistered = append(unregistered, "design.PutDesignHandler")
	}

	if o.EntriesPutEntriesIDHandler == nil {
		unregistered = append(unregistered, "entries.PutEntriesIDHandler")
	}

	if o.FavoritesPutEntriesIDFavoriteHandler == nil {
		unregistered = append(unregistered, "favorites.PutEntriesIDFavoriteHandler")
	}

	if o.VotesPutEntriesIDVoteHandler == nil {
		unregistered = append(unregistered, "votes.PutEntriesIDVoteHandler")
	}

	if o.WatchingsPutEntriesIDWatchingHandler == nil {
		unregistered = append(unregistered, "watchings.PutEntriesIDWatchingHandler")
	}

	if o.RelationsPutRelationsFromIDHandler == nil {
		unregistered = append(unregistered, "relations.PutRelationsFromIDHandler")
	}

	if o.RelationsPutRelationsToIDHandler == nil {
		unregistered = append(unregistered, "relations.PutRelationsToIDHandler")
	}

	if o.MePutUsersMeHandler == nil {
		unregistered = append(unregistered, "me.PutUsersMeHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *YummyAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *YummyAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	result := make(map[string]runtime.Authenticator)
	for name, scheme := range schemes {
		switch name {

		case "ApiKeyHeader":

			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, func(token string) (interface{}, error) {
				return o.APIKeyHeaderAuth(token)
			})

		}
	}
	return result

}

// Authorizer returns the registered authorizer
func (o *YummyAPI) Authorizer() runtime.Authorizer {

	return o.APIAuthorizer

}

// ConsumersFor gets the consumers for the specified media types
func (o *YummyAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "application/x-www-form-urlencoded":
			result["application/x-www-form-urlencoded"] = o.UrlformConsumer

		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *YummyAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *YummyAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the yummy API
func (o *YummyAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *YummyAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/comments/{id}"] = comments.NewDeleteCommentsID(o.context, o.CommentsDeleteCommentsIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/comments/{id}/vote"] = votes.NewDeleteCommentsIDVote(o.context, o.VotesDeleteCommentsIDVoteHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/entries/{id}"] = entries.NewDeleteEntriesID(o.context, o.EntriesDeleteEntriesIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/entries/{id}/favorite"] = favorites.NewDeleteEntriesIDFavorite(o.context, o.FavoritesDeleteEntriesIDFavoriteHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/entries/{id}/vote"] = votes.NewDeleteEntriesIDVote(o.context, o.VotesDeleteEntriesIDVoteHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/entries/{id}/watching"] = watchings.NewDeleteEntriesIDWatching(o.context, o.WatchingsDeleteEntriesIDWatchingHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/relations/from/{id}"] = relations.NewDeleteRelationsFromID(o.context, o.RelationsDeleteRelationsFromIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/relations/to/{id}"] = relations.NewDeleteRelationsToID(o.context, o.RelationsDeleteRelationsToIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/account/email/{email}"] = account.NewGetAccountEmailEmail(o.context, o.AccountGetAccountEmailEmailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/account/invites"] = account.NewGetAccountInvites(o.context, o.AccountGetAccountInvitesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/account/name/{name}"] = account.NewGetAccountNameName(o.context, o.AccountGetAccountNameNameHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/account/verification/{email}"] = account.NewGetAccountVerificationEmail(o.context, o.AccountGetAccountVerificationEmailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/comments/{id}"] = comments.NewGetCommentsID(o.context, o.CommentsGetCommentsIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/comments/{id}/vote"] = votes.NewGetCommentsIDVote(o.context, o.VotesGetCommentsIDVoteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/design"] = design.NewGetDesign(o.context, o.DesignGetDesignHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/design/fonts"] = design.NewGetDesignFonts(o.context, o.DesignGetDesignFontsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/anonymous"] = entries.NewGetEntriesAnonymous(o.context, o.EntriesGetEntriesAnonymousHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/best"] = entries.NewGetEntriesBest(o.context, o.EntriesGetEntriesBestHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/friends"] = entries.NewGetEntriesFriends(o.context, o.EntriesGetEntriesFriendsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/{id}"] = entries.NewGetEntriesID(o.context, o.EntriesGetEntriesIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/{id}/comments"] = comments.NewGetEntriesIDComments(o.context, o.CommentsGetEntriesIDCommentsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/{id}/favorite"] = favorites.NewGetEntriesIDFavorite(o.context, o.FavoritesGetEntriesIDFavoriteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/{id}/vote"] = votes.NewGetEntriesIDVote(o.context, o.VotesGetEntriesIDVoteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/{id}/watching"] = watchings.NewGetEntriesIDWatching(o.context, o.WatchingsGetEntriesIDWatchingHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/live"] = entries.NewGetEntriesLive(o.context, o.EntriesGetEntriesLiveHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/users/byName/{name}"] = entries.NewGetEntriesUsersByNameName(o.context, o.EntriesGetEntriesUsersByNameNameHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/users/byName/{name}/favorites"] = entries.NewGetEntriesUsersByNameNameFavorites(o.context, o.EntriesGetEntriesUsersByNameNameFavoritesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/users/{id}"] = entries.NewGetEntriesUsersID(o.context, o.EntriesGetEntriesUsersIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/users/{id}/favorites"] = entries.NewGetEntriesUsersIDFavorites(o.context, o.EntriesGetEntriesUsersIDFavoritesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/users/me"] = entries.NewGetEntriesUsersMe(o.context, o.EntriesGetEntriesUsersMeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/users/me/favorites"] = entries.NewGetEntriesUsersMeFavorites(o.context, o.EntriesGetEntriesUsersMeFavoritesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/users/me/watching"] = entries.NewGetEntriesUsersMeWatching(o.context, o.EntriesGetEntriesUsersMeWatchingHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/relations/from/{id}"] = relations.NewGetRelationsFromID(o.context, o.RelationsGetRelationsFromIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/relations/to/{id}"] = relations.NewGetRelationsToID(o.context, o.RelationsGetRelationsToIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/byName/{name}"] = users.NewGetUsersByNameName(o.context, o.UsersGetUsersByNameNameHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/byName/{name}/followers"] = users.NewGetUsersByNameNameFollowers(o.context, o.UsersGetUsersByNameNameFollowersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/byName/{name}/followings"] = users.NewGetUsersByNameNameFollowings(o.context, o.UsersGetUsersByNameNameFollowingsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/byName/{name}/invited"] = users.NewGetUsersByNameNameInvited(o.context, o.UsersGetUsersByNameNameInvitedHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{id}"] = users.NewGetUsersID(o.context, o.UsersGetUsersIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{id}/followers"] = users.NewGetUsersIDFollowers(o.context, o.UsersGetUsersIDFollowersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{id}/followings"] = users.NewGetUsersIDFollowings(o.context, o.UsersGetUsersIDFollowingsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{id}/invited"] = users.NewGetUsersIDInvited(o.context, o.UsersGetUsersIDInvitedHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/me"] = me.NewGetUsersMe(o.context, o.MeGetUsersMeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/me/followers"] = me.NewGetUsersMeFollowers(o.context, o.MeGetUsersMeFollowersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/me/followings"] = me.NewGetUsersMeFollowings(o.context, o.MeGetUsersMeFollowingsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/me/ignored"] = me.NewGetUsersMeIgnored(o.context, o.MeGetUsersMeIgnoredHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/me/invited"] = me.NewGetUsersMeInvited(o.context, o.MeGetUsersMeInvitedHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/me/requested"] = me.NewGetUsersMeRequested(o.context, o.MeGetUsersMeRequestedHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/account/login"] = account.NewPostAccountLogin(o.context, o.AccountPostAccountLoginHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/account/password"] = account.NewPostAccountPassword(o.context, o.AccountPostAccountPasswordHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/account/recover"] = account.NewPostAccountRecover(o.context, o.AccountPostAccountRecoverHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/account/register"] = account.NewPostAccountRegister(o.context, o.AccountPostAccountRegisterHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/account/verification"] = account.NewPostAccountVerification(o.context, o.AccountPostAccountVerificationHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/entries/anonymous"] = entries.NewPostEntriesAnonymous(o.context, o.EntriesPostEntriesAnonymousHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/entries/{id}/comments"] = comments.NewPostEntriesIDComments(o.context, o.CommentsPostEntriesIDCommentsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/entries/users/me"] = entries.NewPostEntriesUsersMe(o.context, o.EntriesPostEntriesUsersMeHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/comments/{id}"] = comments.NewPutCommentsID(o.context, o.CommentsPutCommentsIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/comments/{id}/vote"] = votes.NewPutCommentsIDVote(o.context, o.VotesPutCommentsIDVoteHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/design"] = design.NewPutDesign(o.context, o.DesignPutDesignHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/entries/{id}"] = entries.NewPutEntriesID(o.context, o.EntriesPutEntriesIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/entries/{id}/favorite"] = favorites.NewPutEntriesIDFavorite(o.context, o.FavoritesPutEntriesIDFavoriteHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/entries/{id}/vote"] = votes.NewPutEntriesIDVote(o.context, o.VotesPutEntriesIDVoteHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/entries/{id}/watching"] = watchings.NewPutEntriesIDWatching(o.context, o.WatchingsPutEntriesIDWatchingHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/relations/from/{id}"] = relations.NewPutRelationsFromID(o.context, o.RelationsPutRelationsFromIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/relations/to/{id}"] = relations.NewPutRelationsToID(o.context, o.RelationsPutRelationsToIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/me"] = me.NewPutUsersMe(o.context, o.MePutUsersMeHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *YummyAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middelware as you see fit
func (o *YummyAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}
