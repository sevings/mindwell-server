// Code generated by go-swagger; DO NOT EDIT.

package watchings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PutEntriesIDWatchingHandlerFunc turns a function with the right signature into a put entries ID watching handler
type PutEntriesIDWatchingHandlerFunc func(PutEntriesIDWatchingParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutEntriesIDWatchingHandlerFunc) Handle(params PutEntriesIDWatchingParams) middleware.Responder {
	return fn(params)
}

// PutEntriesIDWatchingHandler interface for that can handle valid put entries ID watching params
type PutEntriesIDWatchingHandler interface {
	Handle(PutEntriesIDWatchingParams) middleware.Responder
}

// NewPutEntriesIDWatching creates a new http.Handler for the put entries ID watching operation
func NewPutEntriesIDWatching(ctx *middleware.Context, handler PutEntriesIDWatchingHandler) *PutEntriesIDWatching {
	return &PutEntriesIDWatching{Context: ctx, Handler: handler}
}

/*PutEntriesIDWatching swagger:route PUT /entries/{id}/watching watchings putEntriesIdWatching

PutEntriesIDWatching put entries ID watching API

*/
type PutEntriesIDWatching struct {
	Context *middleware.Context
	Handler PutEntriesIDWatchingHandler
}

func (o *PutEntriesIDWatching) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutEntriesIDWatchingParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
