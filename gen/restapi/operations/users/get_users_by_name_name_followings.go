// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetUsersByNameNameFollowingsHandlerFunc turns a function with the right signature into a get users by name name followings handler
type GetUsersByNameNameFollowingsHandlerFunc func(GetUsersByNameNameFollowingsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUsersByNameNameFollowingsHandlerFunc) Handle(params GetUsersByNameNameFollowingsParams) middleware.Responder {
	return fn(params)
}

// GetUsersByNameNameFollowingsHandler interface for that can handle valid get users by name name followings params
type GetUsersByNameNameFollowingsHandler interface {
	Handle(GetUsersByNameNameFollowingsParams) middleware.Responder
}

// NewGetUsersByNameNameFollowings creates a new http.Handler for the get users by name name followings operation
func NewGetUsersByNameNameFollowings(ctx *middleware.Context, handler GetUsersByNameNameFollowingsHandler) *GetUsersByNameNameFollowings {
	return &GetUsersByNameNameFollowings{Context: ctx, Handler: handler}
}

/*GetUsersByNameNameFollowings swagger:route GET /users/byName/{name}/followings users getUsersByNameNameFollowings

GetUsersByNameNameFollowings get users by name name followings API

*/
type GetUsersByNameNameFollowings struct {
	Context *middleware.Context
	Handler GetUsersByNameNameFollowingsHandler
}

func (o *GetUsersByNameNameFollowings) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetUsersByNameNameFollowingsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
