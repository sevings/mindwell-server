// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/sevings/yummy/gen/models"
)

// GetUsersByNameNameEntriesOKCode is the HTTP code returned for type GetUsersByNameNameEntriesOK
const GetUsersByNameNameEntriesOKCode int = 200

/*GetUsersByNameNameEntriesOK Entry list

swagger:response getUsersByNameNameEntriesOK
*/
type GetUsersByNameNameEntriesOK struct {

	/*
	  In: Body
	*/
	Payload *models.Feed `json:"body,omitempty"`
}

// NewGetUsersByNameNameEntriesOK creates GetUsersByNameNameEntriesOK with default headers values
func NewGetUsersByNameNameEntriesOK() *GetUsersByNameNameEntriesOK {
	return &GetUsersByNameNameEntriesOK{}
}

// WithPayload adds the payload to the get users by name name entries o k response
func (o *GetUsersByNameNameEntriesOK) WithPayload(payload *models.Feed) *GetUsersByNameNameEntriesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get users by name name entries o k response
func (o *GetUsersByNameNameEntriesOK) SetPayload(payload *models.Feed) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUsersByNameNameEntriesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUsersByNameNameEntriesForbiddenCode is the HTTP code returned for type GetUsersByNameNameEntriesForbidden
const GetUsersByNameNameEntriesForbiddenCode int = 403

/*GetUsersByNameNameEntriesForbidden access denied

swagger:response getUsersByNameNameEntriesForbidden
*/
type GetUsersByNameNameEntriesForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetUsersByNameNameEntriesForbidden creates GetUsersByNameNameEntriesForbidden with default headers values
func NewGetUsersByNameNameEntriesForbidden() *GetUsersByNameNameEntriesForbidden {
	return &GetUsersByNameNameEntriesForbidden{}
}

// WithPayload adds the payload to the get users by name name entries forbidden response
func (o *GetUsersByNameNameEntriesForbidden) WithPayload(payload *models.Error) *GetUsersByNameNameEntriesForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get users by name name entries forbidden response
func (o *GetUsersByNameNameEntriesForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUsersByNameNameEntriesForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUsersByNameNameEntriesNotFoundCode is the HTTP code returned for type GetUsersByNameNameEntriesNotFound
const GetUsersByNameNameEntriesNotFoundCode int = 404

/*GetUsersByNameNameEntriesNotFound User not found

swagger:response getUsersByNameNameEntriesNotFound
*/
type GetUsersByNameNameEntriesNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetUsersByNameNameEntriesNotFound creates GetUsersByNameNameEntriesNotFound with default headers values
func NewGetUsersByNameNameEntriesNotFound() *GetUsersByNameNameEntriesNotFound {
	return &GetUsersByNameNameEntriesNotFound{}
}

// WithPayload adds the payload to the get users by name name entries not found response
func (o *GetUsersByNameNameEntriesNotFound) WithPayload(payload *models.Error) *GetUsersByNameNameEntriesNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get users by name name entries not found response
func (o *GetUsersByNameNameEntriesNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUsersByNameNameEntriesNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
