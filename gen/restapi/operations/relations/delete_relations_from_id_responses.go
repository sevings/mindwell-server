// Code generated by go-swagger; DO NOT EDIT.

package relations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/sevings/yummy-server/gen/models"
)

// DeleteRelationsFromIDOKCode is the HTTP code returned for type DeleteRelationsFromIDOK
const DeleteRelationsFromIDOKCode int = 200

/*DeleteRelationsFromIDOK the user relationship with you

swagger:response deleteRelationsFromIdOK
*/
type DeleteRelationsFromIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.Relationship `json:"body,omitempty"`
}

// NewDeleteRelationsFromIDOK creates DeleteRelationsFromIDOK with default headers values
func NewDeleteRelationsFromIDOK() *DeleteRelationsFromIDOK {
	return &DeleteRelationsFromIDOK{}
}

// WithPayload adds the payload to the delete relations from Id o k response
func (o *DeleteRelationsFromIDOK) WithPayload(payload *models.Relationship) *DeleteRelationsFromIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete relations from Id o k response
func (o *DeleteRelationsFromIDOK) SetPayload(payload *models.Relationship) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRelationsFromIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteRelationsFromIDForbiddenCode is the HTTP code returned for type DeleteRelationsFromIDForbidden
const DeleteRelationsFromIDForbiddenCode int = 403

/*DeleteRelationsFromIDForbidden access denied

swagger:response deleteRelationsFromIdForbidden
*/
type DeleteRelationsFromIDForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteRelationsFromIDForbidden creates DeleteRelationsFromIDForbidden with default headers values
func NewDeleteRelationsFromIDForbidden() *DeleteRelationsFromIDForbidden {
	return &DeleteRelationsFromIDForbidden{}
}

// WithPayload adds the payload to the delete relations from Id forbidden response
func (o *DeleteRelationsFromIDForbidden) WithPayload(payload *models.Error) *DeleteRelationsFromIDForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete relations from Id forbidden response
func (o *DeleteRelationsFromIDForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRelationsFromIDForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteRelationsFromIDNotFoundCode is the HTTP code returned for type DeleteRelationsFromIDNotFound
const DeleteRelationsFromIDNotFoundCode int = 404

/*DeleteRelationsFromIDNotFound User not found

swagger:response deleteRelationsFromIdNotFound
*/
type DeleteRelationsFromIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteRelationsFromIDNotFound creates DeleteRelationsFromIDNotFound with default headers values
func NewDeleteRelationsFromIDNotFound() *DeleteRelationsFromIDNotFound {
	return &DeleteRelationsFromIDNotFound{}
}

// WithPayload adds the payload to the delete relations from Id not found response
func (o *DeleteRelationsFromIDNotFound) WithPayload(payload *models.Error) *DeleteRelationsFromIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete relations from Id not found response
func (o *DeleteRelationsFromIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRelationsFromIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
