// Code generated by go-swagger; DO NOT EDIT.

package comments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostEntriesIDCommentsHandlerFunc turns a function with the right signature into a post entries ID comments handler
type PostEntriesIDCommentsHandlerFunc func(PostEntriesIDCommentsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostEntriesIDCommentsHandlerFunc) Handle(params PostEntriesIDCommentsParams) middleware.Responder {
	return fn(params)
}

// PostEntriesIDCommentsHandler interface for that can handle valid post entries ID comments params
type PostEntriesIDCommentsHandler interface {
	Handle(PostEntriesIDCommentsParams) middleware.Responder
}

// NewPostEntriesIDComments creates a new http.Handler for the post entries ID comments operation
func NewPostEntriesIDComments(ctx *middleware.Context, handler PostEntriesIDCommentsHandler) *PostEntriesIDComments {
	return &PostEntriesIDComments{Context: ctx, Handler: handler}
}

/*PostEntriesIDComments swagger:route POST /entries/{id}/comments comments postEntriesIdComments

PostEntriesIDComments post entries ID comments API

*/
type PostEntriesIDComments struct {
	Context *middleware.Context
	Handler PostEntriesIDCommentsHandler
}

func (o *PostEntriesIDComments) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostEntriesIDCommentsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
