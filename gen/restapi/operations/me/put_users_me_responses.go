// Code generated by go-swagger; DO NOT EDIT.

package me

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/sevings/yummy-server/gen/models"
)

// PutUsersMeOKCode is the HTTP code returned for type PutUsersMeOK
const PutUsersMeOKCode int = 200

/*PutUsersMeOK your data

swagger:response putUsersMeOK
*/
type PutUsersMeOK struct {

	/*
	  In: Body
	*/
	Payload *models.Profile `json:"body,omitempty"`
}

// NewPutUsersMeOK creates PutUsersMeOK with default headers values
func NewPutUsersMeOK() *PutUsersMeOK {
	return &PutUsersMeOK{}
}

// WithPayload adds the payload to the put users me o k response
func (o *PutUsersMeOK) WithPayload(payload *models.Profile) *PutUsersMeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put users me o k response
func (o *PutUsersMeOK) SetPayload(payload *models.Profile) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutUsersMeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutUsersMeForbiddenCode is the HTTP code returned for type PutUsersMeForbidden
const PutUsersMeForbiddenCode int = 403

/*PutUsersMeForbidden access denied

swagger:response putUsersMeForbidden
*/
type PutUsersMeForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutUsersMeForbidden creates PutUsersMeForbidden with default headers values
func NewPutUsersMeForbidden() *PutUsersMeForbidden {
	return &PutUsersMeForbidden{}
}

// WithPayload adds the payload to the put users me forbidden response
func (o *PutUsersMeForbidden) WithPayload(payload *models.Error) *PutUsersMeForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put users me forbidden response
func (o *PutUsersMeForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutUsersMeForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
