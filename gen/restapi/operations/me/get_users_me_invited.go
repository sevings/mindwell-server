// Code generated by go-swagger; DO NOT EDIT.

package me

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetUsersMeInvitedHandlerFunc turns a function with the right signature into a get users me invited handler
type GetUsersMeInvitedHandlerFunc func(GetUsersMeInvitedParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUsersMeInvitedHandlerFunc) Handle(params GetUsersMeInvitedParams) middleware.Responder {
	return fn(params)
}

// GetUsersMeInvitedHandler interface for that can handle valid get users me invited params
type GetUsersMeInvitedHandler interface {
	Handle(GetUsersMeInvitedParams) middleware.Responder
}

// NewGetUsersMeInvited creates a new http.Handler for the get users me invited operation
func NewGetUsersMeInvited(ctx *middleware.Context, handler GetUsersMeInvitedHandler) *GetUsersMeInvited {
	return &GetUsersMeInvited{Context: ctx, Handler: handler}
}

/*GetUsersMeInvited swagger:route GET /users/me/invited me getUsersMeInvited

GetUsersMeInvited get users me invited API

*/
type GetUsersMeInvited struct {
	Context *middleware.Context
	Handler GetUsersMeInvitedHandler
}

func (o *GetUsersMeInvited) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetUsersMeInvitedParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
