// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

// SwaggerJSON embedded version of the swagger document used at generation time
var SwaggerJSON json.RawMessage

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Yummy",
    "version": "0.1.0"
  },
  "basePath": "/api/v1",
  "paths": {
    "/account/email/{email}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "check if email is used",
        "parameters": [
          {
            "type": "string",
            "name": "email",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "check result",
            "schema": {
              "type": "object",
              "required": [
                "email",
                "isFree"
              ],
              "properties": {
                "email": {
                  "type": "string"
                },
                "isFree": {
                  "type": "boolean"
                }
              },
              "example": {
                "email": "mail@example.com",
                "isFree": true
              }
            }
          }
        }
      }
    },
    "/account/invites": {
      "get": {
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userKeyReq"
          }
        ],
        "responses": {
          "200": {
            "description": "invite list",
            "schema": {
              "type": "object",
              "properties": {
                "invites": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/account/login": {
      "post": {
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "name": "name",
            "in": "formData",
            "required": true
          },
          {
            "minLength": 6,
            "type": "string",
            "name": "password",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AuthProfile"
            }
          },
          "400": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/account/name/{name}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "check if name is used",
        "parameters": [
          {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "check result",
            "schema": {
              "type": "object",
              "required": [
                "name",
                "isFree"
              ],
              "properties": {
                "isFree": {
                  "type": "boolean"
                },
                "name": {
                  "type": "string"
                }
              },
              "example": {
                "isFree": false,
                "name": "example"
              }
            }
          }
        }
      }
    },
    "/account/password": {
      "post": {
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "account"
        ],
        "summary": "set new password",
        "parameters": [
          {
            "$ref": "#/parameters/userKeyReq"
          },
          {
            "minLength": 6,
            "type": "string",
            "name": "old_password",
            "in": "formData",
            "required": true
          },
          {
            "minLength": 6,
            "type": "string",
            "name": "new_password",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "password has been set"
          },
          "403": {
            "description": "access denied or old password",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/account/register": {
      "post": {
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "account"
        ],
        "summary": "register new account",
        "parameters": [
          {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "name": "name",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "name": "email",
            "in": "formData",
            "required": true
          },
          {
            "minLength": 6,
            "type": "string",
            "name": "password",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "name": "invite",
            "in": "formData",
            "required": true
          },
          {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "name": "referrer",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "format": "full-date",
            "name": "birthday",
            "in": "formData"
          },
          {
            "enum": [
              "not set",
              "male",
              "female"
            ],
            "type": "string",
            "default": "not set",
            "name": "gender",
            "in": "formData"
          },
          {
            "type": "string",
            "default": "",
            "name": "country",
            "in": "formData"
          },
          {
            "type": "string",
            "default": "",
            "name": "city",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AuthProfile"
            }
          },
          "400": {
            "description": "email or name already exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/account/verification": {
      "post": {
        "tags": [
          "account"
        ],
        "summary": "request verification email",
        "parameters": [
          {
            "$ref": "#/parameters/userKeyReq"
          }
        ],
        "responses": {
          "200": {
            "description": "email has been sent"
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/account/verification/{email}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "verify account email",
        "parameters": [
          {
            "type": "string",
            "name": "email",
            "in": "path",
            "required": true
          },
          {
            "maxLength": 20,
            "minLength": 20,
            "type": "string",
            "name": "code",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "verified"
          },
          "400": {
            "description": "code or email is not valid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/comments/{id}": {
      "get": {
        "tags": [
          "comments"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userKey"
          }
        ],
        "responses": {
          "200": {
            "description": "Comment data",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Comment not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "comments"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userKeyReq"
          },
          {
            "minLength": 1,
            "type": "string",
            "name": "content",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Comment data",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Comment not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "comments"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userKeyReq"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Comment not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathId"
        }
      ]
    },
    "/comments/{id}/vote": {
      "$ref": "#/paths/~1entries~1%7Bid%7D~1vote"
    },
    "/design": {
      "get": {
        "tags": [
          "design"
        ],
        "responses": {
          "200": {
            "description": "Design of your tlog",
            "schema": {
              "$ref": "#/definitions/Design"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "design"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "css",
            "in": "formData"
          },
          {
            "pattern": "#[0-9a-d]{6}",
            "type": "string",
            "name": "backgroundColor",
            "in": "formData"
          },
          {
            "pattern": "#[0-9a-d]{6}",
            "type": "string",
            "name": "textColor",
            "in": "formData"
          },
          {
            "type": "string",
            "name": "fontFamily",
            "in": "formData"
          },
          {
            "type": "integer",
            "name": "fontSize",
            "in": "formData"
          },
          {
            "enum": [
              "left",
              "right",
              "center",
              "justify"
            ],
            "type": "string",
            "name": "textAlignment",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "Design of your tlog",
            "schema": {
              "$ref": "#/definitions/Design"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/userKeyReq"
        }
      ]
    },
    "/design/fonts": {
      "get": {
        "tags": [
          "design"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userKey"
          }
        ],
        "responses": {
          "200": {
            "description": "List of available font families",
            "schema": {
              "type": "object",
              "properties": {
                "fonts": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/entries/anonymous": {
      "get": {
        "tags": [
          "entries"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userKey"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/skip"
          },
          {
            "$ref": "#/parameters/tag"
          },
          {
            "$ref": "#/parameters/longerThan"
          },
          {
            "$ref": "#/parameters/shorterThan"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry list",
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "entries"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "title",
            "in": "formData"
          },
          {
            "type": "string",
            "name": "content",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry data",
            "schema": {
              "$ref": "#/definitions/Entry"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/entries/best": {
      "get": {
        "tags": [
          "entries"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userKey"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/skip"
          },
          {
            "$ref": "#/parameters/tag"
          },
          {
            "$ref": "#/parameters/longerThan"
          },
          {
            "$ref": "#/parameters/shorterThan"
          },
          {
            "type": "integer",
            "name": "min_rating",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry list",
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          }
        }
      }
    },
    "/entries/friends": {
      "get": {
        "tags": [
          "entries"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userKeyReq"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/skip"
          },
          {
            "$ref": "#/parameters/tag"
          },
          {
            "$ref": "#/parameters/longerThan"
          },
          {
            "$ref": "#/parameters/shorterThan"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry list",
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          }
        }
      }
    },
    "/entries/live": {
      "get": {
        "tags": [
          "entries"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userKey"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/skip"
          },
          {
            "$ref": "#/parameters/tag"
          },
          {
            "$ref": "#/parameters/longerThan"
          },
          {
            "$ref": "#/parameters/shorterThan"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry list",
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          }
        }
      }
    },
    "/entries/{id}": {
      "get": {
        "tags": [
          "entries"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userKey"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry data",
            "schema": {
              "$ref": "#/definitions/Entry"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "entries"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userKeyReq"
          },
          {
            "type": "string",
            "name": "title",
            "in": "formData"
          },
          {
            "type": "string",
            "name": "content",
            "in": "formData"
          },
          {
            "enum": [
              "all",
              "followers",
              "some",
              "me",
              "anonymous"
            ],
            "type": "string",
            "name": "privacy",
            "in": "formData"
          },
          {
            "type": "array",
            "items": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            },
            "name": "visibleFor",
            "in": "formData"
          },
          {
            "type": "boolean",
            "name": "isVotable",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry data",
            "schema": {
              "$ref": "#/definitions/Entry"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "entries"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userKeyReq"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathId"
        }
      ]
    },
    "/entries/{id}/comments": {
      "get": {
        "tags": [
          "comments"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userKey"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/skip"
          }
        ],
        "responses": {
          "200": {
            "description": "comments list",
            "schema": {
              "$ref": "#/definitions/CommentList"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "comments"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userKeyReq"
          },
          {
            "minLength": 1,
            "type": "string",
            "name": "content",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Comment data",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathId"
        }
      ]
    },
    "/entries/{id}/favorite": {
      "get": {
        "tags": [
          "favorites"
        ],
        "responses": {
          "200": {
            "description": "favorite status",
            "schema": {
              "$ref": "#/definitions/FavoriteStatus"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "favorites"
        ],
        "responses": {
          "200": {
            "description": "favorite status",
            "schema": {
              "$ref": "#/definitions/FavoriteStatus"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "favorites"
        ],
        "responses": {
          "200": {
            "description": "favorite status",
            "schema": {
              "$ref": "#/definitions/FavoriteStatus"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/userKeyReq"
        },
        {
          "$ref": "#/parameters/pathId"
        }
      ]
    },
    "/entries/{id}/vote": {
      "get": {
        "tags": [
          "votes"
        ],
        "responses": {
          "200": {
            "description": "vote status",
            "schema": {
              "$ref": "#/definitions/VoteStatus"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "votes"
        ],
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "name": "positive",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "vote status",
            "schema": {
              "$ref": "#/definitions/VoteStatus"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "votes"
        ],
        "responses": {
          "200": {
            "description": "vote status",
            "schema": {
              "$ref": "#/definitions/VoteStatus"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/userKeyReq"
        },
        {
          "$ref": "#/parameters/pathId"
        }
      ]
    },
    "/entries/{id}/watching": {
      "get": {
        "tags": [
          "watchings"
        ],
        "responses": {
          "200": {
            "description": "watching status",
            "schema": {
              "$ref": "#/definitions/WatchingStatus"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "watchings"
        ],
        "responses": {
          "200": {
            "description": "watching status",
            "schema": {
              "$ref": "#/definitions/WatchingStatus"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "watchings"
        ],
        "responses": {
          "200": {
            "description": "watching status",
            "schema": {
              "$ref": "#/definitions/WatchingStatus"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/userKeyReq"
        },
        {
          "$ref": "#/parameters/pathId"
        }
      ]
    },
    "/relations/from/{id}": {
      "get": {
        "tags": [
          "relations"
        ],
        "responses": {
          "200": {
            "description": "the user relationship with you",
            "schema": {
              "$ref": "#/definitions/Relationship"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "relations"
        ],
        "summary": "permit the user to follow you",
        "responses": {
          "200": {
            "description": "the rser relationship with you",
            "schema": {
              "$ref": "#/definitions/Relationship"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "relations"
        ],
        "summary": "cancel following request or unsubscribe the user",
        "responses": {
          "200": {
            "description": "the user relationship with you",
            "schema": {
              "$ref": "#/definitions/Relationship"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/userKeyReq"
        },
        {
          "minimum": 1,
          "type": "integer",
          "format": "int64",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/relations/to/{id}": {
      "get": {
        "tags": [
          "relations"
        ],
        "responses": {
          "200": {
            "description": "your relationship with the user",
            "schema": {
              "$ref": "#/definitions/Relationship"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "relations"
        ],
        "parameters": [
          {
            "enum": [
              "followed",
              "ignored"
            ],
            "type": "string",
            "name": "r",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "your relationship with the user",
            "schema": {
              "$ref": "#/definitions/Relationship"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "relations"
        ],
        "responses": {
          "200": {
            "description": "your relationship with the user",
            "schema": {
              "$ref": "#/definitions/Relationship"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/userKeyReq"
        },
        {
          "$ref": "#/parameters/pathId"
        }
      ]
    },
    "/users/byName/{name}": {
      "get": {
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userKey"
          }
        ],
        "responses": {
          "200": {
            "description": "User data",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathName"
        }
      ]
    },
    "/users/byName/{name}/entries": {
      "get": {
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userKey"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/skip"
          },
          {
            "$ref": "#/parameters/tag"
          },
          {
            "$ref": "#/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry list",
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathName"
        }
      ]
    },
    "/users/byName/{name}/favorites": {
      "get": {
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userKey"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/skip"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry list",
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathName"
        }
      ]
    },
    "/users/byName/{name}/followers": {
      "get": {
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userKey"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/skip"
          }
        ],
        "responses": {
          "200": {
            "description": "User list",
            "schema": {
              "$ref": "#/definitions/UserList"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathName"
        }
      ]
    },
    "/users/byName/{name}/followings": {
      "$ref": "#/paths/~1users~1byName~1%7Bname%7D~1followers"
    },
    "/users/byName/{name}/invited": {
      "$ref": "#/paths/~1users~1byName~1%7Bname%7D~1followers"
    },
    "/users/me": {
      "get": {
        "tags": [
          "me"
        ],
        "responses": {
          "200": {
            "description": "your data",
            "schema": {
              "$ref": "#/definitions/AuthProfile"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "name": "showName",
            "in": "formData"
          },
          {
            "enum": [
              "male",
              "female",
              "not set"
            ],
            "type": "string",
            "name": "gender",
            "in": "formData"
          },
          {
            "pattern": "#[0-9a-d]{6}",
            "type": "string",
            "name": "nameColor",
            "in": "formData"
          },
          {
            "pattern": "#[0-9a-d]{6}",
            "type": "string",
            "name": "avatarColor",
            "in": "formData"
          },
          {
            "type": "file",
            "name": "avatar",
            "in": "formData"
          },
          {
            "type": "boolean",
            "name": "isDaylog",
            "in": "formData"
          },
          {
            "enum": [
              "all",
              "registered",
              "followers"
            ],
            "type": "string",
            "name": "privacy",
            "in": "formData"
          },
          {
            "maxLength": 260,
            "type": "string",
            "name": "title",
            "in": "formData"
          },
          {
            "type": "string",
            "format": "full-date",
            "name": "birthday",
            "in": "formData"
          },
          {
            "maxLength": 50,
            "type": "string",
            "name": "country",
            "in": "formData"
          },
          {
            "maxLength": 50,
            "type": "string",
            "name": "city",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "your data",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/userKeyReq"
        }
      ]
    },
    "/users/me/cancelled": {
      "$ref": "#/paths/~1users~1me~1followers"
    },
    "/users/me/entries": {
      "get": {
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/skip"
          },
          {
            "$ref": "#/parameters/tag"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry list",
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "maxLength": 500,
            "type": "string",
            "default": "",
            "name": "title",
            "in": "formData"
          },
          {
            "maxLength": 30000,
            "type": "string",
            "name": "content",
            "in": "formData",
            "required": true
          },
          {
            "enum": [
              "all",
              "followers",
              "some",
              "me"
            ],
            "type": "string",
            "default": "all",
            "name": "privacy",
            "in": "formData"
          },
          {
            "type": "array",
            "items": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            },
            "name": "visibleFor",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": true,
            "name": "isVotable",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry data",
            "schema": {
              "$ref": "#/definitions/Entry"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/userKeyReq"
        }
      ]
    },
    "/users/me/favorites": {
      "get": {
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/skip"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry list",
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/userKeyReq"
        }
      ]
    },
    "/users/me/followers": {
      "get": {
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/skip"
          }
        ],
        "responses": {
          "200": {
            "description": "User list",
            "schema": {
              "$ref": "#/definitions/UserList"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/userKeyReq"
        }
      ]
    },
    "/users/me/followings": {
      "$ref": "#/paths/~1users~1me~1followers"
    },
    "/users/me/ignored": {
      "$ref": "#/paths/~1users~1me~1followers"
    },
    "/users/me/invited": {
      "$ref": "#/paths/~1users~1me~1followers"
    },
    "/users/me/requested": {
      "$ref": "#/paths/~1users~1me~1followers"
    },
    "/users/me/watching": {
      "$ref": "#/paths/~1users~1me~1favorites"
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userKey"
          }
        ],
        "responses": {
          "200": {
            "description": "User data",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathId"
        }
      ]
    },
    "/users/{id}/entries": {
      "get": {
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userKey"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/skip"
          },
          {
            "$ref": "#/parameters/tag"
          },
          {
            "$ref": "#/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry list",
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathId"
        }
      ]
    },
    "/users/{id}/favorites": {
      "get": {
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userKey"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/skip"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry list",
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathId"
        }
      ]
    },
    "/users/{id}/followers": {
      "get": {
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userKey"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/skip"
          }
        ],
        "responses": {
          "200": {
            "description": "User list",
            "schema": {
              "$ref": "#/definitions/UserList"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathId"
        }
      ]
    },
    "/users/{id}/followings": {
      "get": {
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userKey"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/skip"
          }
        ],
        "responses": {
          "200": {
            "description": "User list",
            "schema": {
              "$ref": "#/definitions/UserList"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathId"
        }
      ]
    },
    "/users/{id}/invited": {
      "$ref": "#/paths/~1users~1%7Bid%7D~1followers"
    }
  },
  "definitions": {
    "AuthProfile": {
      "allOf": [
        {
          "$ref": "#/definitions/Profile"
        },
        {
          "type": "object",
          "properties": {
            "account": {
              "type": "object",
              "properties": {
                "apiKey": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "validThru": {
                  "type": "string",
                  "format": "date-time"
                },
                "verified": {
                  "type": "boolean"
                }
              }
            },
            "birthday": {
              "type": "string",
              "format": "full-date"
            }
          },
          "example": {
            "account": {
              "apiKey": "blah-blah-blah",
              "email": "mail@example.com",
              "validThru": "1985-04-12T23:20:50.52Z",
              "verified": true
            }
          }
        }
      ]
    },
    "Color": {
      "description": "color in rgb",
      "type": "string",
      "pattern": "#[0-9a-d]{6}",
      "example": "#373737"
    },
    "Comment": {
      "type": "object",
      "properties": {
        "author": {
          "$ref": "#/definitions/User"
        },
        "content": {
          "type": "string",
          "minLength": 1
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "entryId": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "rating": {
          "type": "integer"
        },
        "vote": {
          "type": "string",
          "enum": [
            "not",
            "pos",
            "neg"
          ]
        }
      },
      "example": {
        "content": "\u003cp\u003esome text with \u003cb\u003ehtml\u003c/b\u003e tags\u003c/p\u003e",
        "createdAt": "1985-04-12T23:20:50.52Z",
        "entryId": 152,
        "id": 999
      }
    },
    "CommentList": {
      "type": "object",
      "properties": {
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Comment"
          }
        }
      }
    },
    "Design": {
      "type": "object",
      "properties": {
        "backgroundColor": {
          "$ref": "#/definitions/Color"
        },
        "css": {
          "type": "string"
        },
        "fontFamily": {
          "type": "string"
        },
        "fontSize": {
          "type": "integer"
        },
        "textAlignment": {
          "type": "string",
          "enum": [
            "left",
            "right",
            "center",
            "justify"
          ]
        },
        "textColor": {
          "$ref": "#/definitions/Color"
        }
      }
    },
    "Entry": {
      "type": "object",
      "properties": {
        "author": {
          "$ref": "#/definitions/User"
        },
        "commentCount": {
          "type": "integer"
        },
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Comment"
          }
        },
        "content": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "isFavorited": {
          "type": "boolean"
        },
        "isVotable": {
          "type": "boolean"
        },
        "isWatching": {
          "type": "boolean"
        },
        "privacy": {
          "type": "string",
          "enum": [
            "all",
            "some",
            "me",
            "anonymous"
          ]
        },
        "rating": {
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "visibleFor": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "vote": {
          "type": "string",
          "enum": [
            "not",
            "pos",
            "neg"
          ]
        },
        "wordCount": {
          "type": "integer"
        }
      },
      "example": {
        "commentsCount": 0,
        "content": "\u003cp\u003esome text with \u003cb\u003ehtml\u003c/b\u003e tags\u003c/p\u003e",
        "createdAt": "1985-04-12T23:20:50.52Z",
        "id": 152,
        "isVotable": true,
        "privacy": "all",
        "rating": -3,
        "title": "example title",
        "wordCount": 5
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "example": {
        "message": "Access denied"
      }
    },
    "FavoriteStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "isFavorited": {
          "type": "boolean"
        }
      }
    },
    "Feed": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Entry"
          }
        }
      }
    },
    "Profile": {
      "allOf": [
        {
          "$ref": "#/definitions/User"
        },
        {
          "type": "object",
          "properties": {
            "ageLowerBound": {
              "type": "integer"
            },
            "ageUpperBound": {
              "type": "integer"
            },
            "city": {
              "type": "string",
              "maxLength": 50
            },
            "country": {
              "type": "string",
              "maxLength": 50
            },
            "counts": {
              "type": "object",
              "properties": {
                "comments": {
                  "type": "integer"
                },
                "entries": {
                  "type": "integer"
                },
                "favorites": {
                  "type": "integer"
                },
                "followers": {
                  "type": "integer"
                },
                "followings": {
                  "type": "integer"
                },
                "ignored": {
                  "type": "integer"
                },
                "invited": {
                  "type": "integer"
                },
                "tags": {
                  "type": "integer"
                }
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "design": {
              "$ref": "#/definitions/Design"
            },
            "gender": {
              "type": "string",
              "enum": [
                "male",
                "female",
                "not set"
              ]
            },
            "invitedBy": {
              "$ref": "#/definitions/User"
            },
            "isDaylog": {
              "type": "boolean"
            },
            "karma": {
              "type": "number",
              "format": "float"
            },
            "lastSeenAt": {
              "type": "string",
              "format": "date-time"
            },
            "privacy": {
              "type": "string",
              "enum": [
                "all",
                "registered",
                "followers"
              ]
            },
            "relations": {
              "type": "object",
              "properties": {
                "fromMe": {
                  "type": "string",
                  "enum": [
                    "followed",
                    "requested",
                    "cancelled",
                    "ignored",
                    "none"
                  ]
                },
                "toMe": {
                  "type": "string",
                  "enum": [
                    "followed",
                    "requested",
                    "cancelled",
                    "ignored",
                    "none"
                  ]
                }
              }
            },
            "title": {
              "type": "string",
              "maxLength": 260
            }
          },
          "example": {
            "city": "Казань",
            "country": "Россия",
            "counts": {
              "comments": 22,
              "entries": 13,
              "favorites": 1,
              "followers": 15,
              "followings": 4,
              "ignored": 0,
              "invited": 0,
              "tags": 0
            },
            "createdAt": "1985-04-12T23:20:50.52Z",
            "gender": "male",
            "isDaylog": false,
            "karma": 100,
            "lastSeenAt": "1985-04-12T23:20:50.52Z",
            "privacy": "registered",
            "relations": {
              "fromMe": "followed",
              "toMe": "none"
            },
            "title": "some tlog title"
          }
        }
      ]
    },
    "Relationship": {
      "type": "object",
      "properties": {
        "from": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "relation": {
          "type": "string",
          "enum": [
            "followed",
            "requested",
            "cancelled",
            "ignored",
            "none"
          ]
        },
        "to": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "avatar": {
          "type": "string"
        },
        "avatarColor": {
          "$ref": "#/definitions/Color"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "isOnline": {
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "maxLength": 20,
          "minLength": 1
        },
        "nameColor": {
          "$ref": "#/definitions/Color"
        },
        "showName": {
          "type": "string",
          "maxLength": 20,
          "minLength": 1
        }
      },
      "example": {
        "avatarColor": "#ababab",
        "id": 1,
        "isOnline": false,
        "name": "binque",
        "nameColor": "#373737",
        "showName": "Бинк"
      }
    },
    "UserList": {
      "type": "object",
      "required": [
        "users"
      ],
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        }
      }
    },
    "VoteStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "rating": {
          "type": "integer"
        },
        "vote": {
          "type": "string",
          "enum": [
            "not",
            "pos",
            "neg"
          ]
        }
      }
    },
    "WatchingStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "isWatching": {
          "type": "boolean"
        }
      }
    }
  },
  "parameters": {
    "limit": {
      "maximum": 100,
      "minimum": 1,
      "type": "integer",
      "default": 50,
      "name": "limit",
      "in": "query"
    },
    "longerThan": {
      "type": "integer",
      "name": "longer_than",
      "in": "query"
    },
    "pathId": {
      "minimum": 1,
      "type": "integer",
      "format": "int64",
      "name": "id",
      "in": "path",
      "required": true
    },
    "pathName": {
      "maxLength": 20,
      "minLength": 1,
      "type": "string",
      "name": "name",
      "in": "path",
      "required": true
    },
    "shorterThan": {
      "type": "integer",
      "name": "shorter_than",
      "in": "query"
    },
    "skip": {
      "type": "integer",
      "default": 0,
      "name": "skip",
      "in": "query"
    },
    "sort": {
      "enum": [
        "new",
        "old",
        "best"
      ],
      "type": "string",
      "default": "new",
      "name": "sort",
      "in": "query"
    },
    "tag": {
      "maxLength": 50,
      "type": "string",
      "name": "tag",
      "in": "query"
    },
    "userKey": {
      "maxLength": 32,
      "minLength": 32,
      "type": "string",
      "name": "X-User-Key",
      "in": "header"
    },
    "userKeyReq": {
      "maxLength": 32,
      "minLength": 32,
      "type": "string",
      "name": "X-User-Key",
      "in": "header",
      "required": true
    }
  }
}`))
}
