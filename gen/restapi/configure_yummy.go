// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"crypto/tls"
	"log"
	"net/http"
	"strings"
	"time"

	accountImpl "github.com/sevings/yummy-server/src/account"
	usersImpl "github.com/sevings/yummy-server/src/users"

	"github.com/didip/tollbooth"
	errors "github.com/go-openapi/errors"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	graceful "github.com/tylerb/graceful"

	"github.com/sevings/yummy-server/gen/restapi/operations"
	"github.com/sevings/yummy-server/gen/restapi/operations/account"
	"github.com/sevings/yummy-server/gen/restapi/operations/comments"
	"github.com/sevings/yummy-server/gen/restapi/operations/entries"
	"github.com/sevings/yummy-server/gen/restapi/operations/favorites"
	"github.com/sevings/yummy-server/gen/restapi/operations/me"
	"github.com/sevings/yummy-server/gen/restapi/operations/relations"
	"github.com/sevings/yummy-server/gen/restapi/operations/users"
	"github.com/sevings/yummy-server/gen/restapi/operations/votes"
	"github.com/sevings/yummy-server/gen/restapi/operations/watchings"

	"github.com/sevings/yummy-server/gen/models"

	goconf "github.com/zpatrick/go-config"

	"database/sql"

	_ "github.com/lib/pq"
)

// This file is safe to edit. Once it exists it will not be overwritten

//go:generate swagger generate server --target ../gen --name  --spec ../swagger-ui/swagger.yaml

func configureFlags(api *operations.YummyAPI) {
	// api.CommandLineOptionsGroups = []swag.CommandLineOptionsGroup{ ... }
}

func loadConfig() *goconf.Config {
	toml := goconf.NewTOMLFile("config.toml")
	loader := goconf.NewOnceLoader(toml)
	config := goconf.NewConfig([]goconf.Provider{loader})
	if err := config.Load(); err != nil {
		log.Fatal(err)
	}
	return config
}

func openDatabase(config *goconf.Config) *sql.DB {
	driver, err := config.StringOr("database.driver", "postgres")
	if err != nil {
		log.Print(err)
	}

	user, err := config.String("database.user")
	if err != nil {
		log.Print(err)
	}

	pass, err := config.String("database.password")
	if err != nil {
		log.Print(err)
	}

	name, err := config.String("database.name")
	if err != nil {
		log.Print(err)
	}

	db, err := sql.Open(driver, "user="+user+" password="+pass+" dbname="+name)
	if err != nil {
		log.Fatal(err)
	}

	schema, err := config.String("database.schema")
	if err != nil {
		log.Fatal(err)
	}

	_, err = db.Exec("SET search_path = " + schema + ", public")
	if err != nil {
		log.Fatal(err)
	}

	return db
}

func configureAPI(api *operations.YummyAPI) http.Handler {
	config := loadConfig()
	db := openDatabase(config)

	accountImpl.ConfigureAPI(db, api)
	usersImpl.ConfigureAPI(db, api)

	// configure the api here
	api.ServeError = errors.ServeError

	// Set your custom logger if needed. Default one is log.Printf
	// Expected interface func(string, ...interface{})
	//
	// Example:
	// api.Logger = log.Printf

	api.JSONConsumer = runtime.JSONConsumer()

	api.UrlformConsumer = runtime.DiscardConsumer

	api.MultipartformConsumer = runtime.DiscardConsumer

	api.JSONProducer = runtime.JSONProducer()

	api.CommentsDeleteCommentsIDHandler = comments.DeleteCommentsIDHandlerFunc(func(params comments.DeleteCommentsIDParams) middleware.Responder {
		return middleware.NotImplemented("operation comments.DeleteCommentsID has not yet been implemented")
	})
	api.EntriesDeleteEntriesIDHandler = entries.DeleteEntriesIDHandlerFunc(func(params entries.DeleteEntriesIDParams) middleware.Responder {
		return middleware.NotImplemented("operation entries.DeleteEntriesID has not yet been implemented")
	})
	api.FavoritesDeleteEntriesIDFavoriteHandler = favorites.DeleteEntriesIDFavoriteHandlerFunc(func(params favorites.DeleteEntriesIDFavoriteParams) middleware.Responder {
		return middleware.NotImplemented("operation favorites.DeleteEntriesIDFavorite has not yet been implemented")
	})
	api.VotesDeleteEntriesIDVoteHandler = votes.DeleteEntriesIDVoteHandlerFunc(func(params votes.DeleteEntriesIDVoteParams) middleware.Responder {
		return middleware.NotImplemented("operation votes.DeleteEntriesIDVote has not yet been implemented")
	})
	api.WatchingsDeleteEntriesIDWatchingHandler = watchings.DeleteEntriesIDWatchingHandlerFunc(func(params watchings.DeleteEntriesIDWatchingParams) middleware.Responder {
		return middleware.NotImplemented("operation watchings.DeleteEntriesIDWatching has not yet been implemented")
	})
	api.RelationsDeleteRelationsFromIDHandler = relations.DeleteRelationsFromIDHandlerFunc(func(params relations.DeleteRelationsFromIDParams) middleware.Responder {
		return middleware.NotImplemented("operation relations.DeleteRelationsFromID has not yet been implemented")
	})
	api.RelationsDeleteRelationsToIDHandler = relations.DeleteRelationsToIDHandlerFunc(func(params relations.DeleteRelationsToIDParams) middleware.Responder {
		return middleware.NotImplemented("operation relations.DeleteRelationsToID has not yet been implemented")
	})

	api.CommentsGetCommentsIDHandler = comments.GetCommentsIDHandlerFunc(func(params comments.GetCommentsIDParams) middleware.Responder {
		return middleware.NotImplemented("operation comments.GetCommentsID has not yet been implemented")
	})
	api.EntriesGetEntriesAnonymousHandler = entries.GetEntriesAnonymousHandlerFunc(func(params entries.GetEntriesAnonymousParams) middleware.Responder {
		return middleware.NotImplemented("operation entries.GetEntriesAnonymous has not yet been implemented")
	})
	api.EntriesGetEntriesBestHandler = entries.GetEntriesBestHandlerFunc(func(params entries.GetEntriesBestParams) middleware.Responder {
		return middleware.NotImplemented("operation entries.GetEntriesBest has not yet been implemented")
	})
	api.EntriesGetEntriesFriendsHandler = entries.GetEntriesFriendsHandlerFunc(func(params entries.GetEntriesFriendsParams) middleware.Responder {
		return middleware.NotImplemented("operation entries.GetEntriesFriends has not yet been implemented")
	})
	api.EntriesGetEntriesIDHandler = entries.GetEntriesIDHandlerFunc(func(params entries.GetEntriesIDParams) middleware.Responder {
		return middleware.NotImplemented("operation entries.GetEntriesID has not yet been implemented")
	})
	api.CommentsGetEntriesIDCommentsHandler = comments.GetEntriesIDCommentsHandlerFunc(func(params comments.GetEntriesIDCommentsParams) middleware.Responder {
		return middleware.NotImplemented("operation comments.GetEntriesIDComments has not yet been implemented")
	})
	api.FavoritesGetEntriesIDFavoriteHandler = favorites.GetEntriesIDFavoriteHandlerFunc(func(params favorites.GetEntriesIDFavoriteParams) middleware.Responder {
		return middleware.NotImplemented("operation favorites.GetEntriesIDFavorite has not yet been implemented")
	})
	api.VotesGetEntriesIDVoteHandler = votes.GetEntriesIDVoteHandlerFunc(func(params votes.GetEntriesIDVoteParams) middleware.Responder {
		return middleware.NotImplemented("operation votes.GetEntriesIDVote has not yet been implemented")
	})
	api.WatchingsGetEntriesIDWatchingHandler = watchings.GetEntriesIDWatchingHandlerFunc(func(params watchings.GetEntriesIDWatchingParams) middleware.Responder {
		return middleware.NotImplemented("operation watchings.GetEntriesIDWatching has not yet been implemented")
	})
	api.EntriesGetEntriesLiveHandler = entries.GetEntriesLiveHandlerFunc(func(params entries.GetEntriesLiveParams) middleware.Responder {
		return middleware.NotImplemented("operation entries.GetEntriesLive has not yet been implemented")
	})
	api.RelationsGetRelationsFromIDHandler = relations.GetRelationsFromIDHandlerFunc(func(params relations.GetRelationsFromIDParams) middleware.Responder {
		return middleware.NotImplemented("operation relations.GetRelationsFromID has not yet been implemented")
	})
	api.RelationsGetRelationsToIDHandler = relations.GetRelationsToIDHandlerFunc(func(params relations.GetRelationsToIDParams) middleware.Responder {
		return middleware.NotImplemented("operation relations.GetRelationsToID has not yet been implemented")
	})

	api.UsersGetUsersByNameNameEntriesHandler = users.GetUsersByNameNameEntriesHandlerFunc(func(params users.GetUsersByNameNameEntriesParams) middleware.Responder {
		return middleware.NotImplemented("operation users.GetUsersByNameNameEntries has not yet been implemented")
	})
	api.UsersGetUsersByNameNameFavoritesHandler = users.GetUsersByNameNameFavoritesHandlerFunc(func(params users.GetUsersByNameNameFavoritesParams) middleware.Responder {
		return middleware.NotImplemented("operation users.GetUsersByNameNameFavorites has not yet been implemented")
	})

	api.UsersGetUsersIDEntriesHandler = users.GetUsersIDEntriesHandlerFunc(func(params users.GetUsersIDEntriesParams) middleware.Responder {
		return middleware.NotImplemented("operation users.GetUsersIDEntries has not yet been implemented")
	})
	api.UsersGetUsersIDFavoritesHandler = users.GetUsersIDFavoritesHandlerFunc(func(params users.GetUsersIDFavoritesParams) middleware.Responder {
		return middleware.NotImplemented("operation users.GetUsersIDFavorites has not yet been implemented")
	})

	api.MeGetUsersMeEntriesHandler = me.GetUsersMeEntriesHandlerFunc(func(params me.GetUsersMeEntriesParams) middleware.Responder {
		return middleware.NotImplemented("operation me.GetUsersMeEntries has not yet been implemented")
	})
	api.MeGetUsersMeFavoritesHandler = me.GetUsersMeFavoritesHandlerFunc(func(params me.GetUsersMeFavoritesParams) middleware.Responder {
		return middleware.NotImplemented("operation me.GetUsersMeFavorites has not yet been implemented")
	})

	api.AccountPostAccountVerificationHandler = account.PostAccountVerificationHandlerFunc(func(params account.PostAccountVerificationParams) middleware.Responder {
		return middleware.NotImplemented("operation account.PostAccountVerification has not yet been implemented")
	})
	api.AccountGetAccountVerificationEmailHandler = account.GetAccountVerificationEmailHandlerFunc(func(params account.GetAccountVerificationEmailParams) middleware.Responder {
		return middleware.NotImplemented("operation account.GetAccountVerificationEmail has not yet been implemented")
	})

	api.EntriesPostEntriesAnonymousHandler = entries.PostEntriesAnonymousHandlerFunc(func(params entries.PostEntriesAnonymousParams) middleware.Responder {
		return middleware.NotImplemented("operation entries.PostEntriesAnonymous has not yet been implemented")
	})
	api.CommentsPostEntriesIDCommentsHandler = comments.PostEntriesIDCommentsHandlerFunc(func(params comments.PostEntriesIDCommentsParams) middleware.Responder {
		return middleware.NotImplemented("operation comments.PostEntriesIDComments has not yet been implemented")
	})
	api.MePostUsersMeEntriesHandler = me.PostUsersMeEntriesHandlerFunc(func(params me.PostUsersMeEntriesParams) middleware.Responder {
		return middleware.NotImplemented("operation me.PostUsersMeEntries has not yet been implemented")
	})
	api.CommentsPutCommentsIDHandler = comments.PutCommentsIDHandlerFunc(func(params comments.PutCommentsIDParams) middleware.Responder {
		return middleware.NotImplemented("operation comments.PutCommentsID has not yet been implemented")
	})
	api.EntriesPutEntriesIDHandler = entries.PutEntriesIDHandlerFunc(func(params entries.PutEntriesIDParams) middleware.Responder {
		return middleware.NotImplemented("operation entries.PutEntriesID has not yet been implemented")
	})
	api.FavoritesPutEntriesIDFavoriteHandler = favorites.PutEntriesIDFavoriteHandlerFunc(func(params favorites.PutEntriesIDFavoriteParams) middleware.Responder {
		return middleware.NotImplemented("operation favorites.PutEntriesIDFavorite has not yet been implemented")
	})
	api.VotesPutEntriesIDVoteHandler = votes.PutEntriesIDVoteHandlerFunc(func(params votes.PutEntriesIDVoteParams) middleware.Responder {
		return middleware.NotImplemented("operation votes.PutEntriesIDVote has not yet been implemented")
	})
	api.WatchingsPutEntriesIDWatchingHandler = watchings.PutEntriesIDWatchingHandlerFunc(func(params watchings.PutEntriesIDWatchingParams) middleware.Responder {
		return middleware.NotImplemented("operation watchings.PutEntriesIDWatching has not yet been implemented")
	})
	api.RelationsPutRelationsFromIDHandler = relations.PutRelationsFromIDHandlerFunc(func(params relations.PutRelationsFromIDParams) middleware.Responder {
		return middleware.NotImplemented("operation relations.PutRelationsFromID has not yet been implemented")
	})
	api.RelationsPutRelationsToIDHandler = relations.PutRelationsToIDHandlerFunc(func(params relations.PutRelationsToIDParams) middleware.Responder {
		return middleware.NotImplemented("operation relations.PutRelationsToID has not yet been implemented")
	})
	api.MePutUsersMeHandler = me.PutUsersMeHandlerFunc(func(params me.PutUsersMeParams) middleware.Responder {
		return middleware.NotImplemented("operation me.PutUsersMe has not yet been implemented")
	})

	api.ServerShutdown = func() {}

	return setupGlobalMiddleware(api.Serve(setupMiddlewares))
}

// The TLS configuration before HTTPS server starts.
func configureTLS(tlsConfig *tls.Config) {
	// Make all necessary changes to the TLS configuration here.
}

// As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix"
func configureServer(s *graceful.Server, scheme, addr string) {
}

// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation
func setupMiddlewares(handler http.Handler) http.Handler {
	return handler
}

// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics
func setupGlobalMiddleware(handler http.Handler) http.Handler {
	handleUi := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		if strings.Index(r.URL.Path, "/help/api/") == 0 {
			http.StripPrefix("/help/api/", http.FileServer(http.Dir("swagger-ui"))).ServeHTTP(w, r)
			return
		}
		handler.ServeHTTP(w, r)
	})

	lmt := tollbooth.NewLimiter(10, time.Second, nil)
	lmt.SetIPLookups([]string{"RemoteAddr", "X-Forwarded-For", "X-Real-IP"})
	lmt.SetMessage("")
	lmt.SetMessageContentType("application/json")
	lmt.SetOnLimitReached(func(w http.ResponseWriter, r *http.Request) {
		err := models.Error{Message: "Too many requests"}
		data, _ := err.MarshalBinary()
		w.Write(data)
	})
	return tollbooth.LimitFuncHandler(lmt, handleUi)
}
