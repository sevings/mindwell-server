// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Profile profile
// swagger:model Profile

type Profile struct {
	User

	// age lower bound
	AgeLowerBound int64 `json:"ageLowerBound,omitempty"`

	// age upper bound
	AgeUpperBound int64 `json:"ageUpperBound,omitempty"`

	// city
	// Max Length: 50
	City string `json:"city,omitempty"`

	// country
	// Max Length: 50
	Country string `json:"country,omitempty"`

	// counts
	Counts *ProfileAO1Counts `json:"counts,omitempty"`

	// created at
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// design
	Design *Design `json:"design,omitempty"`

	// gender
	Gender string `json:"gender,omitempty"`

	// invited by
	InvitedBy *User `json:"invitedBy,omitempty"`

	// is daylog
	IsDaylog bool `json:"isDaylog,omitempty"`

	// karma
	Karma float32 `json:"karma,omitempty"`

	// last seen at
	LastSeenAt strfmt.DateTime `json:"lastSeenAt,omitempty"`

	// privacy
	Privacy string `json:"privacy,omitempty"`

	// relations
	Relations *ProfileAO1Relations `json:"relations,omitempty"`

	// title
	// Max Length: 260
	Title string `json:"title,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Profile) UnmarshalJSON(raw []byte) error {

	var aO0 User
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.User = aO0

	var data struct {
		AgeLowerBound int64 `json:"ageLowerBound,omitempty"`

		AgeUpperBound int64 `json:"ageUpperBound,omitempty"`

		City string `json:"city,omitempty"`

		Country string `json:"country,omitempty"`

		Counts *ProfileAO1Counts `json:"counts,omitempty"`

		CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

		Design *Design `json:"design,omitempty"`

		Gender string `json:"gender,omitempty"`

		InvitedBy *User `json:"invitedBy,omitempty"`

		IsDaylog bool `json:"isDaylog,omitempty"`

		Karma float32 `json:"karma,omitempty"`

		LastSeenAt strfmt.DateTime `json:"lastSeenAt,omitempty"`

		Privacy string `json:"privacy,omitempty"`

		Relations *ProfileAO1Relations `json:"relations,omitempty"`

		Title string `json:"title,omitempty"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.AgeLowerBound = data.AgeLowerBound

	m.AgeUpperBound = data.AgeUpperBound

	m.City = data.City

	m.Country = data.Country

	m.Counts = data.Counts

	m.CreatedAt = data.CreatedAt

	m.Design = data.Design

	m.Gender = data.Gender

	m.InvitedBy = data.InvitedBy

	m.IsDaylog = data.IsDaylog

	m.Karma = data.Karma

	m.LastSeenAt = data.LastSeenAt

	m.Privacy = data.Privacy

	m.Relations = data.Relations

	m.Title = data.Title

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Profile) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.User)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		AgeLowerBound int64 `json:"ageLowerBound,omitempty"`

		AgeUpperBound int64 `json:"ageUpperBound,omitempty"`

		City string `json:"city,omitempty"`

		Country string `json:"country,omitempty"`

		Counts *ProfileAO1Counts `json:"counts,omitempty"`

		CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

		Design *Design `json:"design,omitempty"`

		Gender string `json:"gender,omitempty"`

		InvitedBy *User `json:"invitedBy,omitempty"`

		IsDaylog bool `json:"isDaylog,omitempty"`

		Karma float32 `json:"karma,omitempty"`

		LastSeenAt strfmt.DateTime `json:"lastSeenAt,omitempty"`

		Privacy string `json:"privacy,omitempty"`

		Relations *ProfileAO1Relations `json:"relations,omitempty"`

		Title string `json:"title,omitempty"`
	}

	data.AgeLowerBound = m.AgeLowerBound

	data.AgeUpperBound = m.AgeUpperBound

	data.City = m.City

	data.Country = m.Country

	data.Counts = m.Counts

	data.CreatedAt = m.CreatedAt

	data.Design = m.Design

	data.Gender = m.Gender

	data.InvitedBy = m.InvitedBy

	data.IsDaylog = m.IsDaylog

	data.Karma = m.Karma

	data.LastSeenAt = m.LastSeenAt

	data.Privacy = m.Privacy

	data.Relations = m.Relations

	data.Title = m.Title

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this profile
func (m *Profile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.User.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDesign(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGender(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvitedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivacy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Profile) validateCity(formats strfmt.Registry) error {

	if swag.IsZero(m.City) { // not required
		return nil
	}

	if err := validate.MaxLength("city", "body", string(m.City), 50); err != nil {
		return err
	}

	return nil
}

func (m *Profile) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("country", "body", string(m.Country), 50); err != nil {
		return err
	}

	return nil
}

func (m *Profile) validateCounts(formats strfmt.Registry) error {

	if swag.IsZero(m.Counts) { // not required
		return nil
	}

	if m.Counts != nil {

		if err := m.Counts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("counts")
			}
			return err
		}
	}

	return nil
}

func (m *Profile) validateDesign(formats strfmt.Registry) error {

	if swag.IsZero(m.Design) { // not required
		return nil
	}

	if m.Design != nil {

		if err := m.Design.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("design")
			}
			return err
		}
	}

	return nil
}

var profileTypeGenderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["male","female","not set"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		profileTypeGenderPropEnum = append(profileTypeGenderPropEnum, v)
	}
}

// property enum
func (m *Profile) validateGenderEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, profileTypeGenderPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Profile) validateGender(formats strfmt.Registry) error {

	if swag.IsZero(m.Gender) { // not required
		return nil
	}

	// value enum
	if err := m.validateGenderEnum("gender", "body", m.Gender); err != nil {
		return err
	}

	return nil
}

func (m *Profile) validateInvitedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.InvitedBy) { // not required
		return nil
	}

	if m.InvitedBy != nil {

		if err := m.InvitedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invitedBy")
			}
			return err
		}
	}

	return nil
}

var profileTypePrivacyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["all","registered","followers"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		profileTypePrivacyPropEnum = append(profileTypePrivacyPropEnum, v)
	}
}

// property enum
func (m *Profile) validatePrivacyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, profileTypePrivacyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Profile) validatePrivacy(formats strfmt.Registry) error {

	if swag.IsZero(m.Privacy) { // not required
		return nil
	}

	// value enum
	if err := m.validatePrivacyEnum("privacy", "body", m.Privacy); err != nil {
		return err
	}

	return nil
}

func (m *Profile) validateRelations(formats strfmt.Registry) error {

	if swag.IsZero(m.Relations) { // not required
		return nil
	}

	if m.Relations != nil {

		if err := m.Relations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relations")
			}
			return err
		}
	}

	return nil
}

func (m *Profile) validateTitle(formats strfmt.Registry) error {

	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if err := validate.MaxLength("title", "body", string(m.Title), 260); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Profile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Profile) UnmarshalBinary(b []byte) error {
	var res Profile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProfileAO1Counts profile a o1 counts
// swagger:model ProfileAO1Counts

type ProfileAO1Counts struct {

	// comments
	Comments int64 `json:"comments,omitempty"`

	// entries
	Entries int64 `json:"entries,omitempty"`

	// favorites
	Favorites int64 `json:"favorites,omitempty"`

	// followers
	Followers int64 `json:"followers,omitempty"`

	// followings
	Followings int64 `json:"followings,omitempty"`

	// ignored
	Ignored int64 `json:"ignored,omitempty"`

	// invited
	Invited int64 `json:"invited,omitempty"`

	// tags
	Tags int64 `json:"tags,omitempty"`
}

/* polymorph ProfileAO1Counts comments false */

/* polymorph ProfileAO1Counts entries false */

/* polymorph ProfileAO1Counts favorites false */

/* polymorph ProfileAO1Counts followers false */

/* polymorph ProfileAO1Counts followings false */

/* polymorph ProfileAO1Counts ignored false */

/* polymorph ProfileAO1Counts invited false */

/* polymorph ProfileAO1Counts tags false */

// Validate validates this profile a o1 counts
func (m *ProfileAO1Counts) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ProfileAO1Counts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProfileAO1Counts) UnmarshalBinary(b []byte) error {
	var res ProfileAO1Counts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProfileAO1Relations profile a o1 relations
// swagger:model ProfileAO1Relations

type ProfileAO1Relations struct {

	// from me
	FromMe string `json:"fromMe,omitempty"`

	// to me
	ToMe string `json:"toMe,omitempty"`
}

/* polymorph ProfileAO1Relations fromMe false */

/* polymorph ProfileAO1Relations toMe false */

// Validate validates this profile a o1 relations
func (m *ProfileAO1Relations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFromMe(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateToMe(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var profileAO1RelationsTypeFromMePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["followed","requested","cancelled","ignored","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		profileAO1RelationsTypeFromMePropEnum = append(profileAO1RelationsTypeFromMePropEnum, v)
	}
}

const (
	// ProfileAO1RelationsFromMeFollowed captures enum value "followed"
	ProfileAO1RelationsFromMeFollowed string = "followed"
	// ProfileAO1RelationsFromMeRequested captures enum value "requested"
	ProfileAO1RelationsFromMeRequested string = "requested"
	// ProfileAO1RelationsFromMeCancelled captures enum value "cancelled"
	ProfileAO1RelationsFromMeCancelled string = "cancelled"
	// ProfileAO1RelationsFromMeIgnored captures enum value "ignored"
	ProfileAO1RelationsFromMeIgnored string = "ignored"
	// ProfileAO1RelationsFromMeNone captures enum value "none"
	ProfileAO1RelationsFromMeNone string = "none"
)

// prop value enum
func (m *ProfileAO1Relations) validateFromMeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, profileAO1RelationsTypeFromMePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProfileAO1Relations) validateFromMe(formats strfmt.Registry) error {

	if swag.IsZero(m.FromMe) { // not required
		return nil
	}

	// value enum
	if err := m.validateFromMeEnum("relations"+"."+"fromMe", "body", m.FromMe); err != nil {
		return err
	}

	return nil
}

var profileAO1RelationsTypeToMePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["followed","requested","cancelled","ignored","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		profileAO1RelationsTypeToMePropEnum = append(profileAO1RelationsTypeToMePropEnum, v)
	}
}

const (
	// ProfileAO1RelationsToMeFollowed captures enum value "followed"
	ProfileAO1RelationsToMeFollowed string = "followed"
	// ProfileAO1RelationsToMeRequested captures enum value "requested"
	ProfileAO1RelationsToMeRequested string = "requested"
	// ProfileAO1RelationsToMeCancelled captures enum value "cancelled"
	ProfileAO1RelationsToMeCancelled string = "cancelled"
	// ProfileAO1RelationsToMeIgnored captures enum value "ignored"
	ProfileAO1RelationsToMeIgnored string = "ignored"
	// ProfileAO1RelationsToMeNone captures enum value "none"
	ProfileAO1RelationsToMeNone string = "none"
)

// prop value enum
func (m *ProfileAO1Relations) validateToMeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, profileAO1RelationsTypeToMePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProfileAO1Relations) validateToMe(formats strfmt.Registry) error {

	if swag.IsZero(m.ToMe) { // not required
		return nil
	}

	// value enum
	if err := m.validateToMeEnum("relations"+"."+"toMe", "body", m.ToMe); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProfileAO1Relations) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProfileAO1Relations) UnmarshalBinary(b []byte) error {
	var res ProfileAO1Relations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
