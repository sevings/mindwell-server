// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Entry entry
// swagger:model Entry

type Entry struct {

	// author
	Author *User `json:"author,omitempty"`

	// comments
	Comments []*Comment `json:"comments"`

	// comments count
	CommentsCount int64 `json:"commentsCount,omitempty"`

	// content
	Content string `json:"content,omitempty"`

	// created at
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// id
	// Minimum: 1
	ID int64 `json:"id,omitempty"`

	// is favorited
	IsFavorited bool `json:"isFavorited,omitempty"`

	// is positive voted
	IsPositiveVoted bool `json:"isPositiveVoted,omitempty"`

	// is votable
	IsVotable bool `json:"isVotable,omitempty"`

	// is watching
	IsWatching bool `json:"isWatching,omitempty"`

	// privacy
	Privacy string `json:"privacy,omitempty"`

	// rating
	Rating int64 `json:"rating,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// visible for
	VisibleFor []*User `json:"visibleFor"`

	// word count
	WordCount int64 `json:"wordCount,omitempty"`
}

/* polymorph Entry author false */

/* polymorph Entry comments false */

/* polymorph Entry commentsCount false */

/* polymorph Entry content false */

/* polymorph Entry createdAt false */

/* polymorph Entry id false */

/* polymorph Entry isFavorited false */

/* polymorph Entry isPositiveVoted false */

/* polymorph Entry isVotable false */

/* polymorph Entry isWatching false */

/* polymorph Entry privacy false */

/* polymorph Entry rating false */

/* polymorph Entry title false */

/* polymorph Entry visibleFor false */

/* polymorph Entry wordCount false */

// Validate validates this entry
func (m *Entry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateComments(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePrivacy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVisibleFor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Entry) validateAuthor(formats strfmt.Registry) error {

	if swag.IsZero(m.Author) { // not required
		return nil
	}

	if m.Author != nil {

		if err := m.Author.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("author")
			}
			return err
		}
	}

	return nil
}

func (m *Entry) validateComments(formats strfmt.Registry) error {

	if swag.IsZero(m.Comments) { // not required
		return nil
	}

	for i := 0; i < len(m.Comments); i++ {

		if swag.IsZero(m.Comments[i]) { // not required
			continue
		}

		if m.Comments[i] != nil {

			if err := m.Comments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("comments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Entry) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinimumInt("id", "body", int64(m.ID), 1, false); err != nil {
		return err
	}

	return nil
}

var entryTypePrivacyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["all","some","me","anonymous"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		entryTypePrivacyPropEnum = append(entryTypePrivacyPropEnum, v)
	}
}

const (
	// EntryPrivacyAll captures enum value "all"
	EntryPrivacyAll string = "all"
	// EntryPrivacySome captures enum value "some"
	EntryPrivacySome string = "some"
	// EntryPrivacyMe captures enum value "me"
	EntryPrivacyMe string = "me"
	// EntryPrivacyAnonymous captures enum value "anonymous"
	EntryPrivacyAnonymous string = "anonymous"
)

// prop value enum
func (m *Entry) validatePrivacyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, entryTypePrivacyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Entry) validatePrivacy(formats strfmt.Registry) error {

	if swag.IsZero(m.Privacy) { // not required
		return nil
	}

	// value enum
	if err := m.validatePrivacyEnum("privacy", "body", m.Privacy); err != nil {
		return err
	}

	return nil
}

func (m *Entry) validateVisibleFor(formats strfmt.Registry) error {

	if swag.IsZero(m.VisibleFor) { // not required
		return nil
	}

	for i := 0; i < len(m.VisibleFor); i++ {

		if swag.IsZero(m.VisibleFor[i]) { // not required
			continue
		}

		if m.VisibleFor[i] != nil {

			if err := m.VisibleFor[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("visibleFor" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Entry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Entry) UnmarshalBinary(b []byte) error {
	var res Entry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
