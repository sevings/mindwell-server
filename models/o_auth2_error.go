// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OAuth2Error o auth2 error
//
// swagger:model OAuth2Error
type OAuth2Error struct {

	// error
	// Enum: [access_denied invalid_client invalid_grant invalid_redirect invalid_request invalid_scope server_error temporarily_unavailable unauthorized_client unsupported_grant_type unsupported_response_type]
	Error string `json:"error,omitempty"`
}

// Validate validates this o auth2 error
func (m *OAuth2Error) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oAuth2ErrorTypeErrorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["access_denied","invalid_client","invalid_grant","invalid_redirect","invalid_request","invalid_scope","server_error","temporarily_unavailable","unauthorized_client","unsupported_grant_type","unsupported_response_type"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oAuth2ErrorTypeErrorPropEnum = append(oAuth2ErrorTypeErrorPropEnum, v)
	}
}

const (

	// OAuth2ErrorErrorAccessDenied captures enum value "access_denied"
	OAuth2ErrorErrorAccessDenied string = "access_denied"

	// OAuth2ErrorErrorInvalidClient captures enum value "invalid_client"
	OAuth2ErrorErrorInvalidClient string = "invalid_client"

	// OAuth2ErrorErrorInvalidGrant captures enum value "invalid_grant"
	OAuth2ErrorErrorInvalidGrant string = "invalid_grant"

	// OAuth2ErrorErrorInvalidRedirect captures enum value "invalid_redirect"
	OAuth2ErrorErrorInvalidRedirect string = "invalid_redirect"

	// OAuth2ErrorErrorInvalidRequest captures enum value "invalid_request"
	OAuth2ErrorErrorInvalidRequest string = "invalid_request"

	// OAuth2ErrorErrorInvalidScope captures enum value "invalid_scope"
	OAuth2ErrorErrorInvalidScope string = "invalid_scope"

	// OAuth2ErrorErrorServerError captures enum value "server_error"
	OAuth2ErrorErrorServerError string = "server_error"

	// OAuth2ErrorErrorTemporarilyUnavailable captures enum value "temporarily_unavailable"
	OAuth2ErrorErrorTemporarilyUnavailable string = "temporarily_unavailable"

	// OAuth2ErrorErrorUnauthorizedClient captures enum value "unauthorized_client"
	OAuth2ErrorErrorUnauthorizedClient string = "unauthorized_client"

	// OAuth2ErrorErrorUnsupportedGrantType captures enum value "unsupported_grant_type"
	OAuth2ErrorErrorUnsupportedGrantType string = "unsupported_grant_type"

	// OAuth2ErrorErrorUnsupportedResponseType captures enum value "unsupported_response_type"
	OAuth2ErrorErrorUnsupportedResponseType string = "unsupported_response_type"
)

// prop value enum
func (m *OAuth2Error) validateErrorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oAuth2ErrorTypeErrorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OAuth2Error) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	// value enum
	if err := m.validateErrorEnum("error", "body", m.Error); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o auth2 error based on context it is used
func (m *OAuth2Error) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OAuth2Error) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OAuth2Error) UnmarshalBinary(b []byte) error {
	var res OAuth2Error
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
