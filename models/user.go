// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User user
// Example: {"id":1,"isOnline":false,"name":"Mindwell","showName":"Майндвелл"}
//
// swagger:model User
type User struct {

	// avatar
	Avatar *Avatar `json:"avatar,omitempty"`

	// id
	// Minimum: 1
	ID int64 `json:"id,omitempty"`

	// is online
	IsOnline bool `json:"isOnline,omitempty"`

	// name
	// Max Length: 20
	// Min Length: 1
	Name string `json:"name,omitempty"`

	// show name
	// Max Length: 20
	// Min Length: 1
	ShowName string `json:"showName,omitempty"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvatar(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShowName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateAvatar(formats strfmt.Registry) error {
	if swag.IsZero(m.Avatar) { // not required
		return nil
	}

	if m.Avatar != nil {
		if err := m.Avatar.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("avatar")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("avatar")
			}
			return err
		}
	}

	return nil
}

func (m *User) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinimumInt("id", "body", m.ID, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *User) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", m.Name, 20); err != nil {
		return err
	}

	return nil
}

func (m *User) validateShowName(formats strfmt.Registry) error {
	if swag.IsZero(m.ShowName) { // not required
		return nil
	}

	if err := validate.MinLength("showName", "body", m.ShowName, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("showName", "body", m.ShowName, 20); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this user based on the context it is used
func (m *User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAvatar(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) contextValidateAvatar(ctx context.Context, formats strfmt.Registry) error {

	if m.Avatar != nil {
		if err := m.Avatar.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("avatar")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("avatar")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
