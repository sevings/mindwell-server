// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FriendAllOf1 friend all of1
// swagger:model friendAllOf1
type FriendAllOf1 struct {

	// counts
	Counts *FriendAllOf1Counts `json:"counts,omitempty"`

	// cover
	Cover *Cover `json:"cover,omitempty"`

	// gender
	// Enum: [male female not set]
	Gender string `json:"gender,omitempty"`

	// karma
	Karma float32 `json:"karma,omitempty"`

	// last seen at
	LastSeenAt float64 `json:"lastSeenAt,omitempty"`

	// title
	// Max Length: 260
	Title string `json:"title,omitempty"`
}

// Validate validates this friend all of1
func (m *FriendAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCover(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGender(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendAllOf1) validateCounts(formats strfmt.Registry) error {

	if swag.IsZero(m.Counts) { // not required
		return nil
	}

	if m.Counts != nil {
		if err := m.Counts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("counts")
			}
			return err
		}
	}

	return nil
}

func (m *FriendAllOf1) validateCover(formats strfmt.Registry) error {

	if swag.IsZero(m.Cover) { // not required
		return nil
	}

	if m.Cover != nil {
		if err := m.Cover.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cover")
			}
			return err
		}
	}

	return nil
}

var friendAllOf1TypeGenderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["male","female","not set"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		friendAllOf1TypeGenderPropEnum = append(friendAllOf1TypeGenderPropEnum, v)
	}
}

const (

	// FriendAllOf1GenderMale captures enum value "male"
	FriendAllOf1GenderMale string = "male"

	// FriendAllOf1GenderFemale captures enum value "female"
	FriendAllOf1GenderFemale string = "female"

	// FriendAllOf1GenderNotSet captures enum value "not set"
	FriendAllOf1GenderNotSet string = "not set"
)

// prop value enum
func (m *FriendAllOf1) validateGenderEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, friendAllOf1TypeGenderPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FriendAllOf1) validateGender(formats strfmt.Registry) error {

	if swag.IsZero(m.Gender) { // not required
		return nil
	}

	// value enum
	if err := m.validateGenderEnum("gender", "body", m.Gender); err != nil {
		return err
	}

	return nil
}

func (m *FriendAllOf1) validateTitle(formats strfmt.Registry) error {

	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if err := validate.MaxLength("title", "body", string(m.Title), 260); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendAllOf1) UnmarshalBinary(b []byte) error {
	var res FriendAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
