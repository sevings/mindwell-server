// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OAuth2Token o auth2 token
//
// swagger:model OAuth2Token
type OAuth2Token struct {

	// access token
	AccessToken string `json:"access_token,omitempty"`

	// expires in
	ExpiresIn int64 `json:"expires_in,omitempty"`

	// refresh token
	RefreshToken string `json:"refresh_token,omitempty"`

	// scope
	Scope []string `json:"scope"`

	// token type
	// Enum: [bearer]
	TokenType string `json:"token_type,omitempty"`
}

// Validate validates this o auth2 token
func (m *OAuth2Token) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTokenType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oAuth2TokenTypeTokenTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bearer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oAuth2TokenTypeTokenTypePropEnum = append(oAuth2TokenTypeTokenTypePropEnum, v)
	}
}

const (

	// OAuth2TokenTokenTypeBearer captures enum value "bearer"
	OAuth2TokenTokenTypeBearer string = "bearer"
)

// prop value enum
func (m *OAuth2Token) validateTokenTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oAuth2TokenTypeTokenTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OAuth2Token) validateTokenType(formats strfmt.Registry) error {
	if swag.IsZero(m.TokenType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTokenTypeEnum("token_type", "body", m.TokenType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o auth2 token based on context it is used
func (m *OAuth2Token) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OAuth2Token) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OAuth2Token) UnmarshalBinary(b []byte) error {
	var res OAuth2Token
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
