// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Relationship relationship
// swagger:model Relationship
type Relationship struct {

	// from
	// Minimum: 1
	From int64 `json:"from,omitempty"`

	// relation
	Relation string `json:"relation,omitempty"`

	// to
	// Minimum: 1
	To int64 `json:"to,omitempty"`
}

// Validate validates this relationship
func (m *Relationship) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFrom(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRelation(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Relationship) validateFrom(formats strfmt.Registry) error {

	if swag.IsZero(m.From) { // not required
		return nil
	}

	if err := validate.MinimumInt("from", "body", int64(m.From), 1, false); err != nil {
		return err
	}

	return nil
}

var relationshipTypeRelationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["followed","requested","ignored","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		relationshipTypeRelationPropEnum = append(relationshipTypeRelationPropEnum, v)
	}
}

const (
	// RelationshipRelationFollowed captures enum value "followed"
	RelationshipRelationFollowed string = "followed"
	// RelationshipRelationRequested captures enum value "requested"
	RelationshipRelationRequested string = "requested"
	// RelationshipRelationIgnored captures enum value "ignored"
	RelationshipRelationIgnored string = "ignored"
	// RelationshipRelationNone captures enum value "none"
	RelationshipRelationNone string = "none"
)

// prop value enum
func (m *Relationship) validateRelationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, relationshipTypeRelationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Relationship) validateRelation(formats strfmt.Registry) error {

	if swag.IsZero(m.Relation) { // not required
		return nil
	}

	// value enum
	if err := m.validateRelationEnum("relation", "body", m.Relation); err != nil {
		return err
	}

	return nil
}

func (m *Relationship) validateTo(formats strfmt.Registry) error {

	if swag.IsZero(m.To) { // not required
		return nil
	}

	if err := validate.MinimumInt("to", "body", int64(m.To), 1, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Relationship) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Relationship) UnmarshalBinary(b []byte) error {
	var res Relationship
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
