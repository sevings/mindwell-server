// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserID user ID
//
// swagger:model UserID
type UserID struct {

	// authority
	// Enum: [user admin]
	Authority string `json:"authority,omitempty"`

	// ban
	Ban *UserIDBan `json:"ban,omitempty"`

	// followers count
	FollowersCount int64 `json:"followersCount,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// is invited
	IsInvited bool `json:"isInvited,omitempty"`

	// name
	// Max Length: 20
	// Min Length: 1
	Name string `json:"name,omitempty"`

	// neg karma
	NegKarma bool `json:"negKarma,omitempty"`

	// verified
	Verified bool `json:"verified,omitempty"`
}

// Validate validates this user ID
func (m *UserID) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var userIdTypeAuthorityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["user","admin"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userIdTypeAuthorityPropEnum = append(userIdTypeAuthorityPropEnum, v)
	}
}

const (

	// UserIDAuthorityUser captures enum value "user"
	UserIDAuthorityUser string = "user"

	// UserIDAuthorityAdmin captures enum value "admin"
	UserIDAuthorityAdmin string = "admin"
)

// prop value enum
func (m *UserID) validateAuthorityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userIdTypeAuthorityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserID) validateAuthority(formats strfmt.Registry) error {
	if swag.IsZero(m.Authority) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthorityEnum("authority", "body", m.Authority); err != nil {
		return err
	}

	return nil
}

func (m *UserID) validateBan(formats strfmt.Registry) error {
	if swag.IsZero(m.Ban) { // not required
		return nil
	}

	if m.Ban != nil {
		if err := m.Ban.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ban")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ban")
			}
			return err
		}
	}

	return nil
}

func (m *UserID) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", m.Name, 20); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this user ID based on the context it is used
func (m *UserID) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserID) contextValidateBan(ctx context.Context, formats strfmt.Registry) error {

	if m.Ban != nil {
		if err := m.Ban.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ban")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ban")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserID) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserID) UnmarshalBinary(b []byte) error {
	var res UserID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserIDBan user ID ban
//
// swagger:model UserIDBan
type UserIDBan struct {

	// comment
	Comment bool `json:"comment,omitempty"`

	// invite
	Invite bool `json:"invite,omitempty"`

	// live
	Live bool `json:"live,omitempty"`

	// vote
	Vote bool `json:"vote,omitempty"`
}

// Validate validates this user ID ban
func (m *UserIDBan) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user ID ban based on context it is used
func (m *UserIDBan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserIDBan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserIDBan) UnmarshalBinary(b []byte) error {
	var res UserIDBan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
