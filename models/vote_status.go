// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VoteStatus vote status
// swagger:model VoteStatus
type VoteStatus struct {

	// id
	// Minimum: 1
	ID int64 `json:"id,omitempty"`

	// rating
	Rating float32 `json:"rating,omitempty"`

	// vote
	Vote string `json:"vote,omitempty"`

	// votes
	Votes int64 `json:"votes,omitempty"`
}

// Validate validates this vote status
func (m *VoteStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVote(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VoteStatus) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinimumInt("id", "body", int64(m.ID), 1, false); err != nil {
		return err
	}

	return nil
}

var voteStatusTypeVotePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["not","pos","neg","ban"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		voteStatusTypeVotePropEnum = append(voteStatusTypeVotePropEnum, v)
	}
}

const (
	// VoteStatusVoteNot captures enum value "not"
	VoteStatusVoteNot string = "not"
	// VoteStatusVotePos captures enum value "pos"
	VoteStatusVotePos string = "pos"
	// VoteStatusVoteNeg captures enum value "neg"
	VoteStatusVoteNeg string = "neg"
	// VoteStatusVoteBan captures enum value "ban"
	VoteStatusVoteBan string = "ban"
)

// prop value enum
func (m *VoteStatus) validateVoteEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, voteStatusTypeVotePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VoteStatus) validateVote(formats strfmt.Registry) error {

	if swag.IsZero(m.Vote) { // not required
		return nil
	}

	// value enum
	if err := m.validateVoteEnum("vote", "body", m.Vote); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VoteStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VoteStatus) UnmarshalBinary(b []byte) error {
	var res VoteStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
