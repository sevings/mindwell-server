// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FriendList friend list
// swagger:model FriendList
type FriendList struct {

	// relation
	// Enum: [followers followings requested ignored invited]
	Relation string `json:"relation,omitempty"`

	// subject
	Subject *User `json:"subject,omitempty"`

	// users
	Users []*Friend `json:"users"`
}

// Validate validates this friend list
func (m *FriendList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRelation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var friendListTypeRelationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["followers","followings","requested","ignored","invited"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		friendListTypeRelationPropEnum = append(friendListTypeRelationPropEnum, v)
	}
}

const (

	// FriendListRelationFollowers captures enum value "followers"
	FriendListRelationFollowers string = "followers"

	// FriendListRelationFollowings captures enum value "followings"
	FriendListRelationFollowings string = "followings"

	// FriendListRelationRequested captures enum value "requested"
	FriendListRelationRequested string = "requested"

	// FriendListRelationIgnored captures enum value "ignored"
	FriendListRelationIgnored string = "ignored"

	// FriendListRelationInvited captures enum value "invited"
	FriendListRelationInvited string = "invited"
)

// prop value enum
func (m *FriendList) validateRelationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, friendListTypeRelationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FriendList) validateRelation(formats strfmt.Registry) error {

	if swag.IsZero(m.Relation) { // not required
		return nil
	}

	// value enum
	if err := m.validateRelationEnum("relation", "body", m.Relation); err != nil {
		return err
	}

	return nil
}

func (m *FriendList) validateSubject(formats strfmt.Registry) error {

	if swag.IsZero(m.Subject) { // not required
		return nil
	}

	if m.Subject != nil {
		if err := m.Subject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subject")
			}
			return err
		}
	}

	return nil
}

func (m *FriendList) validateUsers(formats strfmt.Registry) error {

	if swag.IsZero(m.Users) { // not required
		return nil
	}

	for i := 0; i < len(m.Users); i++ {
		if swag.IsZero(m.Users[i]) { // not required
			continue
		}

		if m.Users[i] != nil {
			if err := m.Users[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendList) UnmarshalBinary(b []byte) error {
	var res FriendList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
