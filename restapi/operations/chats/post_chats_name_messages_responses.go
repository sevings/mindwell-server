// Code generated by go-swagger; DO NOT EDIT.

package chats

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/sevings/mindwell-server/models"
)

// PostChatsNameMessagesCreatedCode is the HTTP code returned for type PostChatsNameMessagesCreated
const PostChatsNameMessagesCreatedCode int = 201

/*PostChatsNameMessagesCreated Message data

swagger:response postChatsNameMessagesCreated
*/
type PostChatsNameMessagesCreated struct {

	/*
	  In: Body
	*/
	Payload *models.Message `json:"body,omitempty"`
}

// NewPostChatsNameMessagesCreated creates PostChatsNameMessagesCreated with default headers values
func NewPostChatsNameMessagesCreated() *PostChatsNameMessagesCreated {

	return &PostChatsNameMessagesCreated{}
}

// WithPayload adds the payload to the post chats name messages created response
func (o *PostChatsNameMessagesCreated) WithPayload(payload *models.Message) *PostChatsNameMessagesCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post chats name messages created response
func (o *PostChatsNameMessagesCreated) SetPayload(payload *models.Message) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostChatsNameMessagesCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostChatsNameMessagesForbiddenCode is the HTTP code returned for type PostChatsNameMessagesForbidden
const PostChatsNameMessagesForbiddenCode int = 403

/*PostChatsNameMessagesForbidden access denied

swagger:response postChatsNameMessagesForbidden
*/
type PostChatsNameMessagesForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostChatsNameMessagesForbidden creates PostChatsNameMessagesForbidden with default headers values
func NewPostChatsNameMessagesForbidden() *PostChatsNameMessagesForbidden {

	return &PostChatsNameMessagesForbidden{}
}

// WithPayload adds the payload to the post chats name messages forbidden response
func (o *PostChatsNameMessagesForbidden) WithPayload(payload *models.Error) *PostChatsNameMessagesForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post chats name messages forbidden response
func (o *PostChatsNameMessagesForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostChatsNameMessagesForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostChatsNameMessagesNotFoundCode is the HTTP code returned for type PostChatsNameMessagesNotFound
const PostChatsNameMessagesNotFoundCode int = 404

/*PostChatsNameMessagesNotFound Chat not found

swagger:response postChatsNameMessagesNotFound
*/
type PostChatsNameMessagesNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostChatsNameMessagesNotFound creates PostChatsNameMessagesNotFound with default headers values
func NewPostChatsNameMessagesNotFound() *PostChatsNameMessagesNotFound {

	return &PostChatsNameMessagesNotFound{}
}

// WithPayload adds the payload to the post chats name messages not found response
func (o *PostChatsNameMessagesNotFound) WithPayload(payload *models.Error) *PostChatsNameMessagesNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post chats name messages not found response
func (o *PostChatsNameMessagesNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostChatsNameMessagesNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
