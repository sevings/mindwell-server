// Code generated by go-swagger; DO NOT EDIT.

package chats

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/sevings/mindwell-server/models"
)

// PutChatsNameReadHandlerFunc turns a function with the right signature into a put chats name read handler
type PutChatsNameReadHandlerFunc func(PutChatsNameReadParams, *models.UserID) middleware.Responder

// Handle executing the request and returning a response
func (fn PutChatsNameReadHandlerFunc) Handle(params PutChatsNameReadParams, principal *models.UserID) middleware.Responder {
	return fn(params, principal)
}

// PutChatsNameReadHandler interface for that can handle valid put chats name read params
type PutChatsNameReadHandler interface {
	Handle(PutChatsNameReadParams, *models.UserID) middleware.Responder
}

// NewPutChatsNameRead creates a new http.Handler for the put chats name read operation
func NewPutChatsNameRead(ctx *middleware.Context, handler PutChatsNameReadHandler) *PutChatsNameRead {
	return &PutChatsNameRead{Context: ctx, Handler: handler}
}

/*PutChatsNameRead swagger:route PUT /chats/{name}/read chats putChatsNameRead

PutChatsNameRead put chats name read API

*/
type PutChatsNameRead struct {
	Context *middleware.Context
	Handler PutChatsNameReadHandler
}

func (o *PutChatsNameRead) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutChatsNameReadParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.UserID
	if uprinc != nil {
		principal = uprinc.(*models.UserID) // this is really a models.UserID, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutChatsNameReadOKBody put chats name read o k body
//
// swagger:model PutChatsNameReadOKBody
type PutChatsNameReadOKBody struct {

	// unread
	Unread int64 `json:"unread,omitempty"`
}

// Validate validates this put chats name read o k body
func (o *PutChatsNameReadOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutChatsNameReadOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChatsNameReadOKBody) UnmarshalBinary(b []byte) error {
	var res PutChatsNameReadOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
