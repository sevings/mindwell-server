// Code generated by go-swagger; DO NOT EDIT.

package me

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/sevings/mindwell-server/models"
)

// GetMeRequestedHandlerFunc turns a function with the right signature into a get me requested handler
type GetMeRequestedHandlerFunc func(GetMeRequestedParams, *models.UserID) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMeRequestedHandlerFunc) Handle(params GetMeRequestedParams, principal *models.UserID) middleware.Responder {
	return fn(params, principal)
}

// GetMeRequestedHandler interface for that can handle valid get me requested params
type GetMeRequestedHandler interface {
	Handle(GetMeRequestedParams, *models.UserID) middleware.Responder
}

// NewGetMeRequested creates a new http.Handler for the get me requested operation
func NewGetMeRequested(ctx *middleware.Context, handler GetMeRequestedHandler) *GetMeRequested {
	return &GetMeRequested{Context: ctx, Handler: handler}
}

/* GetMeRequested swagger:route GET /me/requested me getMeRequested

GetMeRequested get me requested API

*/
type GetMeRequested struct {
	Context *middleware.Context
	Handler GetMeRequestedHandler
}

func (o *GetMeRequested) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetMeRequestedParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.UserID
	if uprinc != nil {
		principal = uprinc.(*models.UserID) // this is really a models.UserID, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
