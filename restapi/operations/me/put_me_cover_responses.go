// Code generated by go-swagger; DO NOT EDIT.

package me

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/sevings/mindwell-server/models"
)

// PutMeCoverNoContentCode is the HTTP code returned for type PutMeCoverNoContent
const PutMeCoverNoContentCode int = 204

/*PutMeCoverNoContent OK

swagger:response putMeCoverNoContent
*/
type PutMeCoverNoContent struct {
}

// NewPutMeCoverNoContent creates PutMeCoverNoContent with default headers values
func NewPutMeCoverNoContent() *PutMeCoverNoContent {

	return &PutMeCoverNoContent{}
}

// WriteResponse to the client
func (o *PutMeCoverNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// PutMeCoverBadRequestCode is the HTTP code returned for type PutMeCoverBadRequest
const PutMeCoverBadRequestCode int = 400

/*PutMeCoverBadRequest bad request

swagger:response putMeCoverBadRequest
*/
type PutMeCoverBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutMeCoverBadRequest creates PutMeCoverBadRequest with default headers values
func NewPutMeCoverBadRequest() *PutMeCoverBadRequest {

	return &PutMeCoverBadRequest{}
}

// WithPayload adds the payload to the put me cover bad request response
func (o *PutMeCoverBadRequest) WithPayload(payload *models.Error) *PutMeCoverBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put me cover bad request response
func (o *PutMeCoverBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutMeCoverBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
