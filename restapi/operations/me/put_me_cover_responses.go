// Code generated by go-swagger; DO NOT EDIT.

package me

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/sevings/mindwell-server/models"
)

// PutMeCoverOKCode is the HTTP code returned for type PutMeCoverOK
const PutMeCoverOKCode int = 200

/*PutMeCoverOK Cover

swagger:response putMeCoverOK
*/
type PutMeCoverOK struct {

	/*
	  In: Body
	*/
	Payload *models.Cover `json:"body,omitempty"`
}

// NewPutMeCoverOK creates PutMeCoverOK with default headers values
func NewPutMeCoverOK() *PutMeCoverOK {
	return &PutMeCoverOK{}
}

// WithPayload adds the payload to the put me cover o k response
func (o *PutMeCoverOK) WithPayload(payload *models.Cover) *PutMeCoverOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put me cover o k response
func (o *PutMeCoverOK) SetPayload(payload *models.Cover) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutMeCoverOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutMeCoverBadRequestCode is the HTTP code returned for type PutMeCoverBadRequest
const PutMeCoverBadRequestCode int = 400

/*PutMeCoverBadRequest bad request

swagger:response putMeCoverBadRequest
*/
type PutMeCoverBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutMeCoverBadRequest creates PutMeCoverBadRequest with default headers values
func NewPutMeCoverBadRequest() *PutMeCoverBadRequest {
	return &PutMeCoverBadRequest{}
}

// WithPayload adds the payload to the put me cover bad request response
func (o *PutMeCoverBadRequest) WithPayload(payload *models.Error) *PutMeCoverBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put me cover bad request response
func (o *PutMeCoverBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutMeCoverBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
