// Code generated by go-swagger; DO NOT EDIT.

package me

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/sevings/mindwell-server/models"
)

// GetMeOKCode is the HTTP code returned for type GetMeOK
const GetMeOKCode int = 200

/*GetMeOK your data

swagger:response getMeOK
*/
type GetMeOK struct {

	/*
	  In: Body
	*/
	Payload *models.AuthProfile `json:"body,omitempty"`
}

// NewGetMeOK creates GetMeOK with default headers values
func NewGetMeOK() *GetMeOK {
	return &GetMeOK{}
}

// WithPayload adds the payload to the get me o k response
func (o *GetMeOK) WithPayload(payload *models.AuthProfile) *GetMeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get me o k response
func (o *GetMeOK) SetPayload(payload *models.AuthProfile) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetMeForbiddenCode is the HTTP code returned for type GetMeForbidden
const GetMeForbiddenCode int = 403

/*GetMeForbidden access denied

swagger:response getMeForbidden
*/
type GetMeForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetMeForbidden creates GetMeForbidden with default headers values
func NewGetMeForbidden() *GetMeForbidden {
	return &GetMeForbidden{}
}

// WithPayload adds the payload to the get me forbidden response
func (o *GetMeForbidden) WithPayload(payload *models.Error) *GetMeForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get me forbidden response
func (o *GetMeForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMeForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
