// Code generated by go-swagger; DO NOT EDIT.

package me

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/sevings/mindwell-server/models"
)

// PutMeAvatarNoContentCode is the HTTP code returned for type PutMeAvatarNoContent
const PutMeAvatarNoContentCode int = 204

/*PutMeAvatarNoContent OK

swagger:response putMeAvatarNoContent
*/
type PutMeAvatarNoContent struct {
}

// NewPutMeAvatarNoContent creates PutMeAvatarNoContent with default headers values
func NewPutMeAvatarNoContent() *PutMeAvatarNoContent {

	return &PutMeAvatarNoContent{}
}

// WriteResponse to the client
func (o *PutMeAvatarNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// PutMeAvatarBadRequestCode is the HTTP code returned for type PutMeAvatarBadRequest
const PutMeAvatarBadRequestCode int = 400

/*PutMeAvatarBadRequest bad request

swagger:response putMeAvatarBadRequest
*/
type PutMeAvatarBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutMeAvatarBadRequest creates PutMeAvatarBadRequest with default headers values
func NewPutMeAvatarBadRequest() *PutMeAvatarBadRequest {

	return &PutMeAvatarBadRequest{}
}

// WithPayload adds the payload to the put me avatar bad request response
func (o *PutMeAvatarBadRequest) WithPayload(payload *models.Error) *PutMeAvatarBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put me avatar bad request response
func (o *PutMeAvatarBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutMeAvatarBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
