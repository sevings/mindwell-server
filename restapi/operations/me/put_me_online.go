// Code generated by go-swagger; DO NOT EDIT.

package me

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	models "github.com/sevings/mindwell-server/models"
)

// PutMeOnlineHandlerFunc turns a function with the right signature into a put me online handler
type PutMeOnlineHandlerFunc func(PutMeOnlineParams, *models.UserID) middleware.Responder

// Handle executing the request and returning a response
func (fn PutMeOnlineHandlerFunc) Handle(params PutMeOnlineParams, principal *models.UserID) middleware.Responder {
	return fn(params, principal)
}

// PutMeOnlineHandler interface for that can handle valid put me online params
type PutMeOnlineHandler interface {
	Handle(PutMeOnlineParams, *models.UserID) middleware.Responder
}

// NewPutMeOnline creates a new http.Handler for the put me online operation
func NewPutMeOnline(ctx *middleware.Context, handler PutMeOnlineHandler) *PutMeOnline {
	return &PutMeOnline{Context: ctx, Handler: handler}
}

/*PutMeOnline swagger:route PUT /me/online me putMeOnline

PutMeOnline put me online API

*/
type PutMeOnline struct {
	Context *middleware.Context
	Handler PutMeOnlineHandler
}

func (o *PutMeOnline) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutMeOnlineParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.UserID
	if uprinc != nil {
		principal = uprinc.(*models.UserID) // this is really a models.UserID, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
