// Code generated by go-swagger; DO NOT EDIT.

package me

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/sevings/mindwell-server/models"
)

// GetMeTlogOKCode is the HTTP code returned for type GetMeTlogOK
const GetMeTlogOKCode int = 200

/*GetMeTlogOK Entry list

swagger:response getMeTlogOK
*/
type GetMeTlogOK struct {

	/*
	  In: Body
	*/
	Payload *models.Feed `json:"body,omitempty"`
}

// NewGetMeTlogOK creates GetMeTlogOK with default headers values
func NewGetMeTlogOK() *GetMeTlogOK {
	return &GetMeTlogOK{}
}

// WithPayload adds the payload to the get me tlog o k response
func (o *GetMeTlogOK) WithPayload(payload *models.Feed) *GetMeTlogOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get me tlog o k response
func (o *GetMeTlogOK) SetPayload(payload *models.Feed) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMeTlogOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetMeTlogForbiddenCode is the HTTP code returned for type GetMeTlogForbidden
const GetMeTlogForbiddenCode int = 403

/*GetMeTlogForbidden access denied

swagger:response getMeTlogForbidden
*/
type GetMeTlogForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetMeTlogForbidden creates GetMeTlogForbidden with default headers values
func NewGetMeTlogForbidden() *GetMeTlogForbidden {
	return &GetMeTlogForbidden{}
}

// WithPayload adds the payload to the get me tlog forbidden response
func (o *GetMeTlogForbidden) WithPayload(payload *models.Error) *GetMeTlogForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get me tlog forbidden response
func (o *GetMeTlogForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMeTlogForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
