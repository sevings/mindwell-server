// Code generated by go-swagger; DO NOT EDIT.

package comments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/sevings/mindwell-server/models"
)

// PostCommentsIDComplainHandlerFunc turns a function with the right signature into a post comments ID complain handler
type PostCommentsIDComplainHandlerFunc func(PostCommentsIDComplainParams, *models.UserID) middleware.Responder

// Handle executing the request and returning a response
func (fn PostCommentsIDComplainHandlerFunc) Handle(params PostCommentsIDComplainParams, principal *models.UserID) middleware.Responder {
	return fn(params, principal)
}

// PostCommentsIDComplainHandler interface for that can handle valid post comments ID complain params
type PostCommentsIDComplainHandler interface {
	Handle(PostCommentsIDComplainParams, *models.UserID) middleware.Responder
}

// NewPostCommentsIDComplain creates a new http.Handler for the post comments ID complain operation
func NewPostCommentsIDComplain(ctx *middleware.Context, handler PostCommentsIDComplainHandler) *PostCommentsIDComplain {
	return &PostCommentsIDComplain{Context: ctx, Handler: handler}
}

/* PostCommentsIDComplain swagger:route POST /comments/{id}/complain comments postCommentsIdComplain

PostCommentsIDComplain post comments ID complain API

*/
type PostCommentsIDComplain struct {
	Context *middleware.Context
	Handler PostCommentsIDComplainHandler
}

func (o *PostCommentsIDComplain) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostCommentsIDComplainParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.UserID
	if uprinc != nil {
		principal = uprinc.(*models.UserID) // this is really a models.UserID, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
