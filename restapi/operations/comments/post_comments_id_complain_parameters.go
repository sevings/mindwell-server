// Code generated by go-swagger; DO NOT EDIT.

package comments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewPostCommentsIDComplainParams creates a new PostCommentsIDComplainParams object
// with the default values initialized.
func NewPostCommentsIDComplainParams() PostCommentsIDComplainParams {

	var (
		// initialize parameters with default values

		contentDefault = string("")
	)

	return PostCommentsIDComplainParams{
		Content: &contentDefault,
	}
}

// PostCommentsIDComplainParams contains all the bound params for the post comments ID complain operation
// typically these are obtained from a http.Request
//
// swagger:parameters PostCommentsIDComplain
type PostCommentsIDComplainParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Max Length: 1000
	  In: formData
	  Default: ""
	*/
	Content *string
	/*
	  Required: true
	  Minimum: 1
	  In: path
	*/
	ID int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostCommentsIDComplainParams() beforehand.
func (o *PostCommentsIDComplainParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	fdContent, fdhkContent, _ := fds.GetOK("content")
	if err := o.bindContent(fdContent, fdhkContent, route.Formats); err != nil {
		res = append(res, err)
	}

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindContent binds and validates parameter Content from formData.
func (o *PostCommentsIDComplainParams) bindContent(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewPostCommentsIDComplainParams()
		return nil
	}

	o.Content = &raw

	if err := o.validateContent(formats); err != nil {
		return err
	}

	return nil
}

// validateContent carries on validations for parameter Content
func (o *PostCommentsIDComplainParams) validateContent(formats strfmt.Registry) error {

	if err := validate.MaxLength("content", "formData", (*o.Content), 1000); err != nil {
		return err
	}

	return nil
}

// bindID binds and validates parameter ID from path.
func (o *PostCommentsIDComplainParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("id", "path", "int64", raw)
	}
	o.ID = value

	if err := o.validateID(formats); err != nil {
		return err
	}

	return nil
}

// validateID carries on validations for parameter ID
func (o *PostCommentsIDComplainParams) validateID(formats strfmt.Registry) error {

	if err := validate.MinimumInt("id", "path", int64(o.ID), 1, false); err != nil {
		return err
	}

	return nil
}
