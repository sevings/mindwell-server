// Code generated by go-swagger; DO NOT EDIT.

package adm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewPostAdmGrandsonParams creates a new PostAdmGrandsonParams object
// with the default values initialized.
func NewPostAdmGrandsonParams() PostAdmGrandsonParams {

	var (
		// initialize parameters with default values

		anonymousDefault = bool(false)
	)

	return PostAdmGrandsonParams{
		Anonymous: &anonymousDefault,
	}
}

// PostAdmGrandsonParams contains all the bound params for the post adm grandson operation
// typically these are obtained from a http.Request
//
// swagger:parameters PostAdmGrandson
type PostAdmGrandsonParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  Max Length: 500
	  In: formData
	*/
	Address string
	/*
	  In: formData
	  Default: false
	*/
	Anonymous *bool
	/*
	  Max Length: 1000
	  In: formData
	*/
	Comment *string
	/*
	  Required: true
	  Max Length: 50
	  In: formData
	*/
	Country string
	/*
	  Required: true
	  Max Length: 100
	  In: formData
	*/
	Name string
	/*
	  Required: true
	  Max Length: 50
	  In: formData
	*/
	Postcode string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostAdmGrandsonParams() beforehand.
func (o *PostAdmGrandsonParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	fdAddress, fdhkAddress, _ := fds.GetOK("address")
	if err := o.bindAddress(fdAddress, fdhkAddress, route.Formats); err != nil {
		res = append(res, err)
	}

	fdAnonymous, fdhkAnonymous, _ := fds.GetOK("anonymous")
	if err := o.bindAnonymous(fdAnonymous, fdhkAnonymous, route.Formats); err != nil {
		res = append(res, err)
	}

	fdComment, fdhkComment, _ := fds.GetOK("comment")
	if err := o.bindComment(fdComment, fdhkComment, route.Formats); err != nil {
		res = append(res, err)
	}

	fdCountry, fdhkCountry, _ := fds.GetOK("country")
	if err := o.bindCountry(fdCountry, fdhkCountry, route.Formats); err != nil {
		res = append(res, err)
	}

	fdName, fdhkName, _ := fds.GetOK("name")
	if err := o.bindName(fdName, fdhkName, route.Formats); err != nil {
		res = append(res, err)
	}

	fdPostcode, fdhkPostcode, _ := fds.GetOK("postcode")
	if err := o.bindPostcode(fdPostcode, fdhkPostcode, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAddress binds and validates parameter Address from formData.
func (o *PostAdmGrandsonParams) bindAddress(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("address", "formData")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("address", "formData", raw); err != nil {
		return err
	}

	o.Address = raw

	if err := o.validateAddress(formats); err != nil {
		return err
	}

	return nil
}

// validateAddress carries on validations for parameter Address
func (o *PostAdmGrandsonParams) validateAddress(formats strfmt.Registry) error {

	if err := validate.MaxLength("address", "formData", o.Address, 500); err != nil {
		return err
	}

	return nil
}

// bindAnonymous binds and validates parameter Anonymous from formData.
func (o *PostAdmGrandsonParams) bindAnonymous(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewPostAdmGrandsonParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("anonymous", "formData", "bool", raw)
	}
	o.Anonymous = &value

	return nil
}

// bindComment binds and validates parameter Comment from formData.
func (o *PostAdmGrandsonParams) bindComment(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Comment = &raw

	if err := o.validateComment(formats); err != nil {
		return err
	}

	return nil
}

// validateComment carries on validations for parameter Comment
func (o *PostAdmGrandsonParams) validateComment(formats strfmt.Registry) error {

	if err := validate.MaxLength("comment", "formData", (*o.Comment), 1000); err != nil {
		return err
	}

	return nil
}

// bindCountry binds and validates parameter Country from formData.
func (o *PostAdmGrandsonParams) bindCountry(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("country", "formData")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("country", "formData", raw); err != nil {
		return err
	}

	o.Country = raw

	if err := o.validateCountry(formats); err != nil {
		return err
	}

	return nil
}

// validateCountry carries on validations for parameter Country
func (o *PostAdmGrandsonParams) validateCountry(formats strfmt.Registry) error {

	if err := validate.MaxLength("country", "formData", o.Country, 50); err != nil {
		return err
	}

	return nil
}

// bindName binds and validates parameter Name from formData.
func (o *PostAdmGrandsonParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("name", "formData")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("name", "formData", raw); err != nil {
		return err
	}

	o.Name = raw

	if err := o.validateName(formats); err != nil {
		return err
	}

	return nil
}

// validateName carries on validations for parameter Name
func (o *PostAdmGrandsonParams) validateName(formats strfmt.Registry) error {

	if err := validate.MaxLength("name", "formData", o.Name, 100); err != nil {
		return err
	}

	return nil
}

// bindPostcode binds and validates parameter Postcode from formData.
func (o *PostAdmGrandsonParams) bindPostcode(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("postcode", "formData")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("postcode", "formData", raw); err != nil {
		return err
	}

	o.Postcode = raw

	if err := o.validatePostcode(formats); err != nil {
		return err
	}

	return nil
}

// validatePostcode carries on validations for parameter Postcode
func (o *PostAdmGrandsonParams) validatePostcode(formats strfmt.Registry) error {

	if err := validate.MaxLength("postcode", "formData", o.Postcode, 50); err != nil {
		return err
	}

	return nil
}
