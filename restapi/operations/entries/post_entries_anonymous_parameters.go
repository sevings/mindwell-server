// Code generated by go-swagger; DO NOT EDIT.

package entries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostEntriesAnonymousMaxParseMemory sets the maximum size in bytes for
// the multipart form parser for this operation.
//
// The default value is 32 MB.
// The multipart parser stores up to this + 10MB.
var PostEntriesAnonymousMaxParseMemory int64 = 32 << 20

// NewPostEntriesAnonymousParams creates a new PostEntriesAnonymousParams object
// with the default values initialized.
func NewPostEntriesAnonymousParams() PostEntriesAnonymousParams {

	var (
		// initialize parameters with default values

		anonymousCommentsDefault = bool(false)

		titleDefault = string("")
	)

	return PostEntriesAnonymousParams{
		AnonymousComments: &anonymousCommentsDefault,

		Title: &titleDefault,
	}
}

// PostEntriesAnonymousParams contains all the bound params for the post entries anonymous operation
// typically these are obtained from a http.Request
//
// swagger:parameters PostEntriesAnonymous
type PostEntriesAnonymousParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: formData
	  Default: false
	*/
	AnonymousComments *bool
	/*
	  Required: true
	  Max Length: 30000
	  Min Length: 1
	  Pattern: \s*\S+.*
	  In: formData
	*/
	Content string
	/*
	  Max Items: 5
	  Unique: true
	  In: formData
	*/
	Images []int64
	/*
	  Max Items: 5
	  Unique: true
	  In: formData
	*/
	Tags []string
	/*
	  Max Length: 500
	  In: formData
	  Default: ""
	*/
	Title *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostEntriesAnonymousParams() beforehand.
func (o *PostEntriesAnonymousParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(PostEntriesAnonymousMaxParseMemory); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	fdAnonymousComments, fdhkAnonymousComments, _ := fds.GetOK("anonymous_comments")
	if err := o.bindAnonymousComments(fdAnonymousComments, fdhkAnonymousComments, route.Formats); err != nil {
		res = append(res, err)
	}

	fdContent, fdhkContent, _ := fds.GetOK("content")
	if err := o.bindContent(fdContent, fdhkContent, route.Formats); err != nil {
		res = append(res, err)
	}

	fdImages, fdhkImages, _ := fds.GetOK("images")
	if err := o.bindImages(fdImages, fdhkImages, route.Formats); err != nil {
		res = append(res, err)
	}

	fdTags, fdhkTags, _ := fds.GetOK("tags")
	if err := o.bindTags(fdTags, fdhkTags, route.Formats); err != nil {
		res = append(res, err)
	}

	fdTitle, fdhkTitle, _ := fds.GetOK("title")
	if err := o.bindTitle(fdTitle, fdhkTitle, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAnonymousComments binds and validates parameter AnonymousComments from formData.
func (o *PostEntriesAnonymousParams) bindAnonymousComments(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewPostEntriesAnonymousParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("anonymous_comments", "formData", "bool", raw)
	}
	o.AnonymousComments = &value

	return nil
}

// bindContent binds and validates parameter Content from formData.
func (o *PostEntriesAnonymousParams) bindContent(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("content", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("content", "formData", raw); err != nil {
		return err
	}
	o.Content = raw

	if err := o.validateContent(formats); err != nil {
		return err
	}

	return nil
}

// validateContent carries on validations for parameter Content
func (o *PostEntriesAnonymousParams) validateContent(formats strfmt.Registry) error {

	if err := validate.MinLength("content", "formData", o.Content, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("content", "formData", o.Content, 30000); err != nil {
		return err
	}

	if err := validate.Pattern("content", "formData", o.Content, `\s*\S+.*`); err != nil {
		return err
	}

	return nil
}

// bindImages binds and validates array parameter Images from formData.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *PostEntriesAnonymousParams) bindImages(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvImages string
	if len(rawData) > 0 {
		qvImages = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	imagesIC := swag.SplitByFormat(qvImages, "")
	if len(imagesIC) == 0 {
		return nil
	}

	var imagesIR []int64
	for i, imagesIV := range imagesIC {
		// items.Format: "int64"
		imagesI, err := swag.ConvertInt64(imagesIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "images", i), "formData", "int64", imagesI)
		}

		if err := validate.MinimumInt(fmt.Sprintf("%s.%v", "images", i), "formData", imagesI, 1, false); err != nil {
			return err
		}

		imagesIR = append(imagesIR, imagesI)
	}

	o.Images = imagesIR
	if err := o.validateImages(formats); err != nil {
		return err
	}

	return nil
}

// validateImages carries on validations for parameter Images
func (o *PostEntriesAnonymousParams) validateImages(formats strfmt.Registry) error {

	imagesSize := int64(len(o.Images))

	// maxItems: 5
	if err := validate.MaxItems("images", "formData", imagesSize, 5); err != nil {
		return err
	}

	// uniqueItems: true
	if err := validate.UniqueItems("images", "formData", o.Images); err != nil {
		return err
	}
	return nil
}

// bindTags binds and validates array parameter Tags from formData.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *PostEntriesAnonymousParams) bindTags(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvTags string
	if len(rawData) > 0 {
		qvTags = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	tagsIC := swag.SplitByFormat(qvTags, "")
	if len(tagsIC) == 0 {
		return nil
	}

	var tagsIR []string
	for i, tagsIV := range tagsIC {
		tagsI := tagsIV

		if err := validate.MinLength(fmt.Sprintf("%s.%v", "tags", i), "formData", tagsI, 1); err != nil {
			return err
		}

		if err := validate.MaxLength(fmt.Sprintf("%s.%v", "tags", i), "formData", tagsI, 50); err != nil {
			return err
		}

		tagsIR = append(tagsIR, tagsI)
	}

	o.Tags = tagsIR
	if err := o.validateTags(formats); err != nil {
		return err
	}

	return nil
}

// validateTags carries on validations for parameter Tags
func (o *PostEntriesAnonymousParams) validateTags(formats strfmt.Registry) error {

	tagsSize := int64(len(o.Tags))

	// maxItems: 5
	if err := validate.MaxItems("tags", "formData", tagsSize, 5); err != nil {
		return err
	}

	// uniqueItems: true
	if err := validate.UniqueItems("tags", "formData", o.Tags); err != nil {
		return err
	}
	return nil
}

// bindTitle binds and validates parameter Title from formData.
func (o *PostEntriesAnonymousParams) bindTitle(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewPostEntriesAnonymousParams()
		return nil
	}
	o.Title = &raw

	if err := o.validateTitle(formats); err != nil {
		return err
	}

	return nil
}

// validateTitle carries on validations for parameter Title
func (o *PostEntriesAnonymousParams) validateTitle(formats strfmt.Registry) error {

	if err := validate.MaxLength("title", "formData", *o.Title, 500); err != nil {
		return err
	}

	return nil
}
