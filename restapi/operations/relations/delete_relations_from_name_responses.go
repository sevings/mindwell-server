// Code generated by go-swagger; DO NOT EDIT.

package relations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	models "github.com/sevings/mindwell-server/models"
)

// DeleteRelationsFromNameOKCode is the HTTP code returned for type DeleteRelationsFromNameOK
const DeleteRelationsFromNameOKCode int = 200

/*DeleteRelationsFromNameOK the user relationship with you

swagger:response deleteRelationsFromNameOK
*/
type DeleteRelationsFromNameOK struct {

	/*
	  In: Body
	*/
	Payload *models.Relationship `json:"body,omitempty"`
}

// NewDeleteRelationsFromNameOK creates DeleteRelationsFromNameOK with default headers values
func NewDeleteRelationsFromNameOK() *DeleteRelationsFromNameOK {

	return &DeleteRelationsFromNameOK{}
}

// WithPayload adds the payload to the delete relations from name o k response
func (o *DeleteRelationsFromNameOK) WithPayload(payload *models.Relationship) *DeleteRelationsFromNameOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete relations from name o k response
func (o *DeleteRelationsFromNameOK) SetPayload(payload *models.Relationship) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRelationsFromNameOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteRelationsFromNameForbiddenCode is the HTTP code returned for type DeleteRelationsFromNameForbidden
const DeleteRelationsFromNameForbiddenCode int = 403

/*DeleteRelationsFromNameForbidden access denied

swagger:response deleteRelationsFromNameForbidden
*/
type DeleteRelationsFromNameForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteRelationsFromNameForbidden creates DeleteRelationsFromNameForbidden with default headers values
func NewDeleteRelationsFromNameForbidden() *DeleteRelationsFromNameForbidden {

	return &DeleteRelationsFromNameForbidden{}
}

// WithPayload adds the payload to the delete relations from name forbidden response
func (o *DeleteRelationsFromNameForbidden) WithPayload(payload *models.Error) *DeleteRelationsFromNameForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete relations from name forbidden response
func (o *DeleteRelationsFromNameForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRelationsFromNameForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteRelationsFromNameNotFoundCode is the HTTP code returned for type DeleteRelationsFromNameNotFound
const DeleteRelationsFromNameNotFoundCode int = 404

/*DeleteRelationsFromNameNotFound User not found

swagger:response deleteRelationsFromNameNotFound
*/
type DeleteRelationsFromNameNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteRelationsFromNameNotFound creates DeleteRelationsFromNameNotFound with default headers values
func NewDeleteRelationsFromNameNotFound() *DeleteRelationsFromNameNotFound {

	return &DeleteRelationsFromNameNotFound{}
}

// WithPayload adds the payload to the delete relations from name not found response
func (o *DeleteRelationsFromNameNotFound) WithPayload(payload *models.Error) *DeleteRelationsFromNameNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete relations from name not found response
func (o *DeleteRelationsFromNameNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRelationsFromNameNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
