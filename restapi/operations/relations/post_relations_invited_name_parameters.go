// Code generated by go-swagger; DO NOT EDIT.

package relations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewPostRelationsInvitedNameParams creates a new PostRelationsInvitedNameParams object
// no default values defined in spec.
func NewPostRelationsInvitedNameParams() PostRelationsInvitedNameParams {

	return PostRelationsInvitedNameParams{}
}

// PostRelationsInvitedNameParams contains all the bound params for the post relations invited name operation
// typically these are obtained from a http.Request
//
// swagger:parameters PostRelationsInvitedName
type PostRelationsInvitedNameParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  Pattern: ^\s*\S+\s+\S+\s+\S+\s*$
	  In: formData
	*/
	Invite string
	/*
	  Required: true
	  Max Length: 20
	  Min Length: 1
	  Pattern: ^[0-9\-_]*[a-zA-Z][a-zA-Z0-9\-_]*$
	  In: path
	*/
	Name string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostRelationsInvitedNameParams() beforehand.
func (o *PostRelationsInvitedNameParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	fdInvite, fdhkInvite, _ := fds.GetOK("invite")
	if err := o.bindInvite(fdInvite, fdhkInvite, route.Formats); err != nil {
		res = append(res, err)
	}

	rName, rhkName, _ := route.Params.GetOK("name")
	if err := o.bindName(rName, rhkName, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindInvite binds and validates parameter Invite from formData.
func (o *PostRelationsInvitedNameParams) bindInvite(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("invite", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("invite", "formData", raw); err != nil {
		return err
	}

	o.Invite = raw

	if err := o.validateInvite(formats); err != nil {
		return err
	}

	return nil
}

// validateInvite carries on validations for parameter Invite
func (o *PostRelationsInvitedNameParams) validateInvite(formats strfmt.Registry) error {

	if err := validate.Pattern("invite", "formData", o.Invite, `^\s*\S+\s+\S+\s+\S+\s*$`); err != nil {
		return err
	}

	return nil
}

// bindName binds and validates parameter Name from path.
func (o *PostRelationsInvitedNameParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.Name = raw

	if err := o.validateName(formats); err != nil {
		return err
	}

	return nil
}

// validateName carries on validations for parameter Name
func (o *PostRelationsInvitedNameParams) validateName(formats strfmt.Registry) error {

	if err := validate.MinLength("name", "path", o.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "path", o.Name, 20); err != nil {
		return err
	}

	if err := validate.Pattern("name", "path", o.Name, `^[0-9\-_]*[a-zA-Z][a-zA-Z0-9\-_]*$`); err != nil {
		return err
	}

	return nil
}
