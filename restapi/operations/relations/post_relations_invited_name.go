// Code generated by go-swagger; DO NOT EDIT.

package relations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/sevings/mindwell-server/models"
)

// PostRelationsInvitedNameHandlerFunc turns a function with the right signature into a post relations invited name handler
type PostRelationsInvitedNameHandlerFunc func(PostRelationsInvitedNameParams, *models.UserID) middleware.Responder

// Handle executing the request and returning a response
func (fn PostRelationsInvitedNameHandlerFunc) Handle(params PostRelationsInvitedNameParams, principal *models.UserID) middleware.Responder {
	return fn(params, principal)
}

// PostRelationsInvitedNameHandler interface for that can handle valid post relations invited name params
type PostRelationsInvitedNameHandler interface {
	Handle(PostRelationsInvitedNameParams, *models.UserID) middleware.Responder
}

// NewPostRelationsInvitedName creates a new http.Handler for the post relations invited name operation
func NewPostRelationsInvitedName(ctx *middleware.Context, handler PostRelationsInvitedNameHandler) *PostRelationsInvitedName {
	return &PostRelationsInvitedName{Context: ctx, Handler: handler}
}

/* PostRelationsInvitedName swagger:route POST /relations/invited/{name} relations postRelationsInvitedName

PostRelationsInvitedName post relations invited name API

*/
type PostRelationsInvitedName struct {
	Context *middleware.Context
	Handler PostRelationsInvitedNameHandler
}

func (o *PostRelationsInvitedName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostRelationsInvitedNameParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.UserID
	if uprinc != nil {
		principal = uprinc.(*models.UserID) // this is really a models.UserID, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
