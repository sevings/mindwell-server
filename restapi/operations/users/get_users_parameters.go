// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetUsersParams creates a new GetUsersParams object
// with the default values initialized.
func NewGetUsersParams() GetUsersParams {

	var (
		// initialize parameters with default values

		topDefault = string("new")
	)

	return GetUsersParams{
		Top: &topDefault,
	}
}

// GetUsersParams contains all the bound params for the get users operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetUsers
type GetUsersParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Max Length: 50
	  Min Length: 1
	  In: query
	*/
	Query *string
	/*
	  In: query
	  Default: "new"
	*/
	Top *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetUsersParams() beforehand.
func (o *GetUsersParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qQuery, qhkQuery, _ := qs.GetOK("query")
	if err := o.bindQuery(qQuery, qhkQuery, route.Formats); err != nil {
		res = append(res, err)
	}

	qTop, qhkTop, _ := qs.GetOK("top")
	if err := o.bindTop(qTop, qhkTop, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindQuery binds and validates parameter Query from query.
func (o *GetUsersParams) bindQuery(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Query = &raw

	if err := o.validateQuery(formats); err != nil {
		return err
	}

	return nil
}

// validateQuery carries on validations for parameter Query
func (o *GetUsersParams) validateQuery(formats strfmt.Registry) error {

	if err := validate.MinLength("query", "query", (*o.Query), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("query", "query", (*o.Query), 50); err != nil {
		return err
	}

	return nil
}

// bindTop binds and validates parameter Top from query.
func (o *GetUsersParams) bindTop(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetUsersParams()
		return nil
	}

	o.Top = &raw

	if err := o.validateTop(formats); err != nil {
		return err
	}

	return nil
}

// validateTop carries on validations for parameter Top
func (o *GetUsersParams) validateTop(formats strfmt.Registry) error {

	if err := validate.Enum("top", "query", *o.Top, []interface{}{"new", "rank"}); err != nil {
		return err
	}

	return nil
}
