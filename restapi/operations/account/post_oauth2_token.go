// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/sevings/mindwell-server/models"
)

// PostOauth2TokenHandlerFunc turns a function with the right signature into a post oauth2 token handler
type PostOauth2TokenHandlerFunc func(PostOauth2TokenParams, *models.UserID) middleware.Responder

// Handle executing the request and returning a response
func (fn PostOauth2TokenHandlerFunc) Handle(params PostOauth2TokenParams, principal *models.UserID) middleware.Responder {
	return fn(params, principal)
}

// PostOauth2TokenHandler interface for that can handle valid post oauth2 token params
type PostOauth2TokenHandler interface {
	Handle(PostOauth2TokenParams, *models.UserID) middleware.Responder
}

// NewPostOauth2Token creates a new http.Handler for the post oauth2 token operation
func NewPostOauth2Token(ctx *middleware.Context, handler PostOauth2TokenHandler) *PostOauth2Token {
	return &PostOauth2Token{Context: ctx, Handler: handler}
}

/* PostOauth2Token swagger:route POST /oauth2/token account postOauth2Token

PostOauth2Token post oauth2 token API

*/
type PostOauth2Token struct {
	Context *middleware.Context
	Handler PostOauth2TokenHandler
}

func (o *PostOauth2Token) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostOauth2TokenParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.UserID
	if uprinc != nil {
		principal = uprinc.(*models.UserID) // this is really a models.UserID, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostOauth2TokenBadRequestBody post oauth2 token bad request body
//
// swagger:model PostOauth2TokenBadRequestBody
type PostOauth2TokenBadRequestBody struct {

	// error
	// Enum: [invalid_request invalid_grant invalid_scope unauthorized_client unsupported_grant_type]
	Error string `json:"error,omitempty"`
}

// Validate validates this post oauth2 token bad request body
func (o *PostOauth2TokenBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postOauth2TokenBadRequestBodyTypeErrorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["invalid_request","invalid_grant","invalid_scope","unauthorized_client","unsupported_grant_type"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postOauth2TokenBadRequestBodyTypeErrorPropEnum = append(postOauth2TokenBadRequestBodyTypeErrorPropEnum, v)
	}
}

const (

	// PostOauth2TokenBadRequestBodyErrorInvalidRequest captures enum value "invalid_request"
	PostOauth2TokenBadRequestBodyErrorInvalidRequest string = "invalid_request"

	// PostOauth2TokenBadRequestBodyErrorInvalidGrant captures enum value "invalid_grant"
	PostOauth2TokenBadRequestBodyErrorInvalidGrant string = "invalid_grant"

	// PostOauth2TokenBadRequestBodyErrorInvalidScope captures enum value "invalid_scope"
	PostOauth2TokenBadRequestBodyErrorInvalidScope string = "invalid_scope"

	// PostOauth2TokenBadRequestBodyErrorUnauthorizedClient captures enum value "unauthorized_client"
	PostOauth2TokenBadRequestBodyErrorUnauthorizedClient string = "unauthorized_client"

	// PostOauth2TokenBadRequestBodyErrorUnsupportedGrantType captures enum value "unsupported_grant_type"
	PostOauth2TokenBadRequestBodyErrorUnsupportedGrantType string = "unsupported_grant_type"
)

// prop value enum
func (o *PostOauth2TokenBadRequestBody) validateErrorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postOauth2TokenBadRequestBodyTypeErrorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostOauth2TokenBadRequestBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	// value enum
	if err := o.validateErrorEnum("postOauth2TokenBadRequest"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post oauth2 token bad request body based on context it is used
func (o *PostOauth2TokenBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostOauth2TokenBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOauth2TokenBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostOauth2TokenBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostOauth2TokenOKBody post oauth2 token o k body
//
// swagger:model PostOauth2TokenOKBody
type PostOauth2TokenOKBody struct {

	// access token
	AccessToken string `json:"access_token,omitempty"`

	// expires in
	ExpiresIn int64 `json:"expires_in,omitempty"`

	// refresh token
	RefreshToken string `json:"refresh_token,omitempty"`

	// scope
	Scope string `json:"scope,omitempty"`

	// token type
	// Enum: [bearer]
	TokenType string `json:"token_type,omitempty"`
}

// Validate validates this post oauth2 token o k body
func (o *PostOauth2TokenOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTokenType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postOauth2TokenOKBodyTypeTokenTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bearer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postOauth2TokenOKBodyTypeTokenTypePropEnum = append(postOauth2TokenOKBodyTypeTokenTypePropEnum, v)
	}
}

const (

	// PostOauth2TokenOKBodyTokenTypeBearer captures enum value "bearer"
	PostOauth2TokenOKBodyTokenTypeBearer string = "bearer"
)

// prop value enum
func (o *PostOauth2TokenOKBody) validateTokenTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postOauth2TokenOKBodyTypeTokenTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostOauth2TokenOKBody) validateTokenType(formats strfmt.Registry) error {
	if swag.IsZero(o.TokenType) { // not required
		return nil
	}

	// value enum
	if err := o.validateTokenTypeEnum("postOauth2TokenOK"+"."+"token_type", "body", o.TokenType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post oauth2 token o k body based on context it is used
func (o *PostOauth2TokenOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostOauth2TokenOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOauth2TokenOKBody) UnmarshalBinary(b []byte) error {
	var res PostOauth2TokenOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostOauth2TokenUnauthorizedBody post oauth2 token unauthorized body
//
// swagger:model PostOauth2TokenUnauthorizedBody
type PostOauth2TokenUnauthorizedBody struct {

	// error
	// Enum: [invalid_client]
	Error string `json:"error,omitempty"`
}

// Validate validates this post oauth2 token unauthorized body
func (o *PostOauth2TokenUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postOauth2TokenUnauthorizedBodyTypeErrorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["invalid_client"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postOauth2TokenUnauthorizedBodyTypeErrorPropEnum = append(postOauth2TokenUnauthorizedBodyTypeErrorPropEnum, v)
	}
}

const (

	// PostOauth2TokenUnauthorizedBodyErrorInvalidClient captures enum value "invalid_client"
	PostOauth2TokenUnauthorizedBodyErrorInvalidClient string = "invalid_client"
)

// prop value enum
func (o *PostOauth2TokenUnauthorizedBody) validateErrorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postOauth2TokenUnauthorizedBodyTypeErrorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostOauth2TokenUnauthorizedBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	// value enum
	if err := o.validateErrorEnum("postOauth2TokenUnauthorized"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post oauth2 token unauthorized body based on context it is used
func (o *PostOauth2TokenUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostOauth2TokenUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOauth2TokenUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PostOauth2TokenUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
