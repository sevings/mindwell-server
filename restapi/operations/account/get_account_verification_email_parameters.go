// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAccountVerificationEmailParams creates a new GetAccountVerificationEmailParams object
// no default values defined in spec.
func NewGetAccountVerificationEmailParams() GetAccountVerificationEmailParams {

	return GetAccountVerificationEmailParams{}
}

// GetAccountVerificationEmailParams contains all the bound params for the get account verification email operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetAccountVerificationEmail
type GetAccountVerificationEmailParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  Max Length: 64
	  Min Length: 64
	  In: query
	*/
	Code string
	/*
	  Required: true
	  Max Length: 500
	  Pattern: .+@.+
	  In: path
	*/
	Email string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetAccountVerificationEmailParams() beforehand.
func (o *GetAccountVerificationEmailParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCode, qhkCode, _ := qs.GetOK("code")
	if err := o.bindCode(qCode, qhkCode, route.Formats); err != nil {
		res = append(res, err)
	}

	rEmail, rhkEmail, _ := route.Params.GetOK("email")
	if err := o.bindEmail(rEmail, rhkEmail, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCode binds and validates parameter Code from query.
func (o *GetAccountVerificationEmailParams) bindCode(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("code", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("code", "query", raw); err != nil {
		return err
	}

	o.Code = raw

	if err := o.validateCode(formats); err != nil {
		return err
	}

	return nil
}

// validateCode carries on validations for parameter Code
func (o *GetAccountVerificationEmailParams) validateCode(formats strfmt.Registry) error {

	if err := validate.MinLength("code", "query", o.Code, 64); err != nil {
		return err
	}

	if err := validate.MaxLength("code", "query", o.Code, 64); err != nil {
		return err
	}

	return nil
}

// bindEmail binds and validates parameter Email from path.
func (o *GetAccountVerificationEmailParams) bindEmail(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.Email = raw

	if err := o.validateEmail(formats); err != nil {
		return err
	}

	return nil
}

// validateEmail carries on validations for parameter Email
func (o *GetAccountVerificationEmailParams) validateEmail(formats strfmt.Registry) error {

	if err := validate.MaxLength("email", "path", o.Email, 500); err != nil {
		return err
	}

	if err := validate.Pattern("email", "path", o.Email, `.+@.+`); err != nil {
		return err
	}

	return nil
}
