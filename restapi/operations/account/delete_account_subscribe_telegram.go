// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/sevings/mindwell-server/models"
)

// DeleteAccountSubscribeTelegramHandlerFunc turns a function with the right signature into a delete account subscribe telegram handler
type DeleteAccountSubscribeTelegramHandlerFunc func(DeleteAccountSubscribeTelegramParams, *models.UserID) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteAccountSubscribeTelegramHandlerFunc) Handle(params DeleteAccountSubscribeTelegramParams, principal *models.UserID) middleware.Responder {
	return fn(params, principal)
}

// DeleteAccountSubscribeTelegramHandler interface for that can handle valid delete account subscribe telegram params
type DeleteAccountSubscribeTelegramHandler interface {
	Handle(DeleteAccountSubscribeTelegramParams, *models.UserID) middleware.Responder
}

// NewDeleteAccountSubscribeTelegram creates a new http.Handler for the delete account subscribe telegram operation
func NewDeleteAccountSubscribeTelegram(ctx *middleware.Context, handler DeleteAccountSubscribeTelegramHandler) *DeleteAccountSubscribeTelegram {
	return &DeleteAccountSubscribeTelegram{Context: ctx, Handler: handler}
}

/* DeleteAccountSubscribeTelegram swagger:route DELETE /account/subscribe/telegram account deleteAccountSubscribeTelegram

DeleteAccountSubscribeTelegram delete account subscribe telegram API

*/
type DeleteAccountSubscribeTelegram struct {
	Context *middleware.Context
	Handler DeleteAccountSubscribeTelegramHandler
}

func (o *DeleteAccountSubscribeTelegram) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteAccountSubscribeTelegramParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.UserID
	if uprinc != nil {
		principal = uprinc.(*models.UserID) // this is really a models.UserID, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
