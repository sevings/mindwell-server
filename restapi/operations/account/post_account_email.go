// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	models "github.com/sevings/mindwell-server/models"
)

// PostAccountEmailHandlerFunc turns a function with the right signature into a post account email handler
type PostAccountEmailHandlerFunc func(PostAccountEmailParams, *models.UserID) middleware.Responder

// Handle executing the request and returning a response
func (fn PostAccountEmailHandlerFunc) Handle(params PostAccountEmailParams, principal *models.UserID) middleware.Responder {
	return fn(params, principal)
}

// PostAccountEmailHandler interface for that can handle valid post account email params
type PostAccountEmailHandler interface {
	Handle(PostAccountEmailParams, *models.UserID) middleware.Responder
}

// NewPostAccountEmail creates a new http.Handler for the post account email operation
func NewPostAccountEmail(ctx *middleware.Context, handler PostAccountEmailHandler) *PostAccountEmail {
	return &PostAccountEmail{Context: ctx, Handler: handler}
}

/*PostAccountEmail swagger:route POST /account/email account postAccountEmail

set new email

*/
type PostAccountEmail struct {
	Context *middleware.Context
	Handler PostAccountEmailHandler
}

func (o *PostAccountEmail) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostAccountEmailParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.UserID
	if uprinc != nil {
		principal = uprinc.(*models.UserID) // this is really a models.UserID, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
