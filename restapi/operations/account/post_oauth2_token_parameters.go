// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PostOauth2TokenMaxParseMemory sets the maximum size in bytes for
// the multipart form parser for this operation.
//
// The default value is 32 MB.
// The multipart parser stores up to this + 10MB.
var PostOauth2TokenMaxParseMemory int64 = 32 << 20

// NewPostOauth2TokenParams creates a new PostOauth2TokenParams object
//
// There are no default values defined in the spec.
func NewPostOauth2TokenParams() PostOauth2TokenParams {

	return PostOauth2TokenParams{}
}

// PostOauth2TokenParams contains all the bound params for the post oauth2 token operation
// typically these are obtained from a http.Request
//
// swagger:parameters PostOauth2Token
type PostOauth2TokenParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: formData
	*/
	ClientID string
	/*
	  In: formData
	*/
	ClientSecret *string
	/*
	  In: formData
	*/
	Code *string
	/*
	  In: formData
	*/
	CodeVerifier *string
	/*
	  In: formData
	*/
	GrantType *string
	/*
	  Max Length: 100
	  Min Length: 6
	  In: formData
	*/
	Password *string
	/*
	  In: formData
	*/
	RedirectURI *string
	/*
	  In: formData
	*/
	RefreshToken *string
	/*
	  Max Length: 500
	  In: formData
	*/
	Username *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostOauth2TokenParams() beforehand.
func (o *PostOauth2TokenParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(PostOauth2TokenMaxParseMemory); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	fdClientID, fdhkClientID, _ := fds.GetOK("client_id")
	if err := o.bindClientID(fdClientID, fdhkClientID, route.Formats); err != nil {
		res = append(res, err)
	}

	fdClientSecret, fdhkClientSecret, _ := fds.GetOK("client_secret")
	if err := o.bindClientSecret(fdClientSecret, fdhkClientSecret, route.Formats); err != nil {
		res = append(res, err)
	}

	fdCode, fdhkCode, _ := fds.GetOK("code")
	if err := o.bindCode(fdCode, fdhkCode, route.Formats); err != nil {
		res = append(res, err)
	}

	fdCodeVerifier, fdhkCodeVerifier, _ := fds.GetOK("code_verifier")
	if err := o.bindCodeVerifier(fdCodeVerifier, fdhkCodeVerifier, route.Formats); err != nil {
		res = append(res, err)
	}

	fdGrantType, fdhkGrantType, _ := fds.GetOK("grant_type")
	if err := o.bindGrantType(fdGrantType, fdhkGrantType, route.Formats); err != nil {
		res = append(res, err)
	}

	fdPassword, fdhkPassword, _ := fds.GetOK("password")
	if err := o.bindPassword(fdPassword, fdhkPassword, route.Formats); err != nil {
		res = append(res, err)
	}

	fdRedirectURI, fdhkRedirectURI, _ := fds.GetOK("redirect_uri")
	if err := o.bindRedirectURI(fdRedirectURI, fdhkRedirectURI, route.Formats); err != nil {
		res = append(res, err)
	}

	fdRefreshToken, fdhkRefreshToken, _ := fds.GetOK("refresh_token")
	if err := o.bindRefreshToken(fdRefreshToken, fdhkRefreshToken, route.Formats); err != nil {
		res = append(res, err)
	}

	fdUsername, fdhkUsername, _ := fds.GetOK("username")
	if err := o.bindUsername(fdUsername, fdhkUsername, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindClientID binds and validates parameter ClientID from formData.
func (o *PostOauth2TokenParams) bindClientID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("client_id", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("client_id", "formData", raw); err != nil {
		return err
	}
	o.ClientID = raw

	return nil
}

// bindClientSecret binds and validates parameter ClientSecret from formData.
func (o *PostOauth2TokenParams) bindClientSecret(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ClientSecret = &raw

	return nil
}

// bindCode binds and validates parameter Code from formData.
func (o *PostOauth2TokenParams) bindCode(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Code = &raw

	return nil
}

// bindCodeVerifier binds and validates parameter CodeVerifier from formData.
func (o *PostOauth2TokenParams) bindCodeVerifier(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.CodeVerifier = &raw

	return nil
}

// bindGrantType binds and validates parameter GrantType from formData.
func (o *PostOauth2TokenParams) bindGrantType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.GrantType = &raw

	if err := o.validateGrantType(formats); err != nil {
		return err
	}

	return nil
}

// validateGrantType carries on validations for parameter GrantType
func (o *PostOauth2TokenParams) validateGrantType(formats strfmt.Registry) error {

	if err := validate.EnumCase("grant_type", "formData", *o.GrantType, []interface{}{"authorization_code", "password", "client_credentials", "refresh_token"}, true); err != nil {
		return err
	}

	return nil
}

// bindPassword binds and validates parameter Password from formData.
func (o *PostOauth2TokenParams) bindPassword(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Password = &raw

	if err := o.validatePassword(formats); err != nil {
		return err
	}

	return nil
}

// validatePassword carries on validations for parameter Password
func (o *PostOauth2TokenParams) validatePassword(formats strfmt.Registry) error {

	if err := validate.MinLength("password", "formData", *o.Password, 6); err != nil {
		return err
	}

	if err := validate.MaxLength("password", "formData", *o.Password, 100); err != nil {
		return err
	}

	return nil
}

// bindRedirectURI binds and validates parameter RedirectURI from formData.
func (o *PostOauth2TokenParams) bindRedirectURI(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.RedirectURI = &raw

	return nil
}

// bindRefreshToken binds and validates parameter RefreshToken from formData.
func (o *PostOauth2TokenParams) bindRefreshToken(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.RefreshToken = &raw

	return nil
}

// bindUsername binds and validates parameter Username from formData.
func (o *PostOauth2TokenParams) bindUsername(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Username = &raw

	if err := o.validateUsername(formats); err != nil {
		return err
	}

	return nil
}

// validateUsername carries on validations for parameter Username
func (o *PostOauth2TokenParams) validateUsername(formats strfmt.Registry) error {

	if err := validate.MaxLength("username", "formData", *o.Username, 500); err != nil {
		return err
	}

	return nil
}
