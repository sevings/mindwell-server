// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostAccountRecoverPasswordMaxParseMemory sets the maximum size in bytes for
// the multipart form parser for this operation.
//
// The default value is 32 MB.
// The multipart parser stores up to this + 10MB.
var PostAccountRecoverPasswordMaxParseMemory int64 = 32 << 20

// NewPostAccountRecoverPasswordParams creates a new PostAccountRecoverPasswordParams object
//
// There are no default values defined in the spec.
func NewPostAccountRecoverPasswordParams() PostAccountRecoverPasswordParams {

	return PostAccountRecoverPasswordParams{}
}

// PostAccountRecoverPasswordParams contains all the bound params for the post account recover password operation
// typically these are obtained from a http.Request
//
// swagger:parameters PostAccountRecoverPassword
type PostAccountRecoverPasswordParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  Max Length: 64
	  Min Length: 64
	  In: formData
	*/
	Code string
	/*
	  Required: true
	  In: formData
	*/
	Date int64
	/*
	  Required: true
	  Max Length: 500
	  Pattern: .+@.+
	  In: formData
	*/
	Email string
	/*
	  Required: true
	  Max Length: 100
	  Min Length: 6
	  In: formData
	*/
	Password string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostAccountRecoverPasswordParams() beforehand.
func (o *PostAccountRecoverPasswordParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(PostAccountRecoverPasswordMaxParseMemory); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	fdCode, fdhkCode, _ := fds.GetOK("code")
	if err := o.bindCode(fdCode, fdhkCode, route.Formats); err != nil {
		res = append(res, err)
	}

	fdDate, fdhkDate, _ := fds.GetOK("date")
	if err := o.bindDate(fdDate, fdhkDate, route.Formats); err != nil {
		res = append(res, err)
	}

	fdEmail, fdhkEmail, _ := fds.GetOK("email")
	if err := o.bindEmail(fdEmail, fdhkEmail, route.Formats); err != nil {
		res = append(res, err)
	}

	fdPassword, fdhkPassword, _ := fds.GetOK("password")
	if err := o.bindPassword(fdPassword, fdhkPassword, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCode binds and validates parameter Code from formData.
func (o *PostAccountRecoverPasswordParams) bindCode(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("code", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("code", "formData", raw); err != nil {
		return err
	}
	o.Code = raw

	if err := o.validateCode(formats); err != nil {
		return err
	}

	return nil
}

// validateCode carries on validations for parameter Code
func (o *PostAccountRecoverPasswordParams) validateCode(formats strfmt.Registry) error {

	if err := validate.MinLength("code", "formData", o.Code, 64); err != nil {
		return err
	}

	if err := validate.MaxLength("code", "formData", o.Code, 64); err != nil {
		return err
	}

	return nil
}

// bindDate binds and validates parameter Date from formData.
func (o *PostAccountRecoverPasswordParams) bindDate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("date", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("date", "formData", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("date", "formData", "int64", raw)
	}
	o.Date = value

	return nil
}

// bindEmail binds and validates parameter Email from formData.
func (o *PostAccountRecoverPasswordParams) bindEmail(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("email", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("email", "formData", raw); err != nil {
		return err
	}
	o.Email = raw

	if err := o.validateEmail(formats); err != nil {
		return err
	}

	return nil
}

// validateEmail carries on validations for parameter Email
func (o *PostAccountRecoverPasswordParams) validateEmail(formats strfmt.Registry) error {

	if err := validate.MaxLength("email", "formData", o.Email, 500); err != nil {
		return err
	}

	if err := validate.Pattern("email", "formData", o.Email, `.+@.+`); err != nil {
		return err
	}

	return nil
}

// bindPassword binds and validates parameter Password from formData.
func (o *PostAccountRecoverPasswordParams) bindPassword(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("password", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("password", "formData", raw); err != nil {
		return err
	}
	o.Password = raw

	if err := o.validatePassword(formats); err != nil {
		return err
	}

	return nil
}

// validatePassword carries on validations for parameter Password
func (o *PostAccountRecoverPasswordParams) validatePassword(formats strfmt.Registry) error {

	if err := validate.MinLength("password", "formData", o.Password, 6); err != nil {
		return err
	}

	if err := validate.MaxLength("password", "formData", o.Password, 100); err != nil {
		return err
	}

	return nil
}
