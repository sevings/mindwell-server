// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/sevings/mindwell-server/models"
)

// GetAccountSettingsTelegramHandlerFunc turns a function with the right signature into a get account settings telegram handler
type GetAccountSettingsTelegramHandlerFunc func(GetAccountSettingsTelegramParams, *models.UserID) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAccountSettingsTelegramHandlerFunc) Handle(params GetAccountSettingsTelegramParams, principal *models.UserID) middleware.Responder {
	return fn(params, principal)
}

// GetAccountSettingsTelegramHandler interface for that can handle valid get account settings telegram params
type GetAccountSettingsTelegramHandler interface {
	Handle(GetAccountSettingsTelegramParams, *models.UserID) middleware.Responder
}

// NewGetAccountSettingsTelegram creates a new http.Handler for the get account settings telegram operation
func NewGetAccountSettingsTelegram(ctx *middleware.Context, handler GetAccountSettingsTelegramHandler) *GetAccountSettingsTelegram {
	return &GetAccountSettingsTelegram{Context: ctx, Handler: handler}
}

/* GetAccountSettingsTelegram swagger:route GET /account/settings/telegram account getAccountSettingsTelegram

GetAccountSettingsTelegram get account settings telegram API

*/
type GetAccountSettingsTelegram struct {
	Context *middleware.Context
	Handler GetAccountSettingsTelegramHandler
}

func (o *GetAccountSettingsTelegram) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAccountSettingsTelegramParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.UserID
	if uprinc != nil {
		principal = uprinc.(*models.UserID) // this is really a models.UserID, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetAccountSettingsTelegramOKBody get account settings telegram o k body
//
// swagger:model GetAccountSettingsTelegramOKBody
type GetAccountSettingsTelegramOKBody struct {

	// comments
	Comments bool `json:"comments,omitempty"`

	// followers
	Followers bool `json:"followers,omitempty"`

	// invites
	Invites bool `json:"invites,omitempty"`

	// messages
	Messages bool `json:"messages,omitempty"`
}

// Validate validates this get account settings telegram o k body
func (o *GetAccountSettingsTelegramOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get account settings telegram o k body based on context it is used
func (o *GetAccountSettingsTelegramOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAccountSettingsTelegramOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAccountSettingsTelegramOKBody) UnmarshalBinary(b []byte) error {
	var res GetAccountSettingsTelegramOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
