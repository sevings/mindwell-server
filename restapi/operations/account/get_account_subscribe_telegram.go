// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/sevings/mindwell-server/models"
)

// GetAccountSubscribeTelegramHandlerFunc turns a function with the right signature into a get account subscribe telegram handler
type GetAccountSubscribeTelegramHandlerFunc func(GetAccountSubscribeTelegramParams, *models.UserID) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAccountSubscribeTelegramHandlerFunc) Handle(params GetAccountSubscribeTelegramParams, principal *models.UserID) middleware.Responder {
	return fn(params, principal)
}

// GetAccountSubscribeTelegramHandler interface for that can handle valid get account subscribe telegram params
type GetAccountSubscribeTelegramHandler interface {
	Handle(GetAccountSubscribeTelegramParams, *models.UserID) middleware.Responder
}

// NewGetAccountSubscribeTelegram creates a new http.Handler for the get account subscribe telegram operation
func NewGetAccountSubscribeTelegram(ctx *middleware.Context, handler GetAccountSubscribeTelegramHandler) *GetAccountSubscribeTelegram {
	return &GetAccountSubscribeTelegram{Context: ctx, Handler: handler}
}

/* GetAccountSubscribeTelegram swagger:route GET /account/subscribe/telegram account getAccountSubscribeTelegram

GetAccountSubscribeTelegram get account subscribe telegram API

*/
type GetAccountSubscribeTelegram struct {
	Context *middleware.Context
	Handler GetAccountSubscribeTelegramHandler
}

func (o *GetAccountSubscribeTelegram) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAccountSubscribeTelegramParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.UserID
	if uprinc != nil {
		principal = uprinc.(*models.UserID) // this is really a models.UserID, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetAccountSubscribeTelegramOKBody get account subscribe telegram o k body
//
// swagger:model GetAccountSubscribeTelegramOKBody
type GetAccountSubscribeTelegramOKBody struct {

	// token
	Token string `json:"token,omitempty"`
}

// Validate validates this get account subscribe telegram o k body
func (o *GetAccountSubscribeTelegramOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get account subscribe telegram o k body based on context it is used
func (o *GetAccountSubscribeTelegramOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAccountSubscribeTelegramOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAccountSubscribeTelegramOKBody) UnmarshalBinary(b []byte) error {
	var res GetAccountSubscribeTelegramOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
