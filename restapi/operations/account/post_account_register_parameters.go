// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostAccountRegisterParams creates a new PostAccountRegisterParams object
// with the default values initialized.
func NewPostAccountRegisterParams() PostAccountRegisterParams {

	var (
		// initialize parameters with default values

		cityDefault    = string("")
		countryDefault = string("")

		genderDefault = string("not set")
	)

	return PostAccountRegisterParams{
		City: &cityDefault,

		Country: &countryDefault,

		Gender: &genderDefault,
	}
}

// PostAccountRegisterParams contains all the bound params for the post account register operation
// typically these are obtained from a http.Request
//
// swagger:parameters PostAccountRegister
type PostAccountRegisterParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: formData
	*/
	Birthday *string
	/*
	  Max Length: 50
	  In: formData
	  Default: ""
	*/
	City *string
	/*
	  Max Length: 50
	  In: formData
	  Default: ""
	*/
	Country *string
	/*
	  Required: true
	  Max Length: 500
	  Pattern: .+@.+
	  In: formData
	*/
	Email string
	/*
	  In: formData
	  Default: "not set"
	*/
	Gender *string
	/*
	  Required: true
	  Max Length: 20
	  Min Length: 1
	  Pattern: ^[a-zA-Z][a-zA-Z0-9\-_]*$
	  In: formData
	*/
	Name string
	/*
	  Required: true
	  Max Length: 100
	  Min Length: 6
	  In: formData
	*/
	Password string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostAccountRegisterParams() beforehand.
func (o *PostAccountRegisterParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	fdBirthday, fdhkBirthday, _ := fds.GetOK("birthday")
	if err := o.bindBirthday(fdBirthday, fdhkBirthday, route.Formats); err != nil {
		res = append(res, err)
	}

	fdCity, fdhkCity, _ := fds.GetOK("city")
	if err := o.bindCity(fdCity, fdhkCity, route.Formats); err != nil {
		res = append(res, err)
	}

	fdCountry, fdhkCountry, _ := fds.GetOK("country")
	if err := o.bindCountry(fdCountry, fdhkCountry, route.Formats); err != nil {
		res = append(res, err)
	}

	fdEmail, fdhkEmail, _ := fds.GetOK("email")
	if err := o.bindEmail(fdEmail, fdhkEmail, route.Formats); err != nil {
		res = append(res, err)
	}

	fdGender, fdhkGender, _ := fds.GetOK("gender")
	if err := o.bindGender(fdGender, fdhkGender, route.Formats); err != nil {
		res = append(res, err)
	}

	fdName, fdhkName, _ := fds.GetOK("name")
	if err := o.bindName(fdName, fdhkName, route.Formats); err != nil {
		res = append(res, err)
	}

	fdPassword, fdhkPassword, _ := fds.GetOK("password")
	if err := o.bindPassword(fdPassword, fdhkPassword, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindBirthday binds and validates parameter Birthday from formData.
func (o *PostAccountRegisterParams) bindBirthday(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Birthday = &raw

	return nil
}

// bindCity binds and validates parameter City from formData.
func (o *PostAccountRegisterParams) bindCity(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewPostAccountRegisterParams()
		return nil
	}

	o.City = &raw

	if err := o.validateCity(formats); err != nil {
		return err
	}

	return nil
}

// validateCity carries on validations for parameter City
func (o *PostAccountRegisterParams) validateCity(formats strfmt.Registry) error {

	if err := validate.MaxLength("city", "formData", (*o.City), 50); err != nil {
		return err
	}

	return nil
}

// bindCountry binds and validates parameter Country from formData.
func (o *PostAccountRegisterParams) bindCountry(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewPostAccountRegisterParams()
		return nil
	}

	o.Country = &raw

	if err := o.validateCountry(formats); err != nil {
		return err
	}

	return nil
}

// validateCountry carries on validations for parameter Country
func (o *PostAccountRegisterParams) validateCountry(formats strfmt.Registry) error {

	if err := validate.MaxLength("country", "formData", (*o.Country), 50); err != nil {
		return err
	}

	return nil
}

// bindEmail binds and validates parameter Email from formData.
func (o *PostAccountRegisterParams) bindEmail(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("email", "formData")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("email", "formData", raw); err != nil {
		return err
	}

	o.Email = raw

	if err := o.validateEmail(formats); err != nil {
		return err
	}

	return nil
}

// validateEmail carries on validations for parameter Email
func (o *PostAccountRegisterParams) validateEmail(formats strfmt.Registry) error {

	if err := validate.MaxLength("email", "formData", o.Email, 500); err != nil {
		return err
	}

	if err := validate.Pattern("email", "formData", o.Email, `.+@.+`); err != nil {
		return err
	}

	return nil
}

// bindGender binds and validates parameter Gender from formData.
func (o *PostAccountRegisterParams) bindGender(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewPostAccountRegisterParams()
		return nil
	}

	o.Gender = &raw

	if err := o.validateGender(formats); err != nil {
		return err
	}

	return nil
}

// validateGender carries on validations for parameter Gender
func (o *PostAccountRegisterParams) validateGender(formats strfmt.Registry) error {

	if err := validate.Enum("gender", "formData", *o.Gender, []interface{}{"not set", "male", "female"}); err != nil {
		return err
	}

	return nil
}

// bindName binds and validates parameter Name from formData.
func (o *PostAccountRegisterParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("name", "formData")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("name", "formData", raw); err != nil {
		return err
	}

	o.Name = raw

	if err := o.validateName(formats); err != nil {
		return err
	}

	return nil
}

// validateName carries on validations for parameter Name
func (o *PostAccountRegisterParams) validateName(formats strfmt.Registry) error {

	if err := validate.MinLength("name", "formData", o.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "formData", o.Name, 20); err != nil {
		return err
	}

	if err := validate.Pattern("name", "formData", o.Name, `^[a-zA-Z][a-zA-Z0-9\-_]*$`); err != nil {
		return err
	}

	return nil
}

// bindPassword binds and validates parameter Password from formData.
func (o *PostAccountRegisterParams) bindPassword(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("password", "formData")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("password", "formData", raw); err != nil {
		return err
	}

	o.Password = raw

	if err := o.validatePassword(formats); err != nil {
		return err
	}

	return nil
}

// validatePassword carries on validations for parameter Password
func (o *PostAccountRegisterParams) validatePassword(formats strfmt.Registry) error {

	if err := validate.MinLength("password", "formData", o.Password, 6); err != nil {
		return err
	}

	if err := validate.MaxLength("password", "formData", o.Password, 100); err != nil {
		return err
	}

	return nil
}
