// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/sevings/mindwell-server/models"
)

// GetOauth2AuthHandlerFunc turns a function with the right signature into a get oauth2 auth handler
type GetOauth2AuthHandlerFunc func(GetOauth2AuthParams, *models.UserID) middleware.Responder

// Handle executing the request and returning a response
func (fn GetOauth2AuthHandlerFunc) Handle(params GetOauth2AuthParams, principal *models.UserID) middleware.Responder {
	return fn(params, principal)
}

// GetOauth2AuthHandler interface for that can handle valid get oauth2 auth params
type GetOauth2AuthHandler interface {
	Handle(GetOauth2AuthParams, *models.UserID) middleware.Responder
}

// NewGetOauth2Auth creates a new http.Handler for the get oauth2 auth operation
func NewGetOauth2Auth(ctx *middleware.Context, handler GetOauth2AuthHandler) *GetOauth2Auth {
	return &GetOauth2Auth{Context: ctx, Handler: handler}
}

/* GetOauth2Auth swagger:route GET /oauth2/auth account getOauth2Auth

GetOauth2Auth get oauth2 auth API

*/
type GetOauth2Auth struct {
	Context *middleware.Context
	Handler GetOauth2AuthHandler
}

func (o *GetOauth2Auth) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetOauth2AuthParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.UserID
	if uprinc != nil {
		principal = uprinc.(*models.UserID) // this is really a models.UserID, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetOauth2AuthBadRequestBody get oauth2 auth bad request body
//
// swagger:model GetOauth2AuthBadRequestBody
type GetOauth2AuthBadRequestBody struct {

	// error
	// Enum: [invalid_redirect access_denied invalid_request unauthorized_client unsupported_response_type invalid_scope server_error temporarily_unavailable]
	Error string `json:"error,omitempty"`
}

// Validate validates this get oauth2 auth bad request body
func (o *GetOauth2AuthBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getOauth2AuthBadRequestBodyTypeErrorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["invalid_redirect","access_denied","invalid_request","unauthorized_client","unsupported_response_type","invalid_scope","server_error","temporarily_unavailable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOauth2AuthBadRequestBodyTypeErrorPropEnum = append(getOauth2AuthBadRequestBodyTypeErrorPropEnum, v)
	}
}

const (

	// GetOauth2AuthBadRequestBodyErrorInvalidRedirect captures enum value "invalid_redirect"
	GetOauth2AuthBadRequestBodyErrorInvalidRedirect string = "invalid_redirect"

	// GetOauth2AuthBadRequestBodyErrorAccessDenied captures enum value "access_denied"
	GetOauth2AuthBadRequestBodyErrorAccessDenied string = "access_denied"

	// GetOauth2AuthBadRequestBodyErrorInvalidRequest captures enum value "invalid_request"
	GetOauth2AuthBadRequestBodyErrorInvalidRequest string = "invalid_request"

	// GetOauth2AuthBadRequestBodyErrorUnauthorizedClient captures enum value "unauthorized_client"
	GetOauth2AuthBadRequestBodyErrorUnauthorizedClient string = "unauthorized_client"

	// GetOauth2AuthBadRequestBodyErrorUnsupportedResponseType captures enum value "unsupported_response_type"
	GetOauth2AuthBadRequestBodyErrorUnsupportedResponseType string = "unsupported_response_type"

	// GetOauth2AuthBadRequestBodyErrorInvalidScope captures enum value "invalid_scope"
	GetOauth2AuthBadRequestBodyErrorInvalidScope string = "invalid_scope"

	// GetOauth2AuthBadRequestBodyErrorServerError captures enum value "server_error"
	GetOauth2AuthBadRequestBodyErrorServerError string = "server_error"

	// GetOauth2AuthBadRequestBodyErrorTemporarilyUnavailable captures enum value "temporarily_unavailable"
	GetOauth2AuthBadRequestBodyErrorTemporarilyUnavailable string = "temporarily_unavailable"
)

// prop value enum
func (o *GetOauth2AuthBadRequestBody) validateErrorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOauth2AuthBadRequestBodyTypeErrorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOauth2AuthBadRequestBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	// value enum
	if err := o.validateErrorEnum("getOauth2AuthBadRequest"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get oauth2 auth bad request body based on context it is used
func (o *GetOauth2AuthBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOauth2AuthBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOauth2AuthBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetOauth2AuthBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetOauth2AuthOKBody get oauth2 auth o k body
//
// swagger:model GetOauth2AuthOKBody
type GetOauth2AuthOKBody struct {

	// code
	Code string `json:"code,omitempty"`

	// state
	State string `json:"state,omitempty"`
}

// Validate validates this get oauth2 auth o k body
func (o *GetOauth2AuthOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get oauth2 auth o k body based on context it is used
func (o *GetOauth2AuthOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOauth2AuthOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOauth2AuthOKBody) UnmarshalBinary(b []byte) error {
	var res GetOauth2AuthOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetOauth2AuthUnauthorizedBody get oauth2 auth unauthorized body
//
// swagger:model GetOauth2AuthUnauthorizedBody
type GetOauth2AuthUnauthorizedBody struct {

	// error
	// Enum: [invalid_client]
	Error string `json:"error,omitempty"`
}

// Validate validates this get oauth2 auth unauthorized body
func (o *GetOauth2AuthUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getOauth2AuthUnauthorizedBodyTypeErrorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["invalid_client"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOauth2AuthUnauthorizedBodyTypeErrorPropEnum = append(getOauth2AuthUnauthorizedBodyTypeErrorPropEnum, v)
	}
}

const (

	// GetOauth2AuthUnauthorizedBodyErrorInvalidClient captures enum value "invalid_client"
	GetOauth2AuthUnauthorizedBodyErrorInvalidClient string = "invalid_client"
)

// prop value enum
func (o *GetOauth2AuthUnauthorizedBody) validateErrorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOauth2AuthUnauthorizedBodyTypeErrorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOauth2AuthUnauthorizedBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	// value enum
	if err := o.validateErrorEnum("getOauth2AuthUnauthorized"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get oauth2 auth unauthorized body based on context it is used
func (o *GetOauth2AuthUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOauth2AuthUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOauth2AuthUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetOauth2AuthUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
