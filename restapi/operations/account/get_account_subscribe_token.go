// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/sevings/mindwell-server/models"
)

// GetAccountSubscribeTokenHandlerFunc turns a function with the right signature into a get account subscribe token handler
type GetAccountSubscribeTokenHandlerFunc func(GetAccountSubscribeTokenParams, *models.UserID) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAccountSubscribeTokenHandlerFunc) Handle(params GetAccountSubscribeTokenParams, principal *models.UserID) middleware.Responder {
	return fn(params, principal)
}

// GetAccountSubscribeTokenHandler interface for that can handle valid get account subscribe token params
type GetAccountSubscribeTokenHandler interface {
	Handle(GetAccountSubscribeTokenParams, *models.UserID) middleware.Responder
}

// NewGetAccountSubscribeToken creates a new http.Handler for the get account subscribe token operation
func NewGetAccountSubscribeToken(ctx *middleware.Context, handler GetAccountSubscribeTokenHandler) *GetAccountSubscribeToken {
	return &GetAccountSubscribeToken{Context: ctx, Handler: handler}
}

/* GetAccountSubscribeToken swagger:route GET /account/subscribe/token account getAccountSubscribeToken

GetAccountSubscribeToken get account subscribe token API

*/
type GetAccountSubscribeToken struct {
	Context *middleware.Context
	Handler GetAccountSubscribeTokenHandler
}

func (o *GetAccountSubscribeToken) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetAccountSubscribeTokenParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.UserID
	if uprinc != nil {
		principal = uprinc.(*models.UserID) // this is really a models.UserID, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetAccountSubscribeTokenOKBody get account subscribe token o k body
//
// swagger:model GetAccountSubscribeTokenOKBody
type GetAccountSubscribeTokenOKBody struct {

	// token
	Token string `json:"token,omitempty"`
}

// Validate validates this get account subscribe token o k body
func (o *GetAccountSubscribeTokenOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get account subscribe token o k body based on context it is used
func (o *GetAccountSubscribeTokenOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAccountSubscribeTokenOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAccountSubscribeTokenOKBody) UnmarshalBinary(b []byte) error {
	var res GetAccountSubscribeTokenOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
