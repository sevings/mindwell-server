// Code generated by go-swagger; DO NOT EDIT.

package oauth2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetOauth2DenyParams creates a new GetOauth2DenyParams object
//
// There are no default values defined in the spec.
func NewGetOauth2DenyParams() GetOauth2DenyParams {

	return GetOauth2DenyParams{}
}

// GetOauth2DenyParams contains all the bound params for the get oauth2 deny operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetOauth2Deny
type GetOauth2DenyParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: query
	*/
	ClientID int64
	/*
	  Required: true
	  Max Length: 500
	  In: query
	*/
	RedirectURI string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetOauth2DenyParams() beforehand.
func (o *GetOauth2DenyParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qClientID, qhkClientID, _ := qs.GetOK("client_id")
	if err := o.bindClientID(qClientID, qhkClientID, route.Formats); err != nil {
		res = append(res, err)
	}

	qRedirectURI, qhkRedirectURI, _ := qs.GetOK("redirect_uri")
	if err := o.bindRedirectURI(qRedirectURI, qhkRedirectURI, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindClientID binds and validates parameter ClientID from query.
func (o *GetOauth2DenyParams) bindClientID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("client_id", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("client_id", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("client_id", "query", "int64", raw)
	}
	o.ClientID = value

	return nil
}

// bindRedirectURI binds and validates parameter RedirectURI from query.
func (o *GetOauth2DenyParams) bindRedirectURI(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("redirect_uri", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("redirect_uri", "query", raw); err != nil {
		return err
	}
	o.RedirectURI = raw

	if err := o.validateRedirectURI(formats); err != nil {
		return err
	}

	return nil
}

// validateRedirectURI carries on validations for parameter RedirectURI
func (o *GetOauth2DenyParams) validateRedirectURI(formats strfmt.Registry) error {

	if err := validate.MaxLength("redirect_uri", "query", o.RedirectURI, 500); err != nil {
		return err
	}

	return nil
}
