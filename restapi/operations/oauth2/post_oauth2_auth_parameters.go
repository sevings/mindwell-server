// Code generated by go-swagger; DO NOT EDIT.

package oauth2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostOauth2AuthMaxParseMemory sets the maximum size in bytes for
// the multipart form parser for this operation.
//
// The default value is 32 MB.
// The multipart parser stores up to this + 10MB.
var PostOauth2AuthMaxParseMemory int64 = 32 << 20

// NewPostOauth2AuthParams creates a new PostOauth2AuthParams object
// with the default values initialized.
func NewPostOauth2AuthParams() PostOauth2AuthParams {

	var (
		// initialize parameters with default values

		allowedDefault = bool(false)
	)

	return PostOauth2AuthParams{
		Allowed: &allowedDefault,
	}
}

// PostOauth2AuthParams contains all the bound params for the post oauth2 auth operation
// typically these are obtained from a http.Request
//
// swagger:parameters PostOauth2Auth
type PostOauth2AuthParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: formData
	  Default: false
	*/
	Allowed *bool
	/*
	  Required: true
	  In: formData
	*/
	ClientID int64
	/*
	  Max Length: 128
	  Min Length: 43
	  In: formData
	*/
	CodeChallenge *string
	/*
	  In: formData
	*/
	CodeChallengeMethod *string
	/*
	  Required: true
	  Max Length: 500
	  In: formData
	*/
	RedirectURI string
	/*
	  Required: true
	  In: formData
	*/
	ResponseType string
	/*
	  Required: true
	  In: formData
	  Collection Format: multi
	*/
	Scope []string
	/*
	  Max Length: 500
	  In: formData
	*/
	State *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostOauth2AuthParams() beforehand.
func (o *PostOauth2AuthParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(PostOauth2AuthMaxParseMemory); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	fdAllowed, fdhkAllowed, _ := fds.GetOK("allowed")
	if err := o.bindAllowed(fdAllowed, fdhkAllowed, route.Formats); err != nil {
		res = append(res, err)
	}

	fdClientID, fdhkClientID, _ := fds.GetOK("client_id")
	if err := o.bindClientID(fdClientID, fdhkClientID, route.Formats); err != nil {
		res = append(res, err)
	}

	fdCodeChallenge, fdhkCodeChallenge, _ := fds.GetOK("code_challenge")
	if err := o.bindCodeChallenge(fdCodeChallenge, fdhkCodeChallenge, route.Formats); err != nil {
		res = append(res, err)
	}

	fdCodeChallengeMethod, fdhkCodeChallengeMethod, _ := fds.GetOK("code_challenge_method")
	if err := o.bindCodeChallengeMethod(fdCodeChallengeMethod, fdhkCodeChallengeMethod, route.Formats); err != nil {
		res = append(res, err)
	}

	fdRedirectURI, fdhkRedirectURI, _ := fds.GetOK("redirect_uri")
	if err := o.bindRedirectURI(fdRedirectURI, fdhkRedirectURI, route.Formats); err != nil {
		res = append(res, err)
	}

	fdResponseType, fdhkResponseType, _ := fds.GetOK("response_type")
	if err := o.bindResponseType(fdResponseType, fdhkResponseType, route.Formats); err != nil {
		res = append(res, err)
	}

	fdScope, fdhkScope, _ := fds.GetOK("scope")
	if err := o.bindScope(fdScope, fdhkScope, route.Formats); err != nil {
		res = append(res, err)
	}

	fdState, fdhkState, _ := fds.GetOK("state")
	if err := o.bindState(fdState, fdhkState, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAllowed binds and validates parameter Allowed from formData.
func (o *PostOauth2AuthParams) bindAllowed(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewPostOauth2AuthParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("allowed", "formData", "bool", raw)
	}
	o.Allowed = &value

	return nil
}

// bindClientID binds and validates parameter ClientID from formData.
func (o *PostOauth2AuthParams) bindClientID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("client_id", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("client_id", "formData", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("client_id", "formData", "int64", raw)
	}
	o.ClientID = value

	return nil
}

// bindCodeChallenge binds and validates parameter CodeChallenge from formData.
func (o *PostOauth2AuthParams) bindCodeChallenge(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.CodeChallenge = &raw

	if err := o.validateCodeChallenge(formats); err != nil {
		return err
	}

	return nil
}

// validateCodeChallenge carries on validations for parameter CodeChallenge
func (o *PostOauth2AuthParams) validateCodeChallenge(formats strfmt.Registry) error {

	if err := validate.MinLength("code_challenge", "formData", *o.CodeChallenge, 43); err != nil {
		return err
	}

	if err := validate.MaxLength("code_challenge", "formData", *o.CodeChallenge, 128); err != nil {
		return err
	}

	return nil
}

// bindCodeChallengeMethod binds and validates parameter CodeChallengeMethod from formData.
func (o *PostOauth2AuthParams) bindCodeChallengeMethod(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.CodeChallengeMethod = &raw

	if err := o.validateCodeChallengeMethod(formats); err != nil {
		return err
	}

	return nil
}

// validateCodeChallengeMethod carries on validations for parameter CodeChallengeMethod
func (o *PostOauth2AuthParams) validateCodeChallengeMethod(formats strfmt.Registry) error {

	if err := validate.EnumCase("code_challenge_method", "formData", *o.CodeChallengeMethod, []interface{}{"plain", "S256"}, true); err != nil {
		return err
	}

	return nil
}

// bindRedirectURI binds and validates parameter RedirectURI from formData.
func (o *PostOauth2AuthParams) bindRedirectURI(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("redirect_uri", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("redirect_uri", "formData", raw); err != nil {
		return err
	}
	o.RedirectURI = raw

	if err := o.validateRedirectURI(formats); err != nil {
		return err
	}

	return nil
}

// validateRedirectURI carries on validations for parameter RedirectURI
func (o *PostOauth2AuthParams) validateRedirectURI(formats strfmt.Registry) error {

	if err := validate.MaxLength("redirect_uri", "formData", o.RedirectURI, 500); err != nil {
		return err
	}

	return nil
}

// bindResponseType binds and validates parameter ResponseType from formData.
func (o *PostOauth2AuthParams) bindResponseType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("response_type", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("response_type", "formData", raw); err != nil {
		return err
	}
	o.ResponseType = raw

	if err := o.validateResponseType(formats); err != nil {
		return err
	}

	return nil
}

// validateResponseType carries on validations for parameter ResponseType
func (o *PostOauth2AuthParams) validateResponseType(formats strfmt.Registry) error {

	if err := validate.EnumCase("response_type", "formData", o.ResponseType, []interface{}{"code"}, true); err != nil {
		return err
	}

	return nil
}

// bindScope binds and validates array parameter Scope from formData.
//
// Arrays are parsed according to CollectionFormat: "multi" (defaults to "csv" when empty).
func (o *PostOauth2AuthParams) bindScope(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("scope", "formData", rawData)
	}
	// CollectionFormat: multi
	scopeIC := rawData
	if len(scopeIC) == 0 {
		return errors.Required("scope", "formData", scopeIC)
	}

	var scopeIR []string
	for _, scopeIV := range scopeIC {
		scopeI := scopeIV

		scopeIR = append(scopeIR, scopeI)
	}

	o.Scope = scopeIR

	return nil
}

// bindState binds and validates parameter State from formData.
func (o *PostOauth2AuthParams) bindState(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.State = &raw

	if err := o.validateState(formats); err != nil {
		return err
	}

	return nil
}

// validateState carries on validations for parameter State
func (o *PostOauth2AuthParams) validateState(formats strfmt.Registry) error {

	if err := validate.MaxLength("state", "formData", *o.State, 500); err != nil {
		return err
	}

	return nil
}
