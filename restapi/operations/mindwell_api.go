// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/sevings/mindwell-server/models"
	"github.com/sevings/mindwell-server/restapi/operations/account"
	"github.com/sevings/mindwell-server/restapi/operations/comments"
	"github.com/sevings/mindwell-server/restapi/operations/design"
	"github.com/sevings/mindwell-server/restapi/operations/entries"
	"github.com/sevings/mindwell-server/restapi/operations/favorites"
	"github.com/sevings/mindwell-server/restapi/operations/me"
	"github.com/sevings/mindwell-server/restapi/operations/relations"
	"github.com/sevings/mindwell-server/restapi/operations/users"
	"github.com/sevings/mindwell-server/restapi/operations/votes"
	"github.com/sevings/mindwell-server/restapi/operations/watchings"
)

// NewMindwellAPI creates a new Mindwell instance
func NewMindwellAPI(spec *loads.Document) *MindwellAPI {
	return &MindwellAPI{
		handlers:              make(map[string]map[string]http.Handler),
		formats:               strfmt.Default,
		defaultConsumes:       "application/json",
		defaultProduces:       "application/json",
		ServerShutdown:        func() {},
		spec:                  spec,
		ServeError:            errors.ServeError,
		BasicAuthenticator:    security.BasicAuth,
		APIKeyAuthenticator:   security.APIKeyAuth,
		BearerAuthenticator:   security.BearerAuth,
		JSONConsumer:          runtime.JSONConsumer(),
		UrlformConsumer:       runtime.DiscardConsumer,
		MultipartformConsumer: runtime.DiscardConsumer,
		JSONProducer:          runtime.JSONProducer(),
		CommentsDeleteCommentsIDHandler: comments.DeleteCommentsIDHandlerFunc(func(params comments.DeleteCommentsIDParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation CommentsDeleteCommentsID has not yet been implemented")
		}),
		EntriesDeleteEntriesIDHandler: entries.DeleteEntriesIDHandlerFunc(func(params entries.DeleteEntriesIDParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesDeleteEntriesID has not yet been implemented")
		}),
		FavoritesDeleteEntriesIDFavoriteHandler: favorites.DeleteEntriesIDFavoriteHandlerFunc(func(params favorites.DeleteEntriesIDFavoriteParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation FavoritesDeleteEntriesIDFavorite has not yet been implemented")
		}),
		VotesDeleteEntriesIDVoteHandler: votes.DeleteEntriesIDVoteHandlerFunc(func(params votes.DeleteEntriesIDVoteParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation VotesDeleteEntriesIDVote has not yet been implemented")
		}),
		WatchingsDeleteEntriesIDWatchingHandler: watchings.DeleteEntriesIDWatchingHandlerFunc(func(params watchings.DeleteEntriesIDWatchingParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation WatchingsDeleteEntriesIDWatching has not yet been implemented")
		}),
		RelationsDeleteRelationsFromIDHandler: relations.DeleteRelationsFromIDHandlerFunc(func(params relations.DeleteRelationsFromIDParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation RelationsDeleteRelationsFromID has not yet been implemented")
		}),
		RelationsDeleteRelationsToIDHandler: relations.DeleteRelationsToIDHandlerFunc(func(params relations.DeleteRelationsToIDParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation RelationsDeleteRelationsToID has not yet been implemented")
		}),
		AccountGetAccountEmailEmailHandler: account.GetAccountEmailEmailHandlerFunc(func(params account.GetAccountEmailEmailParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountGetAccountEmailEmail has not yet been implemented")
		}),
		AccountGetAccountInvitesHandler: account.GetAccountInvitesHandlerFunc(func(params account.GetAccountInvitesParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation AccountGetAccountInvites has not yet been implemented")
		}),
		AccountGetAccountNameNameHandler: account.GetAccountNameNameHandlerFunc(func(params account.GetAccountNameNameParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountGetAccountNameName has not yet been implemented")
		}),
		AccountGetAccountVerificationEmailHandler: account.GetAccountVerificationEmailHandlerFunc(func(params account.GetAccountVerificationEmailParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountGetAccountVerificationEmail has not yet been implemented")
		}),
		CommentsGetCommentsIDHandler: comments.GetCommentsIDHandlerFunc(func(params comments.GetCommentsIDParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation CommentsGetCommentsID has not yet been implemented")
		}),
		VotesGetCommentsIDVoteHandler: votes.GetCommentsIDVoteHandlerFunc(func(params votes.GetCommentsIDVoteParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation VotesGetCommentsIDVote has not yet been implemented")
		}),
		DesignGetDesignHandler: design.GetDesignHandlerFunc(func(params design.GetDesignParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation DesignGetDesign has not yet been implemented")
		}),
		DesignGetDesignFontsHandler: design.GetDesignFontsHandlerFunc(func(params design.GetDesignFontsParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation DesignGetDesignFonts has not yet been implemented")
		}),
		EntriesGetEntriesAnonymousHandler: entries.GetEntriesAnonymousHandlerFunc(func(params entries.GetEntriesAnonymousParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesGetEntriesAnonymous has not yet been implemented")
		}),
		EntriesGetEntriesBestHandler: entries.GetEntriesBestHandlerFunc(func(params entries.GetEntriesBestParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesGetEntriesBest has not yet been implemented")
		}),
		EntriesGetEntriesFriendsHandler: entries.GetEntriesFriendsHandlerFunc(func(params entries.GetEntriesFriendsParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesGetEntriesFriends has not yet been implemented")
		}),
		EntriesGetEntriesIDHandler: entries.GetEntriesIDHandlerFunc(func(params entries.GetEntriesIDParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesGetEntriesID has not yet been implemented")
		}),
		CommentsGetEntriesIDCommentsHandler: comments.GetEntriesIDCommentsHandlerFunc(func(params comments.GetEntriesIDCommentsParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation CommentsGetEntriesIDComments has not yet been implemented")
		}),
		FavoritesGetEntriesIDFavoriteHandler: favorites.GetEntriesIDFavoriteHandlerFunc(func(params favorites.GetEntriesIDFavoriteParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation FavoritesGetEntriesIDFavorite has not yet been implemented")
		}),
		VotesGetEntriesIDVoteHandler: votes.GetEntriesIDVoteHandlerFunc(func(params votes.GetEntriesIDVoteParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation VotesGetEntriesIDVote has not yet been implemented")
		}),
		WatchingsGetEntriesIDWatchingHandler: watchings.GetEntriesIDWatchingHandlerFunc(func(params watchings.GetEntriesIDWatchingParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation WatchingsGetEntriesIDWatching has not yet been implemented")
		}),
		EntriesGetEntriesLiveHandler: entries.GetEntriesLiveHandlerFunc(func(params entries.GetEntriesLiveParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesGetEntriesLive has not yet been implemented")
		}),
		EntriesGetEntriesMeHandler: entries.GetEntriesMeHandlerFunc(func(params entries.GetEntriesMeParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesGetEntriesMe has not yet been implemented")
		}),
		EntriesGetEntriesMeFavoritesHandler: entries.GetEntriesMeFavoritesHandlerFunc(func(params entries.GetEntriesMeFavoritesParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesGetEntriesMeFavorites has not yet been implemented")
		}),
		EntriesGetEntriesMeWatchingHandler: entries.GetEntriesMeWatchingHandlerFunc(func(params entries.GetEntriesMeWatchingParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesGetEntriesMeWatching has not yet been implemented")
		}),
		EntriesGetEntriesUsersByNameNameHandler: entries.GetEntriesUsersByNameNameHandlerFunc(func(params entries.GetEntriesUsersByNameNameParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesGetEntriesUsersByNameName has not yet been implemented")
		}),
		EntriesGetEntriesUsersByNameNameFavoritesHandler: entries.GetEntriesUsersByNameNameFavoritesHandlerFunc(func(params entries.GetEntriesUsersByNameNameFavoritesParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesGetEntriesUsersByNameNameFavorites has not yet been implemented")
		}),
		EntriesGetEntriesUsersIDHandler: entries.GetEntriesUsersIDHandlerFunc(func(params entries.GetEntriesUsersIDParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesGetEntriesUsersID has not yet been implemented")
		}),
		EntriesGetEntriesUsersIDFavoritesHandler: entries.GetEntriesUsersIDFavoritesHandlerFunc(func(params entries.GetEntriesUsersIDFavoritesParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesGetEntriesUsersIDFavorites has not yet been implemented")
		}),
		MeGetMeHandler: me.GetMeHandlerFunc(func(params me.GetMeParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation MeGetMe has not yet been implemented")
		}),
		MeGetMeFollowersHandler: me.GetMeFollowersHandlerFunc(func(params me.GetMeFollowersParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation MeGetMeFollowers has not yet been implemented")
		}),
		MeGetMeFollowingsHandler: me.GetMeFollowingsHandlerFunc(func(params me.GetMeFollowingsParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation MeGetMeFollowings has not yet been implemented")
		}),
		MeGetMeIgnoredHandler: me.GetMeIgnoredHandlerFunc(func(params me.GetMeIgnoredParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation MeGetMeIgnored has not yet been implemented")
		}),
		MeGetMeInvitedHandler: me.GetMeInvitedHandlerFunc(func(params me.GetMeInvitedParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation MeGetMeInvited has not yet been implemented")
		}),
		MeGetMeRequestedHandler: me.GetMeRequestedHandlerFunc(func(params me.GetMeRequestedParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation MeGetMeRequested has not yet been implemented")
		}),
		RelationsGetRelationsFromIDHandler: relations.GetRelationsFromIDHandlerFunc(func(params relations.GetRelationsFromIDParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation RelationsGetRelationsFromID has not yet been implemented")
		}),
		RelationsGetRelationsToIDHandler: relations.GetRelationsToIDHandlerFunc(func(params relations.GetRelationsToIDParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation RelationsGetRelationsToID has not yet been implemented")
		}),
		UsersGetUsersNameHandler: users.GetUsersNameHandlerFunc(func(params users.GetUsersNameParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation UsersGetUsersName has not yet been implemented")
		}),
		UsersGetUsersNameFollowersHandler: users.GetUsersNameFollowersHandlerFunc(func(params users.GetUsersNameFollowersParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation UsersGetUsersNameFollowers has not yet been implemented")
		}),
		UsersGetUsersNameFollowingsHandler: users.GetUsersNameFollowingsHandlerFunc(func(params users.GetUsersNameFollowingsParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation UsersGetUsersNameFollowings has not yet been implemented")
		}),
		UsersGetUsersNameInvitedHandler: users.GetUsersNameInvitedHandlerFunc(func(params users.GetUsersNameInvitedParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation UsersGetUsersNameInvited has not yet been implemented")
		}),
		AccountPostAccountLoginHandler: account.PostAccountLoginHandlerFunc(func(params account.PostAccountLoginParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountPostAccountLogin has not yet been implemented")
		}),
		AccountPostAccountPasswordHandler: account.PostAccountPasswordHandlerFunc(func(params account.PostAccountPasswordParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation AccountPostAccountPassword has not yet been implemented")
		}),
		AccountPostAccountRecoverHandler: account.PostAccountRecoverHandlerFunc(func(params account.PostAccountRecoverParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountPostAccountRecover has not yet been implemented")
		}),
		AccountPostAccountRegisterHandler: account.PostAccountRegisterHandlerFunc(func(params account.PostAccountRegisterParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountPostAccountRegister has not yet been implemented")
		}),
		AccountPostAccountVerificationHandler: account.PostAccountVerificationHandlerFunc(func(params account.PostAccountVerificationParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation AccountPostAccountVerification has not yet been implemented")
		}),
		EntriesPostEntriesAnonymousHandler: entries.PostEntriesAnonymousHandlerFunc(func(params entries.PostEntriesAnonymousParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesPostEntriesAnonymous has not yet been implemented")
		}),
		CommentsPostEntriesIDCommentsHandler: comments.PostEntriesIDCommentsHandlerFunc(func(params comments.PostEntriesIDCommentsParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation CommentsPostEntriesIDComments has not yet been implemented")
		}),
		EntriesPostEntriesMeHandler: entries.PostEntriesMeHandlerFunc(func(params entries.PostEntriesMeParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesPostEntriesMe has not yet been implemented")
		}),
		CommentsPutCommentsIDHandler: comments.PutCommentsIDHandlerFunc(func(params comments.PutCommentsIDParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation CommentsPutCommentsID has not yet been implemented")
		}),
		DesignPutDesignHandler: design.PutDesignHandlerFunc(func(params design.PutDesignParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation DesignPutDesign has not yet been implemented")
		}),
		EntriesPutEntriesIDHandler: entries.PutEntriesIDHandlerFunc(func(params entries.PutEntriesIDParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation EntriesPutEntriesID has not yet been implemented")
		}),
		FavoritesPutEntriesIDFavoriteHandler: favorites.PutEntriesIDFavoriteHandlerFunc(func(params favorites.PutEntriesIDFavoriteParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation FavoritesPutEntriesIDFavorite has not yet been implemented")
		}),
		VotesPutEntriesIDVoteHandler: votes.PutEntriesIDVoteHandlerFunc(func(params votes.PutEntriesIDVoteParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation VotesPutEntriesIDVote has not yet been implemented")
		}),
		WatchingsPutEntriesIDWatchingHandler: watchings.PutEntriesIDWatchingHandlerFunc(func(params watchings.PutEntriesIDWatchingParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation WatchingsPutEntriesIDWatching has not yet been implemented")
		}),
		MePutMeHandler: me.PutMeHandlerFunc(func(params me.PutMeParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation MePutMe has not yet been implemented")
		}),
		MePutMeAvatarHandler: me.PutMeAvatarHandlerFunc(func(params me.PutMeAvatarParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation MePutMeAvatar has not yet been implemented")
		}),
		MePutMeCoverHandler: me.PutMeCoverHandlerFunc(func(params me.PutMeCoverParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation MePutMeCover has not yet been implemented")
		}),
		MePutMeOnlineHandler: me.PutMeOnlineHandlerFunc(func(params me.PutMeOnlineParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation MePutMeOnline has not yet been implemented")
		}),
		RelationsPutRelationsFromIDHandler: relations.PutRelationsFromIDHandlerFunc(func(params relations.PutRelationsFromIDParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation RelationsPutRelationsFromID has not yet been implemented")
		}),
		RelationsPutRelationsToIDHandler: relations.PutRelationsToIDHandlerFunc(func(params relations.PutRelationsToIDParams, principal *models.UserID) middleware.Responder {
			return middleware.NotImplemented("operation RelationsPutRelationsToID has not yet been implemented")
		}),

		// Applies when the "X-User-Key" header is set
		APIKeyHeaderAuth: func(token string) (*models.UserID, error) {
			return nil, errors.NotImplemented("api key auth (ApiKeyHeader) X-User-Key from header param [X-User-Key] has not yet been implemented")
		},

		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*MindwellAPI the mindwell API */
type MindwellAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer
	// UrlformConsumer registers a consumer for a "application/x-www-form-urlencoded" mime type
	UrlformConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for a "multipart/form-data" mime type
	MultipartformConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// APIKeyHeaderAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key X-User-Key provided in the header
	APIKeyHeaderAuth func(string) (*models.UserID, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// CommentsDeleteCommentsIDHandler sets the operation handler for the delete comments ID operation
	CommentsDeleteCommentsIDHandler comments.DeleteCommentsIDHandler
	// EntriesDeleteEntriesIDHandler sets the operation handler for the delete entries ID operation
	EntriesDeleteEntriesIDHandler entries.DeleteEntriesIDHandler
	// FavoritesDeleteEntriesIDFavoriteHandler sets the operation handler for the delete entries ID favorite operation
	FavoritesDeleteEntriesIDFavoriteHandler favorites.DeleteEntriesIDFavoriteHandler
	// VotesDeleteEntriesIDVoteHandler sets the operation handler for the delete entries ID vote operation
	VotesDeleteEntriesIDVoteHandler votes.DeleteEntriesIDVoteHandler
	// WatchingsDeleteEntriesIDWatchingHandler sets the operation handler for the delete entries ID watching operation
	WatchingsDeleteEntriesIDWatchingHandler watchings.DeleteEntriesIDWatchingHandler
	// RelationsDeleteRelationsFromIDHandler sets the operation handler for the delete relations from ID operation
	RelationsDeleteRelationsFromIDHandler relations.DeleteRelationsFromIDHandler
	// RelationsDeleteRelationsToIDHandler sets the operation handler for the delete relations to ID operation
	RelationsDeleteRelationsToIDHandler relations.DeleteRelationsToIDHandler
	// AccountGetAccountEmailEmailHandler sets the operation handler for the get account email email operation
	AccountGetAccountEmailEmailHandler account.GetAccountEmailEmailHandler
	// AccountGetAccountInvitesHandler sets the operation handler for the get account invites operation
	AccountGetAccountInvitesHandler account.GetAccountInvitesHandler
	// AccountGetAccountNameNameHandler sets the operation handler for the get account name name operation
	AccountGetAccountNameNameHandler account.GetAccountNameNameHandler
	// AccountGetAccountVerificationEmailHandler sets the operation handler for the get account verification email operation
	AccountGetAccountVerificationEmailHandler account.GetAccountVerificationEmailHandler
	// CommentsGetCommentsIDHandler sets the operation handler for the get comments ID operation
	CommentsGetCommentsIDHandler comments.GetCommentsIDHandler
	// VotesGetCommentsIDVoteHandler sets the operation handler for the get comments ID vote operation
	VotesGetCommentsIDVoteHandler votes.GetCommentsIDVoteHandler
	// DesignGetDesignHandler sets the operation handler for the get design operation
	DesignGetDesignHandler design.GetDesignHandler
	// DesignGetDesignFontsHandler sets the operation handler for the get design fonts operation
	DesignGetDesignFontsHandler design.GetDesignFontsHandler
	// EntriesGetEntriesAnonymousHandler sets the operation handler for the get entries anonymous operation
	EntriesGetEntriesAnonymousHandler entries.GetEntriesAnonymousHandler
	// EntriesGetEntriesBestHandler sets the operation handler for the get entries best operation
	EntriesGetEntriesBestHandler entries.GetEntriesBestHandler
	// EntriesGetEntriesFriendsHandler sets the operation handler for the get entries friends operation
	EntriesGetEntriesFriendsHandler entries.GetEntriesFriendsHandler
	// EntriesGetEntriesIDHandler sets the operation handler for the get entries ID operation
	EntriesGetEntriesIDHandler entries.GetEntriesIDHandler
	// CommentsGetEntriesIDCommentsHandler sets the operation handler for the get entries ID comments operation
	CommentsGetEntriesIDCommentsHandler comments.GetEntriesIDCommentsHandler
	// FavoritesGetEntriesIDFavoriteHandler sets the operation handler for the get entries ID favorite operation
	FavoritesGetEntriesIDFavoriteHandler favorites.GetEntriesIDFavoriteHandler
	// VotesGetEntriesIDVoteHandler sets the operation handler for the get entries ID vote operation
	VotesGetEntriesIDVoteHandler votes.GetEntriesIDVoteHandler
	// WatchingsGetEntriesIDWatchingHandler sets the operation handler for the get entries ID watching operation
	WatchingsGetEntriesIDWatchingHandler watchings.GetEntriesIDWatchingHandler
	// EntriesGetEntriesLiveHandler sets the operation handler for the get entries live operation
	EntriesGetEntriesLiveHandler entries.GetEntriesLiveHandler
	// EntriesGetEntriesMeHandler sets the operation handler for the get entries me operation
	EntriesGetEntriesMeHandler entries.GetEntriesMeHandler
	// EntriesGetEntriesMeFavoritesHandler sets the operation handler for the get entries me favorites operation
	EntriesGetEntriesMeFavoritesHandler entries.GetEntriesMeFavoritesHandler
	// EntriesGetEntriesMeWatchingHandler sets the operation handler for the get entries me watching operation
	EntriesGetEntriesMeWatchingHandler entries.GetEntriesMeWatchingHandler
	// EntriesGetEntriesUsersByNameNameHandler sets the operation handler for the get entries users by name name operation
	EntriesGetEntriesUsersByNameNameHandler entries.GetEntriesUsersByNameNameHandler
	// EntriesGetEntriesUsersByNameNameFavoritesHandler sets the operation handler for the get entries users by name name favorites operation
	EntriesGetEntriesUsersByNameNameFavoritesHandler entries.GetEntriesUsersByNameNameFavoritesHandler
	// EntriesGetEntriesUsersIDHandler sets the operation handler for the get entries users ID operation
	EntriesGetEntriesUsersIDHandler entries.GetEntriesUsersIDHandler
	// EntriesGetEntriesUsersIDFavoritesHandler sets the operation handler for the get entries users ID favorites operation
	EntriesGetEntriesUsersIDFavoritesHandler entries.GetEntriesUsersIDFavoritesHandler
	// MeGetMeHandler sets the operation handler for the get me operation
	MeGetMeHandler me.GetMeHandler
	// MeGetMeFollowersHandler sets the operation handler for the get me followers operation
	MeGetMeFollowersHandler me.GetMeFollowersHandler
	// MeGetMeFollowingsHandler sets the operation handler for the get me followings operation
	MeGetMeFollowingsHandler me.GetMeFollowingsHandler
	// MeGetMeIgnoredHandler sets the operation handler for the get me ignored operation
	MeGetMeIgnoredHandler me.GetMeIgnoredHandler
	// MeGetMeInvitedHandler sets the operation handler for the get me invited operation
	MeGetMeInvitedHandler me.GetMeInvitedHandler
	// MeGetMeRequestedHandler sets the operation handler for the get me requested operation
	MeGetMeRequestedHandler me.GetMeRequestedHandler
	// RelationsGetRelationsFromIDHandler sets the operation handler for the get relations from ID operation
	RelationsGetRelationsFromIDHandler relations.GetRelationsFromIDHandler
	// RelationsGetRelationsToIDHandler sets the operation handler for the get relations to ID operation
	RelationsGetRelationsToIDHandler relations.GetRelationsToIDHandler
	// UsersGetUsersNameHandler sets the operation handler for the get users name operation
	UsersGetUsersNameHandler users.GetUsersNameHandler
	// UsersGetUsersNameFollowersHandler sets the operation handler for the get users name followers operation
	UsersGetUsersNameFollowersHandler users.GetUsersNameFollowersHandler
	// UsersGetUsersNameFollowingsHandler sets the operation handler for the get users name followings operation
	UsersGetUsersNameFollowingsHandler users.GetUsersNameFollowingsHandler
	// UsersGetUsersNameInvitedHandler sets the operation handler for the get users name invited operation
	UsersGetUsersNameInvitedHandler users.GetUsersNameInvitedHandler
	// AccountPostAccountLoginHandler sets the operation handler for the post account login operation
	AccountPostAccountLoginHandler account.PostAccountLoginHandler
	// AccountPostAccountPasswordHandler sets the operation handler for the post account password operation
	AccountPostAccountPasswordHandler account.PostAccountPasswordHandler
	// AccountPostAccountRecoverHandler sets the operation handler for the post account recover operation
	AccountPostAccountRecoverHandler account.PostAccountRecoverHandler
	// AccountPostAccountRegisterHandler sets the operation handler for the post account register operation
	AccountPostAccountRegisterHandler account.PostAccountRegisterHandler
	// AccountPostAccountVerificationHandler sets the operation handler for the post account verification operation
	AccountPostAccountVerificationHandler account.PostAccountVerificationHandler
	// EntriesPostEntriesAnonymousHandler sets the operation handler for the post entries anonymous operation
	EntriesPostEntriesAnonymousHandler entries.PostEntriesAnonymousHandler
	// CommentsPostEntriesIDCommentsHandler sets the operation handler for the post entries ID comments operation
	CommentsPostEntriesIDCommentsHandler comments.PostEntriesIDCommentsHandler
	// EntriesPostEntriesMeHandler sets the operation handler for the post entries me operation
	EntriesPostEntriesMeHandler entries.PostEntriesMeHandler
	// CommentsPutCommentsIDHandler sets the operation handler for the put comments ID operation
	CommentsPutCommentsIDHandler comments.PutCommentsIDHandler
	// DesignPutDesignHandler sets the operation handler for the put design operation
	DesignPutDesignHandler design.PutDesignHandler
	// EntriesPutEntriesIDHandler sets the operation handler for the put entries ID operation
	EntriesPutEntriesIDHandler entries.PutEntriesIDHandler
	// FavoritesPutEntriesIDFavoriteHandler sets the operation handler for the put entries ID favorite operation
	FavoritesPutEntriesIDFavoriteHandler favorites.PutEntriesIDFavoriteHandler
	// VotesPutEntriesIDVoteHandler sets the operation handler for the put entries ID vote operation
	VotesPutEntriesIDVoteHandler votes.PutEntriesIDVoteHandler
	// WatchingsPutEntriesIDWatchingHandler sets the operation handler for the put entries ID watching operation
	WatchingsPutEntriesIDWatchingHandler watchings.PutEntriesIDWatchingHandler
	// MePutMeHandler sets the operation handler for the put me operation
	MePutMeHandler me.PutMeHandler
	// MePutMeAvatarHandler sets the operation handler for the put me avatar operation
	MePutMeAvatarHandler me.PutMeAvatarHandler
	// MePutMeCoverHandler sets the operation handler for the put me cover operation
	MePutMeCoverHandler me.PutMeCoverHandler
	// MePutMeOnlineHandler sets the operation handler for the put me online operation
	MePutMeOnlineHandler me.PutMeOnlineHandler
	// RelationsPutRelationsFromIDHandler sets the operation handler for the put relations from ID operation
	RelationsPutRelationsFromIDHandler relations.PutRelationsFromIDHandler
	// RelationsPutRelationsToIDHandler sets the operation handler for the put relations to ID operation
	RelationsPutRelationsToIDHandler relations.PutRelationsToIDHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *MindwellAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *MindwellAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *MindwellAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *MindwellAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *MindwellAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *MindwellAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *MindwellAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the MindwellAPI
func (o *MindwellAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.UrlformConsumer == nil {
		unregistered = append(unregistered, "UrlformConsumer")
	}

	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.APIKeyHeaderAuth == nil {
		unregistered = append(unregistered, "XUserKeyAuth")
	}

	if o.CommentsDeleteCommentsIDHandler == nil {
		unregistered = append(unregistered, "comments.DeleteCommentsIDHandler")
	}

	if o.EntriesDeleteEntriesIDHandler == nil {
		unregistered = append(unregistered, "entries.DeleteEntriesIDHandler")
	}

	if o.FavoritesDeleteEntriesIDFavoriteHandler == nil {
		unregistered = append(unregistered, "favorites.DeleteEntriesIDFavoriteHandler")
	}

	if o.VotesDeleteEntriesIDVoteHandler == nil {
		unregistered = append(unregistered, "votes.DeleteEntriesIDVoteHandler")
	}

	if o.WatchingsDeleteEntriesIDWatchingHandler == nil {
		unregistered = append(unregistered, "watchings.DeleteEntriesIDWatchingHandler")
	}

	if o.RelationsDeleteRelationsFromIDHandler == nil {
		unregistered = append(unregistered, "relations.DeleteRelationsFromIDHandler")
	}

	if o.RelationsDeleteRelationsToIDHandler == nil {
		unregistered = append(unregistered, "relations.DeleteRelationsToIDHandler")
	}

	if o.AccountGetAccountEmailEmailHandler == nil {
		unregistered = append(unregistered, "account.GetAccountEmailEmailHandler")
	}

	if o.AccountGetAccountInvitesHandler == nil {
		unregistered = append(unregistered, "account.GetAccountInvitesHandler")
	}

	if o.AccountGetAccountNameNameHandler == nil {
		unregistered = append(unregistered, "account.GetAccountNameNameHandler")
	}

	if o.AccountGetAccountVerificationEmailHandler == nil {
		unregistered = append(unregistered, "account.GetAccountVerificationEmailHandler")
	}

	if o.CommentsGetCommentsIDHandler == nil {
		unregistered = append(unregistered, "comments.GetCommentsIDHandler")
	}

	if o.VotesGetCommentsIDVoteHandler == nil {
		unregistered = append(unregistered, "votes.GetCommentsIDVoteHandler")
	}

	if o.DesignGetDesignHandler == nil {
		unregistered = append(unregistered, "design.GetDesignHandler")
	}

	if o.DesignGetDesignFontsHandler == nil {
		unregistered = append(unregistered, "design.GetDesignFontsHandler")
	}

	if o.EntriesGetEntriesAnonymousHandler == nil {
		unregistered = append(unregistered, "entries.GetEntriesAnonymousHandler")
	}

	if o.EntriesGetEntriesBestHandler == nil {
		unregistered = append(unregistered, "entries.GetEntriesBestHandler")
	}

	if o.EntriesGetEntriesFriendsHandler == nil {
		unregistered = append(unregistered, "entries.GetEntriesFriendsHandler")
	}

	if o.EntriesGetEntriesIDHandler == nil {
		unregistered = append(unregistered, "entries.GetEntriesIDHandler")
	}

	if o.CommentsGetEntriesIDCommentsHandler == nil {
		unregistered = append(unregistered, "comments.GetEntriesIDCommentsHandler")
	}

	if o.FavoritesGetEntriesIDFavoriteHandler == nil {
		unregistered = append(unregistered, "favorites.GetEntriesIDFavoriteHandler")
	}

	if o.VotesGetEntriesIDVoteHandler == nil {
		unregistered = append(unregistered, "votes.GetEntriesIDVoteHandler")
	}

	if o.WatchingsGetEntriesIDWatchingHandler == nil {
		unregistered = append(unregistered, "watchings.GetEntriesIDWatchingHandler")
	}

	if o.EntriesGetEntriesLiveHandler == nil {
		unregistered = append(unregistered, "entries.GetEntriesLiveHandler")
	}

	if o.EntriesGetEntriesMeHandler == nil {
		unregistered = append(unregistered, "entries.GetEntriesMeHandler")
	}

	if o.EntriesGetEntriesMeFavoritesHandler == nil {
		unregistered = append(unregistered, "entries.GetEntriesMeFavoritesHandler")
	}

	if o.EntriesGetEntriesMeWatchingHandler == nil {
		unregistered = append(unregistered, "entries.GetEntriesMeWatchingHandler")
	}

	if o.EntriesGetEntriesUsersByNameNameHandler == nil {
		unregistered = append(unregistered, "entries.GetEntriesUsersByNameNameHandler")
	}

	if o.EntriesGetEntriesUsersByNameNameFavoritesHandler == nil {
		unregistered = append(unregistered, "entries.GetEntriesUsersByNameNameFavoritesHandler")
	}

	if o.EntriesGetEntriesUsersIDHandler == nil {
		unregistered = append(unregistered, "entries.GetEntriesUsersIDHandler")
	}

	if o.EntriesGetEntriesUsersIDFavoritesHandler == nil {
		unregistered = append(unregistered, "entries.GetEntriesUsersIDFavoritesHandler")
	}

	if o.MeGetMeHandler == nil {
		unregistered = append(unregistered, "me.GetMeHandler")
	}

	if o.MeGetMeFollowersHandler == nil {
		unregistered = append(unregistered, "me.GetMeFollowersHandler")
	}

	if o.MeGetMeFollowingsHandler == nil {
		unregistered = append(unregistered, "me.GetMeFollowingsHandler")
	}

	if o.MeGetMeIgnoredHandler == nil {
		unregistered = append(unregistered, "me.GetMeIgnoredHandler")
	}

	if o.MeGetMeInvitedHandler == nil {
		unregistered = append(unregistered, "me.GetMeInvitedHandler")
	}

	if o.MeGetMeRequestedHandler == nil {
		unregistered = append(unregistered, "me.GetMeRequestedHandler")
	}

	if o.RelationsGetRelationsFromIDHandler == nil {
		unregistered = append(unregistered, "relations.GetRelationsFromIDHandler")
	}

	if o.RelationsGetRelationsToIDHandler == nil {
		unregistered = append(unregistered, "relations.GetRelationsToIDHandler")
	}

	if o.UsersGetUsersNameHandler == nil {
		unregistered = append(unregistered, "users.GetUsersNameHandler")
	}

	if o.UsersGetUsersNameFollowersHandler == nil {
		unregistered = append(unregistered, "users.GetUsersNameFollowersHandler")
	}

	if o.UsersGetUsersNameFollowingsHandler == nil {
		unregistered = append(unregistered, "users.GetUsersNameFollowingsHandler")
	}

	if o.UsersGetUsersNameInvitedHandler == nil {
		unregistered = append(unregistered, "users.GetUsersNameInvitedHandler")
	}

	if o.AccountPostAccountLoginHandler == nil {
		unregistered = append(unregistered, "account.PostAccountLoginHandler")
	}

	if o.AccountPostAccountPasswordHandler == nil {
		unregistered = append(unregistered, "account.PostAccountPasswordHandler")
	}

	if o.AccountPostAccountRecoverHandler == nil {
		unregistered = append(unregistered, "account.PostAccountRecoverHandler")
	}

	if o.AccountPostAccountRegisterHandler == nil {
		unregistered = append(unregistered, "account.PostAccountRegisterHandler")
	}

	if o.AccountPostAccountVerificationHandler == nil {
		unregistered = append(unregistered, "account.PostAccountVerificationHandler")
	}

	if o.EntriesPostEntriesAnonymousHandler == nil {
		unregistered = append(unregistered, "entries.PostEntriesAnonymousHandler")
	}

	if o.CommentsPostEntriesIDCommentsHandler == nil {
		unregistered = append(unregistered, "comments.PostEntriesIDCommentsHandler")
	}

	if o.EntriesPostEntriesMeHandler == nil {
		unregistered = append(unregistered, "entries.PostEntriesMeHandler")
	}

	if o.CommentsPutCommentsIDHandler == nil {
		unregistered = append(unregistered, "comments.PutCommentsIDHandler")
	}

	if o.DesignPutDesignHandler == nil {
		unregistered = append(unregistered, "design.PutDesignHandler")
	}

	if o.EntriesPutEntriesIDHandler == nil {
		unregistered = append(unregistered, "entries.PutEntriesIDHandler")
	}

	if o.FavoritesPutEntriesIDFavoriteHandler == nil {
		unregistered = append(unregistered, "favorites.PutEntriesIDFavoriteHandler")
	}

	if o.VotesPutEntriesIDVoteHandler == nil {
		unregistered = append(unregistered, "votes.PutEntriesIDVoteHandler")
	}

	if o.WatchingsPutEntriesIDWatchingHandler == nil {
		unregistered = append(unregistered, "watchings.PutEntriesIDWatchingHandler")
	}

	if o.MePutMeHandler == nil {
		unregistered = append(unregistered, "me.PutMeHandler")
	}

	if o.MePutMeAvatarHandler == nil {
		unregistered = append(unregistered, "me.PutMeAvatarHandler")
	}

	if o.MePutMeCoverHandler == nil {
		unregistered = append(unregistered, "me.PutMeCoverHandler")
	}

	if o.MePutMeOnlineHandler == nil {
		unregistered = append(unregistered, "me.PutMeOnlineHandler")
	}

	if o.RelationsPutRelationsFromIDHandler == nil {
		unregistered = append(unregistered, "relations.PutRelationsFromIDHandler")
	}

	if o.RelationsPutRelationsToIDHandler == nil {
		unregistered = append(unregistered, "relations.PutRelationsToIDHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *MindwellAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *MindwellAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	result := make(map[string]runtime.Authenticator)
	for name, scheme := range schemes {
		switch name {

		case "ApiKeyHeader":

			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, func(token string) (interface{}, error) {
				return o.APIKeyHeaderAuth(token)
			})

		}
	}
	return result

}

// Authorizer returns the registered authorizer
func (o *MindwellAPI) Authorizer() runtime.Authorizer {

	return o.APIAuthorizer

}

// ConsumersFor gets the consumers for the specified media types
func (o *MindwellAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "application/x-www-form-urlencoded":
			result["application/x-www-form-urlencoded"] = o.UrlformConsumer

		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *MindwellAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *MindwellAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the mindwell API
func (o *MindwellAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *MindwellAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/comments/{id}"] = comments.NewDeleteCommentsID(o.context, o.CommentsDeleteCommentsIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/entries/{id}"] = entries.NewDeleteEntriesID(o.context, o.EntriesDeleteEntriesIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/entries/{id}/favorite"] = favorites.NewDeleteEntriesIDFavorite(o.context, o.FavoritesDeleteEntriesIDFavoriteHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/entries/{id}/vote"] = votes.NewDeleteEntriesIDVote(o.context, o.VotesDeleteEntriesIDVoteHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/entries/{id}/watching"] = watchings.NewDeleteEntriesIDWatching(o.context, o.WatchingsDeleteEntriesIDWatchingHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/relations/from/{id}"] = relations.NewDeleteRelationsFromID(o.context, o.RelationsDeleteRelationsFromIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/relations/to/{id}"] = relations.NewDeleteRelationsToID(o.context, o.RelationsDeleteRelationsToIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/account/email/{email}"] = account.NewGetAccountEmailEmail(o.context, o.AccountGetAccountEmailEmailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/account/invites"] = account.NewGetAccountInvites(o.context, o.AccountGetAccountInvitesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/account/name/{name}"] = account.NewGetAccountNameName(o.context, o.AccountGetAccountNameNameHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/account/verification/{email}"] = account.NewGetAccountVerificationEmail(o.context, o.AccountGetAccountVerificationEmailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/comments/{id}"] = comments.NewGetCommentsID(o.context, o.CommentsGetCommentsIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/comments/{id}/vote"] = votes.NewGetCommentsIDVote(o.context, o.VotesGetCommentsIDVoteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/design"] = design.NewGetDesign(o.context, o.DesignGetDesignHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/design/fonts"] = design.NewGetDesignFonts(o.context, o.DesignGetDesignFontsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/anonymous"] = entries.NewGetEntriesAnonymous(o.context, o.EntriesGetEntriesAnonymousHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/best"] = entries.NewGetEntriesBest(o.context, o.EntriesGetEntriesBestHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/friends"] = entries.NewGetEntriesFriends(o.context, o.EntriesGetEntriesFriendsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/{id}"] = entries.NewGetEntriesID(o.context, o.EntriesGetEntriesIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/{id}/comments"] = comments.NewGetEntriesIDComments(o.context, o.CommentsGetEntriesIDCommentsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/{id}/favorite"] = favorites.NewGetEntriesIDFavorite(o.context, o.FavoritesGetEntriesIDFavoriteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/{id}/vote"] = votes.NewGetEntriesIDVote(o.context, o.VotesGetEntriesIDVoteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/{id}/watching"] = watchings.NewGetEntriesIDWatching(o.context, o.WatchingsGetEntriesIDWatchingHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/live"] = entries.NewGetEntriesLive(o.context, o.EntriesGetEntriesLiveHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/me"] = entries.NewGetEntriesMe(o.context, o.EntriesGetEntriesMeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/me/favorites"] = entries.NewGetEntriesMeFavorites(o.context, o.EntriesGetEntriesMeFavoritesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/me/watching"] = entries.NewGetEntriesMeWatching(o.context, o.EntriesGetEntriesMeWatchingHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/users/byName/{name}"] = entries.NewGetEntriesUsersByNameName(o.context, o.EntriesGetEntriesUsersByNameNameHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/users/byName/{name}/favorites"] = entries.NewGetEntriesUsersByNameNameFavorites(o.context, o.EntriesGetEntriesUsersByNameNameFavoritesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/users/{id}"] = entries.NewGetEntriesUsersID(o.context, o.EntriesGetEntriesUsersIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries/users/{id}/favorites"] = entries.NewGetEntriesUsersIDFavorites(o.context, o.EntriesGetEntriesUsersIDFavoritesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/me"] = me.NewGetMe(o.context, o.MeGetMeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/me/followers"] = me.NewGetMeFollowers(o.context, o.MeGetMeFollowersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/me/followings"] = me.NewGetMeFollowings(o.context, o.MeGetMeFollowingsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/me/ignored"] = me.NewGetMeIgnored(o.context, o.MeGetMeIgnoredHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/me/invited"] = me.NewGetMeInvited(o.context, o.MeGetMeInvitedHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/me/requested"] = me.NewGetMeRequested(o.context, o.MeGetMeRequestedHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/relations/from/{id}"] = relations.NewGetRelationsFromID(o.context, o.RelationsGetRelationsFromIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/relations/to/{id}"] = relations.NewGetRelationsToID(o.context, o.RelationsGetRelationsToIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{name}"] = users.NewGetUsersName(o.context, o.UsersGetUsersNameHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{name}/followers"] = users.NewGetUsersNameFollowers(o.context, o.UsersGetUsersNameFollowersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{name}/followings"] = users.NewGetUsersNameFollowings(o.context, o.UsersGetUsersNameFollowingsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{name}/invited"] = users.NewGetUsersNameInvited(o.context, o.UsersGetUsersNameInvitedHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/account/login"] = account.NewPostAccountLogin(o.context, o.AccountPostAccountLoginHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/account/password"] = account.NewPostAccountPassword(o.context, o.AccountPostAccountPasswordHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/account/recover"] = account.NewPostAccountRecover(o.context, o.AccountPostAccountRecoverHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/account/register"] = account.NewPostAccountRegister(o.context, o.AccountPostAccountRegisterHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/account/verification"] = account.NewPostAccountVerification(o.context, o.AccountPostAccountVerificationHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/entries/anonymous"] = entries.NewPostEntriesAnonymous(o.context, o.EntriesPostEntriesAnonymousHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/entries/{id}/comments"] = comments.NewPostEntriesIDComments(o.context, o.CommentsPostEntriesIDCommentsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/entries/me"] = entries.NewPostEntriesMe(o.context, o.EntriesPostEntriesMeHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/comments/{id}"] = comments.NewPutCommentsID(o.context, o.CommentsPutCommentsIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/design"] = design.NewPutDesign(o.context, o.DesignPutDesignHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/entries/{id}"] = entries.NewPutEntriesID(o.context, o.EntriesPutEntriesIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/entries/{id}/favorite"] = favorites.NewPutEntriesIDFavorite(o.context, o.FavoritesPutEntriesIDFavoriteHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/entries/{id}/vote"] = votes.NewPutEntriesIDVote(o.context, o.VotesPutEntriesIDVoteHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/entries/{id}/watching"] = watchings.NewPutEntriesIDWatching(o.context, o.WatchingsPutEntriesIDWatchingHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/me"] = me.NewPutMe(o.context, o.MePutMeHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/me/avatar"] = me.NewPutMeAvatar(o.context, o.MePutMeAvatarHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/me/cover"] = me.NewPutMeCover(o.context, o.MePutMeCoverHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/me/online"] = me.NewPutMeOnline(o.context, o.MePutMeOnlineHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/relations/from/{id}"] = relations.NewPutRelationsFromID(o.context, o.RelationsPutRelationsFromIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/relations/to/{id}"] = relations.NewPutRelationsToID(o.context, o.RelationsPutRelationsToIDHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *MindwellAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middelware as you see fit
func (o *MindwellAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}
