consumes:
  - application/json
info:
  title: Mindwell
  version: 0.1.0
securityDefinitions:
  ApiKeyHeader:
    type: apiKey
    in: header
    name: X-User-Key
definitions:
  UserID:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        minLength: 1
        maxLength: 20
  Error:
    type: object
    properties:
      message:
        type: string
    example:
      message: Access denied
  Color:
    type: string
    pattern: '#[0-9a-fA-F]{6}'
    example: '#373737'
    description: color in rgb
  Avatar:
    type: object
    properties:
      x124:
        type: string
      x92:
        type: string
      x42:
        type: string
  Cover:
    type: object
    properties:
      id:
        type: integer
        format: int64
        minimum: 1
        description: user id
      x1920:
        type: string
      x318:
        type: string
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
        minimum: 1
      name:
        type: string
        minLength: 1
        maxLength: 20
      showName:
        type: string
        minLength: 1
        maxLength: 20
      isOnline:
        type: boolean
      avatar:
        $ref: '#/definitions/Avatar'
    example:
      id: 1
      name: 'binque'
      showName: 'Бинк'
      isOnline: false
  Friend: 
    allOf:
      - $ref: '#/definitions/User'
      - type: object
        properties:
          gender:
            type: string
            enum: [male, female, not set]
          title:
            type: string
            maxLength: 260
          karma:
            type: number
            format: float
          lastSeenAt:
            type: number
            format: double
          cover:
            $ref: '#/definitions/Cover'
          counts:
            type: object
            properties:
              entries:
                type: integer
              followings:
                type: integer
              followers:
                type: integer
              ignored:
                type: integer
              invited:
                type: integer
              comments:
                type: integer
              favorites:
                type: integer
              tags:
                type: integer
  FriendList:
    type: object
    properties:
      subject:
        $ref: '#/definitions/User'
      relation:
        type: string
        enum: [followers, followings, requested, ignored, invited]
      users:
        type: array
        items:
          $ref: '#/definitions/Friend'
  Profile:
    allOf:
      - $ref: '#/definitions/Friend'
      - type: object
        properties:
          isDaylog:
            type: boolean
          privacy:
            type: string
            enum: [all, followers]
          createdAt:
            type: number
            format: double
          invitedBy:
            $ref: '#/definitions/User'
          ageLowerBound:
            type: integer
          ageUpperBound:
            type: integer
          country:
            type: string
            maxLength: 50
          city:
            type: string
            maxLength: 50
          design:
            $ref: '#/definitions/Design'
          relations:
            type: object
            properties:
              toMe:
                type: string
                enum: [followed, requested, ignored, none]
              fromMe:
                type: string
                enum: [followed, requested, ignored, none]
        example:
          gender: male
          isDaylog: false
          privacy: all
          title: 'some tlog title'
          karma: 100.0
          createdAt: 1531029717.333
          lastSeenAt: 1531029717.333
          country: Россия
          city: Казань
          counts:
            entries: 13
            followings: 4
            followers: 15
            ignored: 0
            invited: 0
            comments: 22
            favorites: 1
            tags: 0
          relations:
            toMe: none
            fromMe: followed
  Design:
    type: object
    properties:
      css:
        type: string
      backgroundColor:
        $ref: '#/definitions/Color'
      textColor:
        $ref: '#/definitions/Color'
      fontFamily:
        type: string
      fontSize:
        type: integer
      textAlignment:
        type: string
        enum: [left, right, center, justify]
  AuthProfile:
    allOf:
      - $ref: '#/definitions/Profile'
      - type: object
        properties:
          birthday:
            type: string
            format: full-date
          showInTops:
            type: boolean
          account:
            type: object
            properties:
              apiKey:
                type: string
              validThru:
                type: number
                format: double
              email:
                type: string
              verified:
                type: boolean
        example:
          account:
            apiKey: 'blah-blah-blah'
            validThru: '1985-04-12T23:20:50.52Z'
            email: 'mail@example.com'
            verified: true
  Entry:
    type: object
    properties:
      id:
        type: integer
        format: int64
        minimum: 1
      author:
        $ref: '#/definitions/User'
      createdAt:
        type: number
        format: double
      rating:
        $ref: '#/definitions/Rating'
      title:
        type: string
      cutTitle: 
        type: string
      content:
        type: string
      cutContent:
        type: string
      editContent:
        type: string
      hasCut:
        type: boolean
      wordCount:
        type: integer
      privacy:
        type: string
        enum: [all, some, me, anonymous]
      visibleFor:
        type: array
        items:
          $ref: '#/definitions/User'
      commentCount:
        type: integer
      isFavorited:
        type: boolean
      isWatching:
        type: boolean
      comments:
          $ref: '#/definitions/CommentList'
    example:
      id: 152
      createdAt: 1531029717.333
      rating: -3
      title: 'example title'
      content: '<p>some text with <b>html</b> tags</p>'
      editContent: 'some text with *html* tags'
      wordCount: 5
      privacy: 'all'
      isVotable: true
      commentCount: 0
  Feed:
    type: object
    properties:
      entries:
        type: array
        items:
          $ref: '#/definitions/Entry'
      nextAfter:
        type: string
      hasAfter:
        type: boolean
      nextBefore:
        type: string
      hasBefore:
        type: boolean
  Rating:
    type: object
    properties:
      id:
        type: integer
        format: int64
        minimum: 1
      isVotable:
        type: boolean
      upCount:
        type: integer
      downCount:
        type: integer
      rating:
        type: number
        format: float
      vote:
        type: string
        enum: [not, pos, neg, ban]
  FavoriteStatus:
    type: object
    properties:
      id:
        type: integer
        format: int64
        minimum: 1
      isFavorited:
        type: boolean
  WatchingStatus:
    type: object
    properties:
      id:
        type: integer
        format: int64
        minimum: 1
      isWatching:
        type: boolean
  Relationship:
    type: object
    properties:
      from:
        type: string
      to:
        type: string
      relation:
        type: string
        enum: [followed, requested, ignored, none]
  Comment:
    type: object
    properties:
      id:
        type: integer
        format: int64
        minimum: 1
      author:
        $ref: '#/definitions/User'
      entryId:
        type: integer
        format: int64
        minimum: 1
      createdAt:
        type: number
        format: double
      content:
        type: string
        minLength: 1
      rating:
        $ref: '#/definitions/Rating'
    example:
      id: 999
      entryId: 152
      createdAt: 1531029717.333
      content: 'some multiline text \n without html'
  CommentList:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Comment'
      nextAfter:
        type: string
      hasAfter:
        type: boolean
      nextBefore:
        type: string
      hasBefore:
        type: boolean
parameters:
  pathId:
    in: path
    name: id
    type: integer
    format: int64
    minimum: 1
    required: true
  pathName:
    in: path
    name: 'name'
    type: string
    minLength: 1
    maxLength: 20
    required: true
  limit:
    in: query
    name: limit
    type: integer
    minimum: 1
    maximum: 100
    default: 50
  skip:
    in: query
    name: skip
    type: integer
    default: 0
  after:
    in: query
    name: after
    type: string
    default: ""
  before:
    in: query
    name: before
    type: string
    default: ""
  tag:
    in: query
    name: tag
    type: string
    maxLength: 50
  sort:
    in: query
    name: sort
    type: string
    enum: [new, old, best]
    default: new
paths:
  /account/email/{email}:
    get:
      summary: check if email is used
      parameters:
        - in: path
          name: email
          type: string
          required: true
          maxLength: 500
      tags:
        - account
      responses:
        200:
          description: check result
          schema:
            type: object
            properties:
              email:
                type: string
              isFree:
                type: boolean
            required:
              - email
              - isFree
            example:
              email: mail@example.com
              isFree: true
  /account/name/{name}:
    get:
      summary: check if name is used
      parameters:
        - in: path
          name: name
          type: string
          minLength: 1
          maxLength: 20
          required: true
      tags:
        - account
      responses:
        200:
          description: check result
          schema:
            type: object
            properties:
              name:
                type: string
              isFree:
                type: boolean
            required:
              - name
              - isFree
            example:
              name: example
              isFree: false
  /account/register:
    post:
      summary: register new account
      consumes:
        - multipart/form-data
        - application/x-www-form-urlencoded
      parameters:
        - in: formData
          name: name
          type: string
          minLength: 1
          maxLength: 20
          required: true
          pattern: "[a-zA-Z][a-zA-Z0-9]*"
        - in: formData
          name: email
          type: string
          maxLength: 500
          required: true
        - in: formData
          name: password
          type: string
          minLength: 6
          maxLength: 100
          required: true
        - in: formData
          name: invite
          type: string
          required: true
          maxLength: 100
        - in: formData
          name: referrer
          type: string
          minLength: 1
          maxLength: 20
          required: true
        - in: formData
          name: birthday
          type: string
          format: full-date
        - in: formData
          name: gender
          type: string
          enum: [not set, male, female]
          default: not set
        - in: formData
          name: country
          type: string
          default: ''
          maxLength: 50
        - in: formData
          name: city
          type: string
          default: ''
          maxLength: 50
      tags:
        - account
      responses:
        201:
          description: OK
          schema:
            $ref: '#/definitions/AuthProfile'
        400:
          description: email or name already exists
          schema:
            $ref: '#/definitions/Error'
  /account/login:
    post:
      consumes:
        - multipart/form-data
        - application/x-www-form-urlencoded
      parameters:
        - in: formData
          name: name
          type: string
          minLength: 1
          maxLength: 20
          required: true
        - in: formData
          name: password
          type: string
          minLength: 6
          maxLength: 500
          required: true
      tags:
        - account
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/AuthProfile'
        400:
          description: User not found
          schema:
            $ref: '#/definitions/Error'
  /account/verification:
    post:
      summary: request verification email
      security:
        - ApiKeyHeader: []
      tags:
        - account
      responses:
        200:
          description: email has been sent
        403:
          description: access denied
          schema:
            $ref: '#/definitions/Error'
  /account/verification/{email}:
    get:
      summary: verify account email
      parameters:
        - in: path
          type: string
          name: email
          maxLength: 500
          required: true
        - in: query
          type: string
          name: code
          minLength: 64
          maxLength: 64
          required: true
      tags:
        - account
      responses:
        200:
          description: verified
        400:
          description: code or email is not valid
          schema:
            $ref: '#/definitions/Error'
  /account/settings/email:
    get:
      security:
        - ApiKeyHeader: []
      tags:
        - account
      responses:
        200:
          description: email notification settings
          schema:
            type: object
            properties:
              comments:
                type: boolean
              followers:
                type: boolean
    put:
      security:
        - ApiKeyHeader: []
      tags:
        - account
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          type: boolean
          name: comments
          default: false
        - in: formData
          type: boolean
          name: followers
          default: false
      responses:
        200:
          description: email notification settings has been updated
  /account/password:
    post:
      summary: set new password
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          type: string
          name: old_password
          minLength: 6
          maxLength: 100
          required: true
        - in: formData
          type: string
          name: new_password
          minLength: 6
          maxLength: 100
          required: true
      security:
        - ApiKeyHeader: []
      tags:
        - account
      responses:
        200:
          description: password has been set
        403:
          description: old password is invalid
          schema:
            $ref: '#/definitions/Error'
  /account/recover:
    post:
      consumes:
        - multipart/form-data
        - application/x-www-form-urlencoded
      parameters:
        - in: formData
          name: email
          type: string
          maxLength: 500
          required: true
      tags:
        - account
      responses:
        200:
          description: OK
        400:
          description: Email not found
          schema:
            $ref: '#/definitions/Error'
  /account/invites:
    get:
      security:
        - ApiKeyHeader: []
      tags:
        - account
      responses:
        200:
          description: invite list
          schema:
            type: object
            properties:
              invites:
                type: array
                items:
                  type: string
  /users:
    get:
      security:
        - ApiKeyHeader: []
      parameters:
        - in: query
          name: top
          type: string
          enum: [new, karma]
          default: new
      tags:
        - users
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              top:
                type: string
              users:
                type: array
                items:
                  $ref: '#/definitions/Friend'
  /users/{name}:
    parameters:
      - $ref: '#/parameters/pathName'
    get:
      security:
        - ApiKeyHeader: []
      tags:
        - users
      responses:
        200:
          description: User data
          schema:
            $ref: '#/definitions/Profile'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/Error'
  /users/{name}/followers:
    parameters:
      - $ref: '#/parameters/pathName'
    get:
      parameters:
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/skip'
      security:
        - ApiKeyHeader: []
      tags:
        - users
      responses:
        200:
          description: User list
          schema:
            $ref: '#/definitions/FriendList'
        403:
          description: access denied
          schema:
            $ref: '#/definitions/Error'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/Error'
  /users/{name}/followings:
    parameters:
      - $ref: '#/parameters/pathName'
    get:
      parameters:
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/skip'
      security:
        - ApiKeyHeader: []
      tags:
        - users
      responses:
        200:
          description: User list
          schema:
            $ref: '#/definitions/FriendList'
        403:
          description: access denied
          schema:
            $ref: '#/definitions/Error'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/Error'
  /users/{name}/invited:
    parameters:
      - $ref: '#/parameters/pathName'
    get:
      parameters:
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/skip'
      security:
        - ApiKeyHeader: []
      tags:
        - users
      responses:
        200:
          description: User list
          schema:
            $ref: '#/definitions/FriendList'
        403:
          description: access denied
          schema:
            $ref: '#/definitions/Error'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/Error'
  /users/{name}/tlog:
    parameters:
      - $ref: '#/parameters/pathName'
    get:
      parameters:
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/after'
        - $ref: '#/parameters/before'
        - $ref: '#/parameters/tag'
        - $ref: '#/parameters/sort'
      security:
        - ApiKeyHeader: []
      tags:
        - users
      responses:
        200:
          description: Entry list
          schema:
            $ref: '#/definitions/Feed'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/Error'
  /users/{name}/favorites:
    parameters:
      - $ref: '#/parameters/pathName'
    get:
      parameters:
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/after'
        - $ref: '#/parameters/before'
      security:
        - ApiKeyHeader: []
      tags:
        - users
      responses:
        200:
          description: Entry list
          schema:
            $ref: '#/definitions/Feed'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/Error'
  /me:
    get:
      security:
        - ApiKeyHeader: []
      tags:
        - me
      responses:
        200:
          description: your data
          schema:
            $ref: '#/definitions/AuthProfile'
    put:
      security:
        - ApiKeyHeader: []
      tags:
        - me
      consumes:
        - multipart/form-data
        - application/x-www-form-urlencoded
      parameters:
        - in: formData
          name: showName
          type: string
          minLength: 1
          maxLength: 20
          required: true
        - in: formData
          name: gender
          type: string
          enum: [male, female, not set]
          default: 'not set'
        - in: formData
          name: isDaylog
          type: boolean
          default: false
        - in: formData
          name: privacy
          type: string
          enum: [all, followers]
          required: true
        - in: formData
          name: title
          type: string
          maxLength: 500
          default: ''
        - in: formData
          name: birthday
          type: string
          format: full-date
          default: ''
        - in: formData
          name: country
          type: string
          maxLength: 50
          default: ''
        - in: formData
          name: city
          type: string
          maxLength: 50
          default: ''
        - in: formData
          name: showInTops
          type: boolean
          default: false
      responses:
        200:
          description: your data
          schema:
            $ref: '#/definitions/Profile'
  /me/avatar:
    put:
      security:
        - ApiKeyHeader: []
      tags:
        - me
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: file
          type: file
      responses:
        200:
          description: Avatar
          schema:
            $ref: '#/definitions/Avatar'
        400:
          description: bad request
          schema:
            $ref: '#/definitions/Error'
  /me/cover:
    put:
      security:
        - ApiKeyHeader: []
      tags:
        - me
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: file
          type: file
      responses:
        200:
          description: Cover
          schema:
            $ref: '#/definitions/Cover'
        400:
          description: bad request
          schema:
            $ref: '#/definitions/Error'
  /me/online:
    put:
      security:
        - ApiKeyHeader: []
      tags:
        - me
      responses:
        200:
          description: OK
  /me/followers:
    get:
      parameters:
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/skip'
      security:
        - ApiKeyHeader: []
      tags:
        - me
      responses:
        200:
          description: User list
          schema:
            $ref: '#/definitions/FriendList'
  /me/followings:
    get:
      parameters:
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/skip'
      security:
        - ApiKeyHeader: []
      tags:
        - me
      responses:
        200:
          description: User list
          schema:
            $ref: '#/definitions/FriendList'
  /me/invited:
    get:
      parameters:
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/skip'
      security:
        - ApiKeyHeader: []
      tags:
        - me
      responses:
        200:
          description: User list
          schema:
            $ref: '#/definitions/FriendList'
  /me/ignored:
    get:
      parameters:
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/skip'
      security:
        - ApiKeyHeader: []
      tags:
        - me
      responses:
        200:
          description: User list
          schema:
            $ref: '#/definitions/FriendList'
  /me/requested:
    get:
      parameters:
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/skip'
      security:
        - ApiKeyHeader: []
      tags:
        - me
      responses:
        200:
          description: User list
          schema:
            $ref: '#/definitions/FriendList'
  /me/tlog:
    get:
      parameters:
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/after'
        - $ref: '#/parameters/before'
        - $ref: '#/parameters/tag'
      security:
        - ApiKeyHeader: []
      tags:
        - me
      responses:
        200:
          description: Entry list
          schema:
            $ref: '#/definitions/Feed'
    post:
      security:
        - ApiKeyHeader: []
      tags:
        - me
      consumes:
        - multipart/form-data
        - application/x-www-form-urlencoded
      parameters:
        - in: formData
          name: title
          type: string
          maxLength: 500
          default: ''
        - in: formData
          name: content
          type: string
          required: true
          minLength: 1
          maxLength: 30000
        - in: formData
          name: privacy
          type: string
          enum: [all, followers, some, me]
          required: true
        - in: formData
          name: visibleFor
          type: array
          items:
            type: integer
            format: int64
            minimum: 1
        - in: formData
          name: isVotable
          type: boolean
          default: false
      responses:
        201:
          description: Entry data
          schema:
            $ref: '#/definitions/Entry'
  /me/favorites:
    get:
      parameters:
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/after'
        - $ref: '#/parameters/before'
      security:
        - ApiKeyHeader: []
      tags:
        - me
      responses:
        200:
          description: Entry list
          schema:
            $ref: '#/definitions/Feed'
  /me/watching:
    get:
      parameters:
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/after'
        - $ref: '#/parameters/before'
      security:
        - ApiKeyHeader: []
      tags:
        - me
      responses:
        200:
          description: Entry list
          schema:
            $ref: '#/definitions/Feed'
  /design:
    get:
      security:
        - ApiKeyHeader: []
      tags:
        - design
      responses:
        200:
          description: Design of your tlog
          schema:
            $ref: '#/definitions/Design'
    put:
      consumes:
        - multipart/form-data
        - application/x-www-form-urlencoded
      parameters:
        - in: formData
          name: css
          type: string
          default: ''
          maxLength: 10000
        - in: formData
          name: backgroundColor
          type: string
          pattern: '#[0-9a-fA-F]{6}'
          default: '#ffffff'
        - in: formData
          name: textColor
          type: string
          pattern: '#[0-9a-fA-F]{6}'
          default: '#000000'
        - in: formData
          name: fontFamily
          type: string
        - in: formData
          name: fontSize
          type: integer
        - in: formData
          name: textAlignment
          type: string
          enum: [left, right, center, justify]
          required: true
      security:
        - ApiKeyHeader: []
      tags:
        - design
      responses:
        200:
          description: Design of your tlog
          schema:
            $ref: '#/definitions/Design'
  /design/fonts:
    get:
      security:
        - ApiKeyHeader: []
      tags:
        - design
      responses:
        200:
          description: List of available font families
          schema:
            type: object
            properties:
              fonts:
                type: array
                items:
                  type: string
  /relations/to/{name}:
    parameters:
      - $ref: '#/parameters/pathName'
    get:
      security:
        - ApiKeyHeader: []
      tags:
        - relations
      responses:
        200:
          description: your relationship with the user
          schema:
            $ref: '#/definitions/Relationship'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/Error'
    put:
      parameters:
        - in: query
          name: r
          type: string
          enum: [followed, ignored]
          required: true
      security:
        - ApiKeyHeader: []
      tags:
        - relations
      responses:
        200:
          description: your relationship with the user
          schema:
            $ref: '#/definitions/Relationship'
        403:
          description: access denied
          schema:
            $ref: '#/definitions/Error'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/Error'
    delete:
      security:
        - ApiKeyHeader: []
      tags:
        - relations
      responses:
        200:
          description: your relationship with the user
          schema:
            $ref: '#/definitions/Relationship'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/Error'
  /relations/from/{name}:
    parameters:
      - $ref: '#/parameters/pathName'
    get:
      security:
        - ApiKeyHeader: []
      tags:
        - relations
      responses:
        200:
          description: the user relationship with you
          schema:
            $ref: '#/definitions/Relationship'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: permit the user to follow you
      security:
        - ApiKeyHeader: []
      tags:
        - relations
      responses:
        200:
          description: the user relationship with you
          schema:
            $ref: '#/definitions/Relationship'
        403:
          description: access denied
          schema:
            $ref: '#/definitions/Error'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: cancel following request or unsubscribe the user
      security:
        - ApiKeyHeader: []
      tags:
        - relations
      responses:
        200:
          description: the user relationship with you
          schema:
            $ref: '#/definitions/Relationship'
        403:
          description: access denied
          schema:
            $ref: '#/definitions/Error'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/Error'
  /entries/live:
    get:
      parameters:
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/after'
        - $ref: '#/parameters/before'
        - $ref: '#/parameters/tag'
      security:
        - ApiKeyHeader: []
      tags:
        - entries
      responses:
        200:
          description: Entry list
          schema:
            $ref: '#/definitions/Feed'
  /entries/friends:
    get:
      parameters:
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/after'
        - $ref: '#/parameters/before'
        - $ref: '#/parameters/tag'
      security:
        - ApiKeyHeader: []
      tags:
        - entries
      responses:
        200:
          description: Entry list
          schema:
            $ref: '#/definitions/Feed'
  /entries/best:
    get:
      parameters:
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/after'
        - $ref: '#/parameters/before'
        - $ref: '#/parameters/tag'
        - in: query
          name: min_rating
          type: integer
      security:
        - ApiKeyHeader: []
      tags:
        - entries
      responses:
        200:
          description: Entry list
          schema:
            $ref: '#/definitions/Feed'
  /entries/anonymous:
    get:
      parameters:
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/after'
        - $ref: '#/parameters/before'
        - $ref: '#/parameters/tag'
      security:
        - ApiKeyHeader: []
      tags:
        - entries
      responses:
        200:
          description: Entry list
          schema:
            $ref: '#/definitions/Feed'
    post:
      security:
        - ApiKeyHeader: []
      tags:
        - entries
      consumes:
        - multipart/form-data
        - application/x-www-form-urlencoded
      parameters:
        - in: formData
          name: title
          type: string
          default: ''
          maxLength: 500
        - in: formData
          name: content
          type: string
          minLength: 1
          maxLength: 30000
          required: true
        - in: formData
          name: anonymous_comments
          type: boolean
          default: false
      responses:
        201:
          description: Entry data
          schema:
            $ref: '#/definitions/Entry'
  /entries/{id}:
    parameters:
      - $ref: '#/parameters/pathId'
    get:
      security:
        - ApiKeyHeader: []
      tags:
        - entries
      responses:
        200:
          description: Entry data
          schema:
            $ref: '#/definitions/Entry'
        403:
          description: access denied
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Entry not found
          schema:
            $ref: '#/definitions/Error'
    put:
      security:
        - ApiKeyHeader: []
      tags:
        - entries
      consumes:
        - multipart/form-data
        - application/x-www-form-urlencoded
      parameters:
        - in: formData
          name: title
          type: string
          default: ''
          maxLength: 500
        - in: formData
          name: content
          type: string
          required: true
          minLength: 1
          maxLength: 30000
        - in: formData
          name: privacy
          type: string
          enum: [all, followers, some, me, anonymous]
          required: true
        - in: formData
          name: visibleFor
          type: array
          items:
            type: integer
            format: int64
            minimum: 1
        - in: formData
          name: isVotable
          type: boolean
          default: false
        - in: formData
          name: anonymous_comments
          type: boolean
          default: false
      responses:
        200:
          description: Entry data
          schema:
            $ref: '#/definitions/Entry'
        403:
          description: access denied
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Entry not found
          schema:
            $ref: '#/definitions/Error'
    delete:
      security:
        - ApiKeyHeader: []
      tags:
        - entries
      responses:
        200:
          description: OK
        403:
          description: access denied
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Entry not found
          schema:
            $ref: '#/definitions/Error'
  /entries/{id}/vote:
    parameters:
      - $ref: '#/parameters/pathId'
    get:
      security:
        - ApiKeyHeader: []
      tags:
        - votes
      responses:
        200:
          description: vote status
          schema:
            $ref: '#/definitions/Rating'
        403:
          description: access denied
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Entry not found
          schema:
            $ref: '#/definitions/Error'
    put:
      parameters:
        - in: query
          name: positive
          type: boolean
          default: true
      security:
        - ApiKeyHeader: []
      tags:
        - votes
      responses:
        200:
          description: vote status
          schema:
            $ref: '#/definitions/Rating'
        403:
          description: access denied
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Entry not found
          schema:
            $ref: '#/definitions/Error'
    delete:
      security:
        - ApiKeyHeader: []
      tags:
        - votes
      responses:
        200:
          description: vote status
          schema:
            $ref: '#/definitions/Rating'
        403:
          description: access denied
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Entry not found
          schema:
            $ref: '#/definitions/Error'
  /entries/{id}/favorite:
    parameters:
      - $ref: '#/parameters/pathId'
    get:
      security:
        - ApiKeyHeader: []
      tags:
        - favorites
      responses:
        200:
          description: favorite status
          schema:
            $ref: '#/definitions/FavoriteStatus'
        404:
          description: Entry not found
          schema:
            $ref: '#/definitions/Error'
    put:
      security:
        - ApiKeyHeader: []
      tags:
        - favorites
      responses:
        200:
          description: favorite status
          schema:
            $ref: '#/definitions/FavoriteStatus'
        404:
          description: Entry not found
          schema:
            $ref: '#/definitions/Error'
    delete:
      security:
        - ApiKeyHeader: []
      tags:
        - favorites
      responses:
        200:
          description: favorite status
          schema:
            $ref: '#/definitions/FavoriteStatus'
        404:
          description: Entry not found
          schema:
            $ref: '#/definitions/Error'
  /entries/{id}/watching:
    parameters:
      - $ref: '#/parameters/pathId'
    get:
      security:
        - ApiKeyHeader: []
      tags:
        - watchings
      responses:
        200:
          description: watching status
          schema:
            $ref: '#/definitions/WatchingStatus'
        404:
          description: Entry not found
          schema:
            $ref: '#/definitions/Error'
    put:
      security:
        - ApiKeyHeader: []
      tags:
        - watchings
      responses:
        200:
          description: watching status
          schema:
            $ref: '#/definitions/WatchingStatus'
        404:
          description: Entry not found
          schema:
            $ref: '#/definitions/Error'
    delete:
      security:
        - ApiKeyHeader: []
      tags:
        - watchings
      responses:
        200:
          description: watching status
          schema:
            $ref: '#/definitions/WatchingStatus'
        404:
          description: Entry not found
          schema:
            $ref: '#/definitions/Error'
  /entries/{id}/comments:
    parameters:
      - $ref: '#/parameters/pathId'
    get:
      parameters:
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/after'
        - $ref: '#/parameters/before'
      security:
        - ApiKeyHeader: []
      tags:
        - comments
      responses:
        200:
          description: comments list
          schema:
            $ref: '#/definitions/CommentList'
        404:
          description: Entry not found
          schema:
            $ref: '#/definitions/Error'
    post:
      consumes:
        - multipart/form-data
        - application/x-www-form-urlencoded
      parameters:
        - in: formData
          name: content
          type: string
          minLength: 1
          maxLength: 1000
          required: true
      security:
        - ApiKeyHeader: []
      tags:
        - comments
      responses:
        201:
          description: Comment data
          schema:
            $ref: '#/definitions/Comment'
        403:
          description: access denied
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Entry not found
          schema:
            $ref: '#/definitions/Error'
  /comments/{id}:
    parameters:
      - $ref: '#/parameters/pathId'
    get:
      security:
        - ApiKeyHeader: []
      tags:
        - comments
      responses:
        200:
          description: Comment data
          schema:
            $ref: '#/definitions/Comment'
        403:
          description: access denied
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Comment not found
          schema:
            $ref: '#/definitions/Error'
    put:
      consumes:
        - multipart/form-data
        - application/x-www-form-urlencoded
      parameters:
        - in: formData
          name: content
          type: string
          minLength: 1
          maxLength: 1000
          required: true
      security:
        - ApiKeyHeader: []
      tags:
        - comments
      responses:
        200:
          description: Comment data
          schema:
            $ref: '#/definitions/Comment'
        403:
          description: access denied
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Comment not found
          schema:
            $ref: '#/definitions/Error'
    delete:
      security:
        - ApiKeyHeader: []
      tags:
        - comments
      responses:
        200:
          description: OK
        403:
          description: access denied
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Comment not found
          schema:
            $ref: '#/definitions/Error'
  /comments/{id}/vote:
    parameters:
      - $ref: '#/parameters/pathId'
    get:
      security:
        - ApiKeyHeader: []
      tags:
        - votes
      responses:
        200:
          description: vote status
          schema:
            $ref: '#/definitions/Rating'
        404:
          description: Comment not found
          schema:
            $ref: '#/definitions/Error'
    put:
      parameters:
        - in: query
          name: positive
          type: boolean
          default: true
      security:
        - ApiKeyHeader: []
      tags:
        - votes
      responses:
        200:
          description: vote status
          schema:
            $ref: '#/definitions/Rating'
        404:
          description: Comment not found
          schema:
            $ref: '#/definitions/Error'
    delete:
      security:
        - ApiKeyHeader: []
      tags:
        - votes
      responses:
        200:
          description: vote status
          schema:
            $ref: '#/definitions/Rating'
        404:
          description: Comment not found
          schema:
            $ref: '#/definitions/Error'
produces:
  - application/json
schemes:
  - http
swagger: '2.0'
basePath: /api/v1
